<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.6.3">Jekyll</generator><link href="https://lahuman.github.io/feed.xml" rel="self" type="application/atom+xml" /><link href="https://lahuman.github.io/" rel="alternate" type="text/html" /><updated>2024-03-11T14:09:15+00:00</updated><id>https://lahuman.github.io/feed.xml</id><title type="html">lahuman</title><subtitle>열심히 사는 아저씨</subtitle><entry><title type="html">행복한 개발자가 되기 위해서</title><link href="https://lahuman.github.io/20240311/" rel="alternate" type="text/html" title="행복한 개발자가 되기 위해서" /><published>2024-03-11T00:00:00+00:00</published><updated>2024-03-11T00:00:00+00:00</updated><id>https://lahuman.github.io/20240311</id><content type="html" xml:base="https://lahuman.github.io/20240311/">&lt;h1 id=&quot;행복한-백발의-개발자라는-제목으로-2024-03-06-어느-it-업체에서-직책자로-승진한-분들을-대상으로-한-강연-발표-자료-를-보고&quot;&gt;&lt;a href=&quot;https://www.slideshare.net/slideshows/20240306-it/266665622?fbclid=IwAR08GNtvVaIkfnpvWG6ovt3kIOPQ6YPLahDgQ09_I13bxV0zQAk9vsYZBDg&quot;&gt;“행복한 백발의 개발자”라는 제목으로 2024-03-06 어느 IT 업체에서 직책자로 승진한 분들을 대상으로 한 강연 발표 자료.&lt;/a&gt; 를 보고&lt;/h1&gt;

&lt;p&gt;케이타운포유에서 근무하시는 백명석님의 자료를 보고 생각을 정리 한 내용입니다&lt;/p&gt;

&lt;p&gt;위에 링크를 보면 상세한 자료를 확인할 수 있습니다.&lt;/p&gt;

&lt;p&gt;나 스스로에게 묻고 답하는 내용이라 반말로 작성되어 있습니다.&lt;/p&gt;

&lt;h2 id=&quot;나는-행복한가&quot;&gt;나는 행복한가?&lt;/h2&gt;

&lt;p&gt;우선 나의 &lt;code class=&quot;highlighter-rouge&quot;&gt;워라벨&lt;/code&gt;은 매우 훌륭하다. 다만, 매일이 즐겁냐라고 묻는다면, 워라벨이 안좋았던 때보단 즐겁지 않다.&lt;/p&gt;

&lt;p&gt;개발은 여전히 즐겁지만, 공감없이 해야하는 일들이 발목을 잡는다.&lt;/p&gt;

&lt;p&gt;주변 동료에게 지식과 경험을 공유하여 선한 영향력을 얻기 위해서 노력중이지만, 생각만큼 결과가 좋지 않다.&lt;/p&gt;

&lt;h2 id=&quot;나는-성장하고-있는가&quot;&gt;나는 성장하고 있는가?&lt;/h2&gt;

&lt;p&gt;아직도 성장을 위해 늘 노력 중이다.
다만, 30대의 내가 단거리 달리기처럼 뛰었다면 지금은 장거리 달리기처럼 천천히 달리고 있다.&lt;/p&gt;

&lt;p&gt;어제의 나보다 0.1 이라도 발전하려고 노력하는 중이다.&lt;/p&gt;

&lt;h2 id=&quot;나는-학습하고-있는가&quot;&gt;나는 학습하고 있는가?&lt;/h2&gt;

&lt;p&gt;소프트웨어는 지속적을 변화한다. 나는 여전히 새로운 기술도 사용해보고 도전하는 중이다. 성장을 위해서 학습을 한다.&lt;/p&gt;

&lt;p&gt;요즘은 기술 보다는 사람에 대한 학습을 한다. 조금 더 이해하고 변화시키는 방안을 고민한다.&lt;/p&gt;

&lt;h2 id=&quot;나의-활동이-다른-누군가에게-동기-부여가-되는가&quot;&gt;나의 활동이 다른 누군가에게 동기 부여가 되는가?&lt;/h2&gt;

&lt;p&gt;외적 동기 부여보다는 내적 동기 부여에 힘을 쏟고 있다.&lt;/p&gt;

&lt;p&gt;높다면 높은 자리에 있기에, 다른 동료가 보기에 롤모델이 되도록 노력을 하고 있다&lt;/p&gt;

&lt;h2 id=&quot;나는-일-잘하는-개발자-인가-개발-리더-인가&quot;&gt;나는 일 잘하는 개발자 인가? 개발 리더 인가?&lt;/h2&gt;

&lt;p&gt;아직까지 내 일은 잘한다.&lt;/p&gt;

&lt;p&gt;좋은 개발 리더인가는 누군가에겐 좋은, 누군가에겐 안 좋은 리더같다.&lt;/p&gt;

&lt;p&gt;빠르게 피드백하고, 결과물이 잘 나오는 동료에게는 좋은 리더가 되지만,&lt;/p&gt;

&lt;p&gt;피드백이 느리고, 결과물도 안나오는 동료에게는 마이크로매니징을 하는 리더가 된다.&lt;/p&gt;

&lt;h2 id=&quot;나는-우리팀-에이스-인가&quot;&gt;나는 우리팀 에이스 인가?&lt;/h2&gt;

&lt;p&gt;에이스까지는 아니고 오지랍이 넓다.&lt;/p&gt;

&lt;p&gt;너의 일과 나의 일로 나누어서 생각하지 않고 가능하면 우리 일로 생각하고 행동한다.&lt;/p&gt;

&lt;h2 id=&quot;의사-소통을-잘하는가&quot;&gt;의사 소통을 잘하는가?&lt;/h2&gt;

&lt;p&gt;성격이 급해서 잘될때는 일이 아주 빠르게 진행되지만,&lt;/p&gt;

&lt;p&gt;안될때는 짜증만 내는 것처럼 보여진다.&lt;/p&gt;

&lt;h2 id=&quot;문서는-잘-작성-하는가&quot;&gt;문서는 잘 작성 하는가?&lt;/h2&gt;

&lt;p&gt;기억에 의존하기 보다는 메모 또는 컨플런스 같이 문서를 작성하려고 노력한다.&lt;/p&gt;

&lt;p&gt;다만, 내가 읽고 이해 못하는 경우도 있기에 가능하면 6하원칙에 따라 작성하려고 노력한다.&lt;/p&gt;

&lt;h2 id=&quot;마지막으로-하고-싶은-말은&quot;&gt;마지막으로 하고 싶은 말은?&lt;/h2&gt;

&lt;p&gt;이전만큼 빠르진 않지만 지속적으로 발전하기 위해 노력중이다.&lt;/p&gt;

&lt;p&gt;내일의 내가 오늘의 나보다는 한발자국이라도 나아갔으면 좋겠다.&lt;/p&gt;</content><author><name></name></author><category term="단상" /><summary type="html">노력하고 노력하자!</summary></entry><entry><title type="html">spring security와 함께 테스트 하기!</title><link href="https://lahuman.github.io/spring_security_test/" rel="alternate" type="text/html" title="spring security와 함께 테스트 하기!" /><published>2024-02-26T00:00:00+00:00</published><updated>2024-02-26T00:00:00+00:00</updated><id>https://lahuman.github.io/spring_security_test</id><content type="html" xml:base="https://lahuman.github.io/spring_security_test/">&lt;h1 id=&quot;spring-security-for-spring-boot-integration-tests&quot;&gt;&lt;a href=&quot;https://www.baeldung.com/spring-security-integration-tests&quot;&gt;Spring Security for Spring Boot Integration Tests&lt;/a&gt;&lt;/h1&gt;

&lt;blockquote&gt;
  &lt;p&gt;Security 설정이 완료 되어 있다는 전재하에 작성했습니다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;아래와 같이 설정이 되어 있으면,&lt;/p&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@Configuration&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;WebSecurityConfigurer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@Bean&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;InMemoryUserDetailsManager&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;userDetailsService&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PasswordEncoder&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;passwordEncoder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;UserDetails&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;user&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;withUsername&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;spring&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;password&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;passwordEncoder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;encode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;secret&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;roles&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;USER&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;build&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;InMemoryUserDetailsManager&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@Bean&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SecurityFilterChain&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;filterChain&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;HttpSecurity&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;http&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Exception&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;http&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;authorizeRequests&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;antMatchers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/private/**&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;hasRole&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;USER&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;antMatchers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/public/**&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;permitAll&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;and&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;httpBasic&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;http&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;build&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@Bean&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BCryptPasswordEncoder&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;passwordEncoder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;BCryptPasswordEncoder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;테스트 코드를 다음과 같이 작성하면 됩니다.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@RunWith&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SpringRunner&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@WebMvcTest&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SecuredController&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;SecuredControllerWebMvcIntegrationTest&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@Autowired&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MockMvc&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mvc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// ... other methods&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@WithMockUser&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;spring&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@Test&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;givenAuthRequestOnPrivateService_shouldSucceedWith200&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Exception&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;mvc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;perform&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/private/hello&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;contentType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MediaType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;APPLICATION_JSON&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;
          &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;andExpect&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;status&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;isOk&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;위에서 중요한 몇가지 키워드는 &lt;code class=&quot;highlighter-rouge&quot;&gt;MockMvc&lt;/code&gt; 와 &lt;code class=&quot;highlighter-rouge&quot;&gt;WithMockUser&lt;/code&gt; 입니다.
2가지가 맞아아 user 정보가 Injection됩니다.&lt;/p&gt;

&lt;h2 id=&quot;참고-자료&quot;&gt;참고 자료&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.baeldung.com/spring-security-integration-tests&quot;&gt;Spring Security for Spring Boot Integration Tests&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name></name></author><category term="spring" /><category term="security" /><category term="test" /><summary type="html">인증 처리 방법</summary></entry><entry><title type="html">JDK21 + Spring 3.2 + virtual thread</title><link href="https://lahuman.github.io/jdk21_virtual_thread/" rel="alternate" type="text/html" title="JDK21 + Spring 3.2 + virtual thread" /><published>2024-02-20T00:00:00+00:00</published><updated>2024-02-20T00:00:00+00:00</updated><id>https://lahuman.github.io/jdk21_virtual_thread</id><content type="html" xml:base="https://lahuman.github.io/jdk21_virtual_thread/">&lt;h1 id=&quot;virtual-thread를-사용해보자&quot;&gt;Virtual Thread를 사용해보자!&lt;/h1&gt;

&lt;blockquote&gt;
  &lt;p&gt;이번 프로젝트는 kotlin + jdk21 + spring 3.2의 환경입니다. jdk21이면 많이 이야기되는 virtual thread를 사용할지를 이야기 하기 위한 사전 조사를 했습니다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;virtual-thread란&quot;&gt;Virtual Thread란?&lt;/h2&gt;

&lt;p&gt;우선 Virtual Thread를 이해하기 위해서는 몇가지 알아야 하는 사항이 있습니다.&lt;/p&gt;

&lt;h3 id=&quot;platform-thread&quot;&gt;Platform Thread&lt;/h3&gt;

&lt;h4 id=&quot;system-call&quot;&gt;System call&lt;/h4&gt;
&lt;div class=&quot;mermaid&quot;&gt; 
flowchart LR;
    A[CPU] --&amp;gt;B{Scheduler};
    subgraph OS-Linux;
    B --&amp;gt; C[Thread 1];
    B --&amp;gt; E[Thread 2];
    B --&amp;gt; F[Thread N];
    end;
    subgraph JNI;
    F --&amp;gt; G[[JNI]];
    E --&amp;gt; G;
    C --&amp;gt; G;
    end;
    subgraph JVM;
    G --&amp;gt; H[Thread 1];
    G --&amp;gt; I[Thread 2];
    G --&amp;gt; J[Thread N];
    end;
&lt;/div&gt;

&lt;p&gt;Platform Thread는 OS Thread를 감싼 형태로 구현됩니다.&lt;/p&gt;

&lt;h4 id=&quot;thread의-생애-주기&quot;&gt;Thread의 생애 주기&lt;/h4&gt;
&lt;div class=&quot;mermaid&quot;&gt; 
flowchart LR;
    A[NEW] --&amp;gt;|start| B[RUNNABLE];
    B --&amp;gt;|run| C[RUNNING];
    E[NON-RUNNABLE];
    subgraph context switch;
    C -.-&amp;gt;|yield| B;
    E -.-&amp;gt;|sleep end, i/o completes,  etc| B;
    C -.-&amp;gt;|sleep, block i/o, etc| E;
    end;
    C --&amp;gt;|stop| D[TERMINATIED];
&lt;/div&gt;

&lt;p&gt;자바에서는 Thread가 I/O 작업, 인터럽트 또는 sleep 명령을 만날 때 블로킹 또는 대기 상태로 들어갑니다. 이 기간 동안 다른 Thread가 운영 체제의 자원을 활용하여 작업을 수행할 수 있으며, 이를 &lt;code class=&quot;highlighter-rouge&quot;&gt;Context Switching&lt;/code&gt;이라고 합니다. 이 모델은 기존의 프로세스 모델을 작은 단위로 분할하여 프로세스 내에서 공유 자원을 허용하면서 작은 작업 단위를 번갈아 가며 실행하는 것을 의미합니다.&lt;/p&gt;

&lt;p&gt;다만, 요청량이 급격하기 증가하는 서버 환경에서는 갈수록 더 많은 Thread 수를 요구 하게 되어 이를 극복하기 위해서 나온 것이 경량 스레드 모델인 &lt;code class=&quot;highlighter-rouge&quot;&gt;Virutal Thread&lt;/code&gt;입니다.&lt;/p&gt;

&lt;p&gt;Virtual Thread의 가장 큰 특징은 &lt;code class=&quot;highlighter-rouge&quot;&gt;컨텍스트 스위칭 비용이 저렴&lt;/code&gt; 하다는 것입니다.&lt;/p&gt;

&lt;h4 id=&quot;virtual-thread&quot;&gt;Virtual Thread&lt;/h4&gt;
&lt;div class=&quot;mermaid&quot;&gt; 
flowchart LR;
    A[CPU] --&amp;gt;B{Scheduler};
    subgraph OS-Linux;
    B --&amp;gt; C[Thread 1];
    B --&amp;gt; E[Thread 2];
    B --&amp;gt; F[Thread N];
    end;
    subgraph JNI;
    F --&amp;gt; G[[JNI]];
    E --&amp;gt; G;
    C --&amp;gt; G;
    end;
    subgraph JVM;
    G --&amp;gt; H{Scheduler};
    G --&amp;gt; H;
    G --&amp;gt; H;
    H --&amp;gt; J[Platform Thread 1];
    H --&amp;gt; K[Platform Thread 2];
    H --&amp;gt; L[Platform Thread N];
    J --&amp;gt; M[Virtual Thread 1];
    J --&amp;gt; N[Virtual Thread 2];
    J --&amp;gt; O[Virtual Thread N];
    K --&amp;gt; P[Virtual Thread 4];
    K --&amp;gt; Q[Virtual Thread 5];
    K --&amp;gt; R[Virtual Thread N];
    L --&amp;gt; S[Virtual Thread 7];
    L --&amp;gt; T[Virtual Thread 8];
    L --&amp;gt; U[Virtual Thread N];
    end;
&lt;/div&gt;

&lt;h2 id=&quot;spring-32-에서-virtual-thread-사용하기&quot;&gt;Spring 3.2 에서 Virtual Thread 사용하기&lt;/h2&gt;
&lt;p&gt;Spring 3.2 부터는 Virtual Thread를 공식적으로 지원하기 시작하였습니다.&lt;/p&gt;

&lt;p&gt;사용 방법은 간단하게 properties에 아래와 같이 설정 하면 됩니다.&lt;/p&gt;

&lt;div class=&quot;language-properties highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;py&quot;&gt;spring.threads.virtual.enabled&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;true&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;위와 같이 설정할 경우 기본적으로 Tomcat에서 Virtual Thread를 사용하도록 설정이 변경 됩니다.&lt;/p&gt;

&lt;p&gt;기타 부분은 수동으로 교체 작업을 해야 합니다.&lt;/p&gt;

&lt;h2 id=&quot;마치며&quot;&gt;마치며&lt;/h2&gt;

&lt;p&gt;Virtual Threaad는 약 5년 가까이 준비되었던 JDK의 프로젝트였고, 기존 Platform Thread와 호환성을 최대한 맞춰서 개발되었습니다.&lt;/p&gt;

&lt;p&gt;물론 Virtual Thread에 대한 이해도가 있어야 하지만, 간단하게 위와 같이 설정으로 Virtual Thread를 활용할 수 있습니다.&lt;/p&gt;

&lt;p&gt;참고 자료에는 좋은 내용이 많으니 꼭 읽어 보시기를 추천 드립니다.&lt;/p&gt;

&lt;h2 id=&quot;참고-자료&quot;&gt;참고 자료&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://techblog.woowahan.com/15398/&quot;&gt;Java의 미래, Virtual Thread&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://tech.kakao.com/2023/12/22/techmeet-virtualthread/&quot;&gt;JDK 21의 신기능 Virtual Thread 알아보기 / 제4회 Kakao Tech Meet&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.oracle.com/en/java/javase/21/core/virtual-threads.html#GUID-DC4306FC-D6C1-4BCC-AECE-48C32C1A8DAA&quot;&gt;Virtual Thread&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://mangkyu.tistory.com/317&quot;&gt;[Spring] 가상 스레드(Virtual Thread)를 지원하기 위한 스프링의 작업들과 마이그레이션 시의 주의 사항&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name></name></author><category term="spring" /><category term="jdk21" /><summary type="html">일단 고! 써보자</summary></entry><entry><title type="html">spring security에서 로그인 된 사용자 정보 가져오는 몇가지 방법</title><link href="https://lahuman.github.io/spring_security_get_user/" rel="alternate" type="text/html" title="spring security에서 로그인 된 사용자 정보 가져오는 몇가지 방법" /><published>2024-02-07T00:00:00+00:00</published><updated>2024-02-07T00:00:00+00:00</updated><id>https://lahuman.github.io/spring_security_get_user</id><content type="html" xml:base="https://lahuman.github.io/spring_security_get_user/">&lt;h1 id=&quot;retrieve-user-information-in-spring-security&quot;&gt;&lt;a href=&quot;https://www.baeldung.com/get-user-in-spring-security&quot;&gt;Retrieve User Information in Spring Security&lt;/a&gt;&lt;/h1&gt;

&lt;blockquote&gt;
  &lt;p&gt;전제 조건으로 &lt;code class=&quot;highlighter-rouge&quot;&gt;security&lt;/code&gt;를 이용한 인증을 모두 완료 후 인증된 정보를 가져오는 방법입니다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;단순한-정보-호출-방법&quot;&gt;단순한 정보 호출 방법&lt;/h2&gt;

&lt;p&gt;아래와 같이 &lt;code class=&quot;highlighter-rouge&quot;&gt;SecurityContextHolder&lt;/code&gt;를 통해서 정보를 가져올 수 있습니다.&lt;/p&gt;

&lt;h3 id=&quot;인증된-정보를-가져오는-단순한-방법&quot;&gt;인증된 정보를 가져오는 단순한 방법&lt;/h3&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;Authentication&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;authentication&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SecurityContextHolder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getContext&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getAuthentication&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;currentPrincipalName&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;authentication&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;Authentication&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;authentication&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SecurityContextHolder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getContext&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getAuthentication&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(!(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;authentication&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;instanceof&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;AnonymousAuthenticationToken&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;currentUserName&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;authentication&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;currentUserName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;인증된-객체를-가져오는-방법&quot;&gt;인증된 객체를 가져오는 방법&lt;/h3&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;UserDetails&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;userDetails&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;UserDetails&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;authentication&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getPrincipal&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;User has authorities: &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;userDetails&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getAuthorities&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;controller에서-인증된-객체를-가져오는-방법&quot;&gt;Controller에서 인증된 객체를 가져오는 방법&lt;/h2&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@Controller&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;GetUserWithPrincipalController&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@RequestMapping&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;/username&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;method&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;RequestMethod&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;GET&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@ResponseBody&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;currentUserName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Principal&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;principal&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;principal&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@Controller&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;GetUserWithAuthenticationController&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@RequestMapping&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;/username&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;method&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;RequestMethod&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;GET&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@ResponseBody&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;currentUserName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Authentication&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;authentication&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;authentication&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;request-객체에서-직접-호출-하는-방법&quot;&gt;Request 객체에서 직접 호출 하는 방법&lt;/h3&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@Controller&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;GetUserWithHTTPServletRequestController&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@RequestMapping&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;/username&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;method&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;RequestMethod&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;GET&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@ResponseBody&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;currentUserNameSimple&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;HttpServletRequest&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;Principal&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;principal&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getUserPrincipal&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;principal&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;마지막으로-제가-가장-선호하는-annotation-기반으로-가져오는-방법&quot;&gt;마지막으로 제가 가장 선호하는 annotation 기반으로 가져오는 방법&lt;/h3&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@RestController&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;GetUserWithAuthenticationPrincipalAnnotationController&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    
    &lt;span class=&quot;nd&quot;&gt;@GetMapping&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/user&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getUser&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;@AuthenticationPrincipal&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;UserDetails&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;userDetails&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;User Details: &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;userDetails&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getUsername&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;여러 방식으로 필요할때, 현재 인증된 정보를 가져와서 사용하면 됩니다&lt;/p&gt;

&lt;h2 id=&quot;참고-자료&quot;&gt;참고 자료&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.baeldung.com/get-user-in-spring-security&quot;&gt;Retrieve User Information in Spring Security&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name></name></author><category term="spring" /><category term="security" /><summary type="html">Controller에서 annotation으로 가져올 수 도 있음!</summary></entry><entry><title type="html">[kotlin + Spring]swagger 를 설정하자!</title><link href="https://lahuman.github.io/spring_kotlin_swagger/" rel="alternate" type="text/html" title="[kotlin + Spring]swagger 를 설정하자!" /><published>2024-01-26T00:00:00+00:00</published><updated>2024-01-26T00:00:00+00:00</updated><id>https://lahuman.github.io/spring_kotlin_swagger</id><content type="html" xml:base="https://lahuman.github.io/spring_kotlin_swagger/">&lt;h1 id=&quot;springdoc-openapi-v230&quot;&gt;&lt;a href=&quot;https://springdoc.org/&quot;&gt;springdoc-openapi v2.3.0&lt;/a&gt;&lt;/h1&gt;

&lt;p&gt;springBoot 3.x 부터는 &lt;a href=&quot;https://springdoc.org/&quot;&gt;springdoc-openapi v2.3.0&lt;/a&gt; 모듈을 사용해야 합니다. 
이전 버젼은 &lt;code class=&quot;highlighter-rouge&quot;&gt;springdoc-openapi v1.7.0&lt;/code&gt;을 이용해야 합니다.&lt;/p&gt;

&lt;p&gt;설치는 &lt;code class=&quot;highlighter-rouge&quot;&gt;build.gradle.kts&lt;/code&gt; 에 아래 디펜던시를 추가 합니다.&lt;/p&gt;

&lt;div class=&quot;language-gradle highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;implementation&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;org.springdoc:springdoc-openapi-starter-webmvc-ui:2.3.0&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Swagger 설정은 다음과 같이 단순하게 class를 추가해서 설정할 수 있습니다.&lt;/p&gt;

&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;package&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;io.lahuman.config&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;io.swagger.v3.oas.annotations.OpenAPIDefinition&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;io.swagger.v3.oas.annotations.info.Info&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;io.swagger.v3.oas.annotations.servers.Server&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.springframework.context.annotation.Configuration&lt;/span&gt;


&lt;span class=&quot;n&quot;&gt;@OpenAPIDefinition&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;info&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Info&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;title&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;제목&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;description&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;설명&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;version&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;v1&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;servers&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;Server&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;url&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;\${springdoc.swagger-ui.server}&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;@Configuration&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;SwaggerConfig&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;추가로 &lt;code class=&quot;highlighter-rouge&quot;&gt;/resource/application.yml&lt;/code&gt;에 몇가지 설정을 넣어서 마무리 하면 됩니다.&lt;/p&gt;

&lt;div class=&quot;language-yml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
&lt;span class=&quot;na&quot;&gt;springdoc&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;default-consumes-media-type&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;application/json&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;default-produces-media-type&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;application/json&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;swagger-ui&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;tags-sorter&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;alpha&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;server&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;http://localhost:8080/&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;/swagger-ui.html&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;server&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;servlet&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;context-path&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;/&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;encoding&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;force&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;true&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;실제 swagger 화면을 보기 위한 접속 주소는 &lt;code class=&quot;highlighter-rouge&quot;&gt;http://localhost:8080/swagger-ui.html&lt;/code&gt; 으로 접근하면 swagger 화면을 확인 할 수 있습니다.&lt;/p&gt;

&lt;h2 id=&quot;참고자료&quot;&gt;참고자료&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://springdoc.org/&quot;&gt;springdoc-openapi v2.3.0&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name></name></author><category term="kotlin" /><category term="spring" /><category term="swagger" /><summary type="html">swagger 설정!</summary></entry><entry><title type="html">함께 일하고 싶은 동료, 그리고 함께 하면 피곤한 동료</title><link href="https://lahuman.github.io/20240125/" rel="alternate" type="text/html" title="함께 일하고 싶은 동료, 그리고 함께 하면 피곤한 동료" /><published>2024-01-25T00:00:00+00:00</published><updated>2024-01-25T00:00:00+00:00</updated><id>https://lahuman.github.io/20240125</id><content type="html" xml:base="https://lahuman.github.io/20240125/">&lt;h1 id=&quot;결국-사람인데&quot;&gt;결국 사람인데…&lt;/h1&gt;

&lt;p&gt;함께 일울 하면 힘이 되는 사람이 있고,&lt;/p&gt;

&lt;p&gt;함께 일을 하면 기운 빠지게 만드는 사람이 있습니다.&lt;/p&gt;

&lt;p&gt;서로 맞지 않는다고 생각하는데 어떻게 계속 함께 일하게 되네요.&lt;/p&gt;

&lt;p&gt;늘 사람이 가장 어렵고 힘드네요.&lt;/p&gt;</content><author><name></name></author><category term="phase" /><summary type="html">함께 하기 싫은 사람과 함께 해야 할 때도 있다</summary></entry><entry><title type="html">kotlin + Spring</title><link href="https://lahuman.github.io/spring_kotlin/" rel="alternate" type="text/html" title="kotlin + Spring" /><published>2024-01-25T00:00:00+00:00</published><updated>2024-01-25T00:00:00+00:00</updated><id>https://lahuman.github.io/spring_kotlin</id><content type="html" xml:base="https://lahuman.github.io/spring_kotlin/">&lt;h1 id=&quot;이번에는-코프링이다&quot;&gt;이번에는 코프링이다!&lt;/h1&gt;

&lt;p&gt;이번 프로젝트는 kotlin + spring으로 결정했습니다.&lt;/p&gt;

&lt;p&gt;익숙한 nodejs를 선택하지 않은 이유는 2가지가 있습니다.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;새로운 걸 할때가 되었다.&lt;/li&gt;
  &lt;li&gt;동료중에 코틀린 좀 치는 분이 계시다.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;자바 + Spring은 경험했었지만, 코틀린은 처음이라 기대 반 걱정반입니다.&lt;/p&gt;

&lt;h2 id=&quot;코틀린으로-시작해보자&quot;&gt;코틀린으로 시작해보자&lt;/h2&gt;

&lt;p&gt;기본 문법은 가법게 책과 동영상으로 익히고 바로 spring을 접해보기로 했습니다.&lt;/p&gt;

&lt;h3 id=&quot;spring-기본-설정-프로젝트-생성하기&quot;&gt;spring 기본 설정 프로젝트 생성하기&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://start.spring.io/&quot;&gt;Spring initializer&lt;/a&gt; 를 통해서 프로젝트를 생성하거나, 아래와 같은 curl 명령어를 이용해서 파일을 다운 받을 수 있습니다.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;mkdir blog &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;blog
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;curl https://start.spring.io/starter.zip &lt;span class=&quot;nt&quot;&gt;-d&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;language&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;kotlin &lt;span class=&quot;nt&quot;&gt;-d&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;gradle-project-kotlin &lt;span class=&quot;nt&quot;&gt;-d&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;dependencies&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;web,mustache,jpa,h2,devtools &lt;span class=&quot;nt&quot;&gt;-d&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;packageName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;com.example.blog &lt;span class=&quot;nt&quot;&gt;-d&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;Blog &lt;span class=&quot;nt&quot;&gt;-o&lt;/span&gt; blog.zip
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;아래는 주요 설정을 설명 합니다.&lt;/p&gt;

&lt;h3 id=&quot;buildgradlekts&quot;&gt;build.gradle.kts&lt;/h3&gt;

&lt;p&gt;JSR 305 어노테이션 + Spring null 가능성 어노테이션에 대한 Kotlin 지원은 컴파일 시 null 관련 문제를 처리할 수 있는 이점과 함께 Kotlin 개발자에게 전체 Spring Framework API에 대한 null 안전성을 제공합니다.&lt;/p&gt;

&lt;div class=&quot;language-gradle highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;tasks&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;withType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;KotlinCompile&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;kotlinOptions&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;freeCompilerArgs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;-Xjsr305=strict&quot;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;jpa-지연-로딩-처리를-위한-설정&quot;&gt;JPA 지연 로딩 처리를 위한 설정&lt;/h3&gt;

&lt;p&gt;지연 가져오기가 예상대로 작동하도록 하려면 &lt;a href=&quot;https://youtrack.jetbrains.com/issue/KT-28525&quot;&gt;KT-28525&lt;/a&gt;에 설명된 대로 엔티티를 열어야 합니다. 이를 위해 Kotlin &lt;code class=&quot;highlighter-rouge&quot;&gt;allopen&lt;/code&gt; 플러그인을 사용하겠습니다.&lt;/p&gt;

&lt;div class=&quot;language-gradle highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;plugins&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;kotlin&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;plugin.allopen&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;version&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;1.8.0&quot;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;allOpen&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;annotation&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;jakarta.persistence.Entity&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;annotation&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;jakarta.persistence.Embeddable&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;annotation&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;jakarta.persistence.MappedSuperclass&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;controller&quot;&gt;controller&lt;/h2&gt;

&lt;p&gt;Hello World를 화면에 출력하는 단순한 REST API 입니다.&lt;/p&gt;

&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;@RestController&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;@RequestMapping&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/api/hello&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Controller&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;@GetMapping&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;findAll&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Hello World&quot;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;단순하게 Controller만 생성해보았습니다.&lt;/p&gt;

&lt;p&gt;이후 jpa 연계 부터 많은 작업을 해야 하는데, 새롭게 배우는 내용들을 작성해보려고 합니다.&lt;/p&gt;

&lt;h2 id=&quot;참고자료&quot;&gt;참고자료&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://spring.io/guides/tutorials/spring-boot-kotlin/&quot;&gt;Building web applications with Spring Boot and Kotlin&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name></name></author><category term="kotlin" /><category term="spring" /><summary type="html">그래 너로 정했다! 코프링~</summary></entry><entry><title type="html">생성형 AI(Generative AI)의 이해</title><link href="https://lahuman.github.io/generative_ai/" rel="alternate" type="text/html" title="생성형 AI(Generative AI)의 이해" /><published>2024-01-18T00:00:00+00:00</published><updated>2024-01-18T00:00:00+00:00</updated><id>https://lahuman.github.io/generative_ai</id><content type="html" xml:base="https://lahuman.github.io/generative_ai/">&lt;h1 id=&quot;생성형-aigenerative-ai란&quot;&gt;생성형 AI(Generative AI)란?&lt;/h1&gt;

&lt;p&gt;인공지능(AI) 분야에서 주목받는 최신 발전 중 하나는 &lt;code class=&quot;highlighter-rouge&quot;&gt;생성형 AI(Generative AI)&lt;/code&gt;의 등장입니다. 생성형 AI는 &lt;code class=&quot;highlighter-rouge&quot;&gt;기계가 인간의 창작물과 매우 유사한 텍스트, 이미지, 심지어 음악을 생성할 수 있는 기술&lt;/code&gt;을 지칭합니다. 이 기술의 복잡성과 다양성은 업계에서 큰 관심을 받고 있는데, 이를 통해 새로운 창작물을 만들어내는 가능성이 열린 것입니다.&lt;/p&gt;

&lt;p&gt;생성형 AI는 간단하면서도 강력한 원리에 기반하고 있습니다. 주어진 입력이나 컨텍스트에 따라 의미 있는 결과물을 창출할 수 있는 능력을 가지고 있습니다. 이러한 AI가 주목받는 이유 중 하나는 인간과 유사한 대화를 이어가면서 다양한 주제에 걸쳐 일관된 콘텐츠를 생성할 수 있다는 점입니다. 대표적인 예로는 &lt;code class=&quot;highlighter-rouge&quot;&gt;챗봇&lt;/code&gt; 중 &lt;code class=&quot;highlighter-rouge&quot;&gt;OpenAI의 GPT(Generative Pre-trained Transformer) 모델&lt;/code&gt;이 있습니다. 특히 GPT-3 및 그 후속 모델은 다양한 주제에 대한 이해와 일관된 텍스트 생성 능력을 입증하여 많은 주목을 받았습니다.&lt;/p&gt;

&lt;p&gt;생성형 AI로 개발된 응용 프로그램은 알파고와는 달리 &lt;code class=&quot;highlighter-rouge&quot;&gt;광범위한 분야에서 유용성&lt;/code&gt;을 보여주고 있습니다.&lt;/p&gt;

&lt;h2 id=&quot;fmfoundation-model&quot;&gt;FM(Foundation Model)&lt;/h2&gt;

&lt;p&gt;FM(Foundation Model)은 다양한 생성형 AI 애플리케이션의 기초를 제공합니다. 이는 광범위한 데이터 세트에 대한 사전 훈련된 모델로, 개발자와 연구원이 신속하게 구축할 수 있는 출발점을 제공합니다. FM은 특정 작업에 맞게 미세 조정하거나 다양한 애플리케이션에서 그대로 활용할 수 있는 기초 역할을 합니다.&lt;/p&gt;

&lt;h2 id=&quot;amazon-bedrock-생성형-ai로-가는-관문&quot;&gt;&lt;a href=&quot;https://aws.amazon.com/ko/bedrock/&quot;&gt;Amazon Bedrock&lt;/a&gt;: 생성형 AI로 가는 관문&lt;/h2&gt;

&lt;p&gt;Amazon Bedrock은 AI21 Labs, Anthropic, Cohere, Meta, Stability AI 및 Amazon과 같은 선도적인 AI 회사들의 고성능 파운데이션 모델(FM)을 하나의 API로 제공하는 &lt;code class=&quot;highlighter-rouge&quot;&gt;완전히 관리되는 서비스&lt;/code&gt;(SaaS 형태)입니다. 생성형 AI 애플리케이션을 구축하는 데 필요한 다양한 기능 세트를 활용하여 &lt;code class=&quot;highlighter-rouge&quot;&gt;개인 정보 보호 및 보안을 유지&lt;/code&gt;하면서 개발을 간소화할 수 있습니다.&lt;/p&gt;

&lt;h3 id=&quot;amazon-bedrock-security-and-privacy&quot;&gt;&lt;a href=&quot;https://aws.amazon.com/ko/bedrock/security-compliance/&quot;&gt;Amazon Bedrock Security and Privacy&lt;/a&gt;&lt;/h3&gt;

&lt;h4 id=&quot;애플리케이션의-보안-유지&quot;&gt;애플리케이션의 보안 유지&lt;/h4&gt;

&lt;p&gt;Amazon bedrock을 사용하면 생성형 AI 애플리케이션의 기본 모델을 사용자 정의하는 데 사용하여 데이터를 완벽하게 제어할 수 있습니다. 데이터는 전송 중 및 미사용 시 &lt;code class=&quot;highlighter-rouge&quot;&gt;암호화&lt;/code&gt;됩니다. 또한, &lt;code class=&quot;highlighter-rouge&quot;&gt;AWS 키 관리 서비스(AWS KMS)를 사용하여 암호화 키를 생성, 관리 및 제어&lt;/code&gt;할 수 있습니다. ID 기반 정책은 데이터를 더욱 효과적으로 제어하여 사용자와 역할이 어떤 리소스에서, 어떤 조건에서, 어떤 작업을 수행할 수 있는지 관리할 수 있도록 도와줍니다&lt;/p&gt;

&lt;h4 id=&quot;포괄적인-데이터-보호-및-개인정보-보호로-구축&quot;&gt;포괄적인 데이터 보호 및 개인정보 보호로 구축&lt;/h4&gt;

&lt;p&gt;아마존 bedrock은 데이터를 사용자가 제어할 수 있도록 도와줍니다. 기본 모델을 조정할 때는 해당 모델의 &lt;code class=&quot;highlighter-rouge&quot;&gt;비공개 사본을 기반&lt;/code&gt;으로 합니다. 즉, &lt;code class=&quot;highlighter-rouge&quot;&gt;사용자의 데이터는 모델 제공업체와 공유되지 않으며 기본 모델을 개선하는 데 사용되지 않습니다.&lt;/code&gt; AWS PrivateLink를 사용하면 VPC를 인터넷 트래픽에 노출하지 않고도 Amazon 가상 프라이빗 클라우드(VPC)에서 Amazon bedrock으로 프라이빗 연결을 설정할 수 있습니다. 마지막으로, bedrock은 ISO, SOC, CSA STAR 레벨 2를 포함한 일반적인 규정 준수 표준의 적용 범위를 벗어나지 않으며, HIPAA를 준수하고, 고객이 GDPR을 준수하면서 bedrock을 사용할 수 있습니다.&lt;/p&gt;

&lt;h2 id=&quot;검색-증강-세대rag&quot;&gt;&lt;a href=&quot;https://docs.aws.amazon.com/ko_kr/sagemaker/latest/dg/jumpstart-foundation-models-customize-rag.html&quot;&gt;검색 증강 세대(RAG)&lt;/a&gt;&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;파운데이션 모델은 오프라인에서 학습되어 새로운 데이터에 적응하지 못하고, 도메인별 작업에는 부적합합니다.&lt;/li&gt;
  &lt;li&gt;검색 증강 세대(RAG)는 파운데이션 모델에 추가적인 데이터를 제공하여 프롬프트를 개선할 수 있습니다.&lt;/li&gt;
  &lt;li&gt;RAG는 문서와 쿼리를 임베딩하여 관련성 검색을 수행하고, 지식 라이브러리에서 유사한 문서의 컨텍스트를 프롬프트에 삽입합니다.&lt;/li&gt;
  &lt;li&gt;RAG 모델 아키텍처와 지식 집약적 NLP 작업에 대한 자세한 내용은 &lt;a href=&quot;https://arxiv.org/abs/2005.11401&quot;&gt;이 문서&lt;/a&gt;를 참고하세요.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://docs.aws.amazon.com/ko_kr/sagemaker/latest/dg/images/jumpstart/jumpstart-fm-rag.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;참고자료&quot;&gt;참고자료&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://aws.amazon.com/ko/bedrock/&quot;&gt;Amazon Bedrock&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://amarpreet-s.medium.com/generative-ai-with-aws-bedrock-4e1a2770db0c&quot;&gt;Generative AI with AWS Bedrock&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://aws.amazon.com/ko/blogs/korea/knowledge-bases-now-delivers-fully-managed-rag-experience-in-amazon-bedrock/&quot;&gt;Amazon Bedrock Knowledge Bases 정식 출시 – 완전관리형 RAG 경험 제공&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://aws.amazon.com/ko/blogs/korea/preview-connect-foundation-models-to-your-company-data-sources-with-agents-for-amazon-bedrock/&quot;&gt;Amazon Bedrock 지식 기반 미리보기 – 파운데이션 모델을 위한 에이전트 기반 기업 데이터 소스 연결 기능&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://aws.amazon.com/ko/blogs/tech/bedrock-claude-kendra-rag/&quot;&gt;Amazon Bedrock의 Claude와 Amazon Kendra로 향상된 RAG 사용하기&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.aws.amazon.com/ko_kr/sagemaker/latest/dg/jumpstart-foundation-models-customize-rag.html&quot;&gt;검색 증강 세대(RAG)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name></name></author><category term="generative" /><category term="ai" /><summary type="html">대표적인 예로 AWS BEDROCK 까지 알아보자</summary></entry><entry><title type="html">docker 에서 실행중인 컨테이너를 이미지로 전환 처리</title><link href="https://lahuman.github.io/docker-commit/" rel="alternate" type="text/html" title="docker 에서 실행중인 컨테이너를 이미지로 전환 처리" /><published>2023-12-30T00:00:00+00:00</published><updated>2023-12-30T00:00:00+00:00</updated><id>https://lahuman.github.io/docker-commit</id><content type="html" xml:base="https://lahuman.github.io/docker-commit/">&lt;h1 id=&quot;컨테이너의-변경-사항으로-새-이미지-만들기&quot;&gt;컨테이너의 변경 사항으로 새 이미지 만들기&lt;/h1&gt;

&lt;blockquote&gt;
  &lt;p&gt;사건의 발달은 6000번 포트로 서비스를 오픈했을때, chrome에서 접근하지 못하는 문제가 발생했습니다. 
원인으로 &lt;a href=&quot;https://gajy.tistory.com/65?fbclid=IwAR1cvnSRDTgkYb8QXX3INHOEQ6az519k2QCN6d6LLp-8kiT-Q64DDLJgKXY&quot;&gt;6000번 포트의 비밀 (ERR_UNSAFE_PORT)&lt;/a&gt;를 보면 보안상의 이유로 막았다고 합니다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;문제는 이미 설정한 컨테이너를 지우고 다시 작업하기 귀찮은 상황이었습니다. 
그래서 찾은게 &lt;a href=&quot;https://docs.docker.com/engine/reference/commandline/commit/&quot;&gt;docker commit&lt;/a&gt;라는 명령입니다.&lt;/p&gt;

&lt;p&gt;해당 명령어를 이용해서 실행중인 컨테이너를 새 이미지로 만들 수 있습니다. 
저는 아래와 같이 사용 하였습니다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# 6000번 포트를 연동하고 있는 컨테이너
$ docker ps
CONTAINER ID   IMAGE                        COMMAND               CREATED        STATUS       PORTS                                                                                                                           NAMES
4d4f0a0acbae   ssh_alpine                    &quot;/usr/sbin/sshd -D&quot;   8 hours ago    Up 8 hours   0.0.0.0:6000-6001-&amp;gt;6000-6001/tcp, :::6000-6001-&amp;gt;6000-6001/tcp   dqserver

# 컨테이너를 이미지로 생성
$ docker commit dqserver dqserver_image

# 기존 이미지 중지 및 삭제
$ docker stop dqserver
$ docker rm dqserver

# 포트를 변경해서 신규 이미지 생성
$ docker run -it -d -p 6002:6002 -p 6001:6001  --name dqserver dqserver_image
$ docker ps
CONTAINER ID   IMAGE                        COMMAND               CREATED        STATUS       PORTS                                                                                                                           NAMES
4d4f0a0acbae   dqserver_image                    &quot;/usr/sbin/sshd -D&quot;   8 hours ago    Up 8 hours   0.0.0.0:6001-6002-&amp;gt;6001-6002/tcp, :::6001-6002-&amp;gt;6001-6002/tcp   dqserver
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;참고로 이미지가 커밋되는 동안 커밋되는 컨테이너와 해당 프로세스는 일시 중지됩니다. 이렇게 하면 커밋을 생성하는 과정에서 데이터 손상이 발생할 가능성이 줄어듭기 때문입니다. 동작을 원하지 않는 경우 –pause 옵션을 false로 설정하세요.&lt;/p&gt;

&lt;p&gt;추가적인 설명은 &lt;a href=&quot;https://docs.docker.com/engine/reference/commandline/commit/&quot;&gt;docker commit&lt;/a&gt;를 확인하세요!&lt;/p&gt;

&lt;h2 id=&quot;참고자료&quot;&gt;참고자료&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.docker.com/engine/reference/commandline/commit/&quot;&gt;docker commit&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://gajy.tistory.com/65?fbclid=IwAR1cvnSRDTgkYb8QXX3INHOEQ6az519k2QCN6d6LLp-8kiT-Q64DDLJgKXY&quot;&gt;6000번 포트의 비밀 (ERR_UNSAFE_PORT)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name></name></author><category term="docker" /><category term="container" /><summary type="html">외부 연결 포트를 변경하는지 등의 처리를 할때 용의</summary></entry><entry><title type="html">목적이 없는 일은 마치 방향타 없는 배와 같다</title><link href="https://lahuman.github.io/20231203/" rel="alternate" type="text/html" title="목적이 없는 일은 마치 방향타 없는 배와 같다" /><published>2023-12-03T00:00:00+00:00</published><updated>2023-12-03T00:00:00+00:00</updated><id>https://lahuman.github.io/20231203</id><content type="html" xml:base="https://lahuman.github.io/20231203/">&lt;h1 id=&quot;프로젝트나-팀을-이끄는-데-있어-목적이-명확해야-합니다&quot;&gt;프로젝트나 팀을 이끄는 데 있어 목적이 명확해야 합니다.&lt;/h1&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;목적이 없는 일은 마치 방향타 없는 배&lt;/code&gt;와 같습니다. 
목표를 설정하고 그에 맞는 방향으로 나아가는 것이 중요합니다. 
“목적은 A인데 A로 가는 길이 아닌 B로 가는 길을 가져오라”는 말은 목표에 집중하되, 유연하게 상황에 대처하고 새로운 아이디어를 통해 목표를 달성할 수 있다는 의미입니다.&lt;/p&gt;

&lt;p&gt;프로젝트나 팀을 이끄는 것은 개발만큼이나 어려운 일입니다. 
팀을 이끄는 데 있어서 팀원과 동료들과의 원활한 커뮤니케이션과 협력이 매우 중요합니다. 목표를 공유하고 이해시키며, 팀원들이 각자의 강점을 발휘하도록 도움을 주는 것이 필요합니다.&lt;/p&gt;

&lt;p&gt;어릴 때는 팀장의 역할이 미비하다고 생각되었지만, 지금은 팀장이 다양한 일을 처리해야 한다는 것을 깨닫게 되었습니다. 팀장은 팀원들을 이끄는 리더로서의 역할뿐만 아니라, 프로젝트의 방향을 설정하고 조절하며 문제 발생 시 해결책을 찾는 등 다양한 역할을 수행해야 합니다.&lt;/p&gt;

&lt;p&gt;마지막으로, 팀장은 팀원들을 동기부여하고 긍정적인 분위기를 조성하는 역할도 중요합니다. 팀원들이 목표를 공유하고 그에 대한 열정을 가질 수 있도록 지원하면, 프로젝트나 팀의 성공에 더 큰 기여를 할 수 있을 것입니다.&lt;/p&gt;</content><author><name></name></author><category term="propose" /><category term="단상" /><summary type="html">목표는 A인데, A로 가기 위해서 B가 필요하다고?</summary></entry></feed>
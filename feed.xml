<?xml version="1.0" encoding="utf-8"?><?xml-stylesheet type="text/xml" href="https://lahuman.github.io/feed.xslt.xml"?><feed xmlns="http://www.w3.org/2005/Atom"><generator uri="http://jekyllrb.com" version="3.8.4">Jekyll</generator><link href="https://lahuman.github.io/feed.xml" rel="self" type="application/atom+xml" /><link href="https://lahuman.github.io/" rel="alternate" type="text/html" /><updated>2021-07-01T18:35:27+09:00</updated><id>https://lahuman.github.io/</id><title type="html">lahuman</title><subtitle>열심히 사는 아저씨</subtitle><entry><title type="html">서비스 종료일</title><link href="https://lahuman.github.io/20210701/" rel="alternate" type="text/html" title="서비스 종료일" /><published>2021-07-01T00:00:00+09:00</published><updated>2021-07-01T00:00:00+09:00</updated><id>https://lahuman.github.io/20210701</id><content type="html" xml:base="https://lahuman.github.io/20210701/">&lt;h1 id=&quot;2019년에-입사를-해서-지금까지-30여개의-서비스를-만들었습니다&quot;&gt;2019년에 입사를 해서 지금까지 30여개의 서비스를 만들었습니다.&lt;/h1&gt;

&lt;p&gt;회사내의 문제를 발견하고 작게 만들어서 빠르게 실패하고, 다시 만드는 디자인 싱킹 기반의 개발을 하였습니다.&lt;/p&gt;

&lt;p&gt;2주안에 결과를 내야 하는 스크럼을 진행도 하면서 가끔은 너무 힘들었습니다.&lt;/p&gt;

&lt;p&gt;그리고 오늘 그 동안 만들었던 서비스 중 사용자가 적은 서비스를 종료 하는 날이 왔습니다.&lt;/p&gt;

&lt;p&gt;자식을 잃는 기분이네요.&lt;/p&gt;

&lt;p&gt;더 발전 시킬 수 있는데, 더 잘 만들 수 있는데, 충분히 매력적인 서비스인데…&lt;/p&gt;

&lt;p&gt;아쉽고, 슬픈 하루입니다.&lt;/p&gt;

&lt;h2 id=&quot;잘가-그리고-너희를-만들면서-즐거웠어&quot;&gt;잘가 그리고 너희를 만들면서 즐거웠어.&lt;/h2&gt;</content><category term="단상" /><summary type="html">3년간 만들었던 서비스 중 몇개가 종료되는 날입니다.</summary></entry><entry><title type="html">nestjs에서 passport + SAML 로그인시 오류 발생 처리</title><link href="https://lahuman.github.io/passport_saml_error/" rel="alternate" type="text/html" title="nestjs에서 passport + SAML 로그인시 오류 발생 처리" /><published>2021-06-28T00:00:00+09:00</published><updated>2021-06-28T00:00:00+09:00</updated><id>https://lahuman.github.io/passport_saml_error</id><content type="html" xml:base="https://lahuman.github.io/passport_saml_error/">&lt;h1 id=&quot;saml-assertion-expired&quot;&gt;SAML assertion expired&lt;/h1&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;[Nest] 32582   - 2021-06-25 15:24:29   [ExceptionsHandler] SAML assertion expired +40568ms
Error: SAML assertion expired
    at SAML.checkTimestampsValidityError (/Users/lahuman/dev/oss-square/backend/node_modules/passport-saml/lib/passport-saml/saml.js:1047:24)
    at /Users/lahuman/dev/oss-square/backend/node_modules/passport-saml/lib/passport-saml/saml.js:988:37
    at processTicksAndRejections (internal/process/task_queues.js:97:5)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;모든 사람이 발생하는게 아니라, 특정 한사람만 발생하는 오류였습니다.&lt;/p&gt;

&lt;p&gt;원인은 서버 시간과 사용자 PC 시간이 다르게 설정되어서 발생하는 문제 였습니다.&lt;/p&gt;

&lt;p&gt;우연히 발생하는 문제이겠지만, 기억해 두어야겠네요.&lt;/p&gt;

&lt;h2 id=&quot;시간을-꼭-확인하자&quot;&gt;시간을 꼭 확인하자!&lt;/h2&gt;</content><category term="nestjs" /><category term="testcase" /><category term="mock" /><category term="jest" /><summary type="html">SAML assertion expired</summary></entry><entry><title type="html">nestjs에서 jest를 이용한 End2End 테스트 케이스를 작성</title><link href="https://lahuman.github.io/nestjs_testcase_mock/" rel="alternate" type="text/html" title="nestjs에서 jest를 이용한 End2End 테스트 케이스를 작성" /><published>2021-06-23T00:00:00+09:00</published><updated>2021-06-23T00:00:00+09:00</updated><id>https://lahuman.github.io/nestjs_testcase_mock</id><content type="html" xml:base="https://lahuman.github.io/nestjs_testcase_mock/">&lt;h1 id=&quot;테스트-케이스-작성하기&quot;&gt;테스트 케이스 작성하기&lt;/h1&gt;

&lt;p&gt;오늘은 nestjs에서 jest를 이용한 End2End 테스트 케이스를 작성하였습니다.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;src/user/user.controller.spec.ts&lt;/code&gt; 파일에 사용자 추가/수정/삭제/조회에 대한 테스트 케이스를 작성하였습니다.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;End2End 데이터 기준의 validate 테스트&lt;/li&gt;
  &lt;li&gt;로그인 Mock 객체 주입 테스트&lt;/li&gt;
  &lt;li&gt;repository Mock 객체 테스트&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;전체 테스트 케이스 실행은 다음의 명령어로 할 수 있습니다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;node run test
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;특정 테스트 케이스 실행은 다음 명령어로 할 수 있습니다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;node node_modules/jest/bin/jest.js src/user/user.controller.spec.ts 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;테스트 케이스를 이용하면 코드의 오류를 빠르게 찾아낼 수 있습니다.
그 외에도 플로우차트 기반으로 테스트 케이스를 작성하여 명세에 알맞은 프로그램을 작성할 수도 있고요!&lt;/p&gt;

&lt;h2 id=&quot;전체-코드-바로-가기--httpsgithubcomlahumannestjs_101&quot;&gt;전체 코드 바로 가기 : https://github.com/lahuman/nestjs_101&lt;/h2&gt;</content><category term="nestjs" /><category term="testcase" /><category term="mock" /><category term="jest" /><summary type="html">테스트 케이스 작성하기</summary></entry><entry><title type="html">자바에 대하여 공부하기</title><link href="https://lahuman.github.io/java_srping_basic/" rel="alternate" type="text/html" title="자바에 대하여 공부하기" /><published>2021-06-23T00:00:00+09:00</published><updated>2021-06-23T00:00:00+09:00</updated><id>https://lahuman.github.io/java_srping_basic</id><content type="html" xml:base="https://lahuman.github.io/java_srping_basic/">&lt;h1 id=&quot;자바라-쓰고-springframework를-공부한다&quot;&gt;자바라 쓰고 Springframework를 공부한다.&lt;/h1&gt;

&lt;p&gt;Spring의 주요 3가지 컨셉은 아래와 같습니다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;1) IOC : 제어의 역전 / 의존성 주입
2) AOP : 관심의 분리
3) PSA : 일관성 있는 추상화
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;그럼 실제로 어떻게 사용될까?&lt;/p&gt;

&lt;h2 id=&quot;ioc--제어의-역전--의존성-주입-사용-예제&quot;&gt;IOC : 제어의 역전 / 의존성 주입 사용 예제&lt;/h2&gt;

&lt;p&gt;Bean은 IoC 컨테이너 안에 등록된 객체들을 의미 합니다. 
모든 클래스의 객체가 Bean으로 등록되지 않습니다. @Repository, @Component, @Service, @Bean 등의 어노테이션을 통해서 Bean으로 등록 가능합니다.&lt;/p&gt;

&lt;p&gt;사용 예로는 &lt;code class=&quot;highlighter-rouge&quot;&gt;@Autowired&lt;/code&gt; 어노테이션을 이용해서 Bean을 주입할 수 있습니다.
Bean 주입이 주는 이점은, 객체의 관리를 스프링 컨테이너가 하기에 개발자가 언제 빈을 생성하고 소멸시킬지 신경쓰지 않아도 됩니다.&lt;/p&gt;

&lt;h2 id=&quot;aop--관심의-분리-예제&quot;&gt;AOP : 관심의 분리 예제&lt;/h2&gt;

&lt;p&gt;가장 큰 예로 &lt;code class=&quot;highlighter-rouge&quot;&gt;@Transctional&lt;/code&gt;을 이야기 할 수 있습니다.
connection에 대하여 rollback, commit등을 신경쓰지 않고 처리 하게 됩니다.
결국 트렌젝션 처리는 위임하고 구현 기능에 집중하는 코드를 작성하면 됩니다.&lt;/p&gt;

&lt;h2 id=&quot;psa--일관성-있는-추상화&quot;&gt;PSA : 일관성 있는 추상화&lt;/h2&gt;

&lt;p&gt;Service Abstraction으로 제공되는 기술을 다른 기술 스택으로 간편하게 바꿀 수 있는 확장성을 갖고 있는 것이 Portable Service Abstraction. 줄여서 PSA라고 합니다.
예로는 서블릿을 직접 사용하는 것이 아니라, Controller의 @GetMapping이나 @PostMapping을 통해 특정 url로 요청이 들어왔을 때, 해당 블록이 요청을 처리하도록 구현 되어 있습니다.
이렇게 추상화 계층을 사용해 어떤 기술을 내부에 숨기고 개발자에게 편의성을 제공하는 것을 Service Abstraction이라고 합니다.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;스프링은 MVC&lt;/code&gt;라는 추상화 기법을 사용. Spring Web MVC를 사용하면 서블릿을 직접 구현할 필요가 없습니다.&lt;/p&gt;

&lt;h2 id=&quot;참고-자료&quot;&gt;참고 자료&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://zion830.tistory.com/109&quot;&gt;[예제로 배우는 스프링 입문] Spring IoC, AOP, PSA&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://lazymankook.tistory.com/27&quot;&gt;Annotation과 Bean&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="자바" /><category term="공부" /><summary type="html">오랜만에 자바 공부 진행</summary></entry><entry><title type="html">기분 좋은 날이 지나갑니다.</title><link href="https://lahuman.github.io/20210618/" rel="alternate" type="text/html" title="기분 좋은 날이 지나갑니다." /><published>2021-06-18T00:00:00+09:00</published><updated>2021-06-18T00:00:00+09:00</updated><id>https://lahuman.github.io/20210618</id><content type="html" xml:base="https://lahuman.github.io/20210618/">&lt;h1 id=&quot;함께-근무했었던-동료분들과-만났습니다&quot;&gt;함께 근무했었던 동료분들과 만났습니다.&lt;/h1&gt;

&lt;p&gt;오랜만에 뵈어서 기분이 좋네요.&lt;/p&gt;

&lt;p&gt;즐거운 시간이었습니다.&lt;/p&gt;

&lt;p&gt;또 나를 잊지 않고 만나러 와주셔서 행복하네요!&lt;/p&gt;

&lt;h2 id=&quot;기부니가-매우-좋아&quot;&gt;기부니가 매우 좋아!&lt;/h2&gt;</content><category term="단상" /><summary type="html">거의 3년만에 만나본 분들과 즐겁게 대화하고 헤어짐</summary></entry><entry><title type="html">nestjs + passport(local strategy) + typeorm(sqlite)</title><link href="https://lahuman.github.io/nestjs_passport_typeorm/" rel="alternate" type="text/html" title="nestjs + passport(local strategy) + typeorm(sqlite)" /><published>2021-06-17T00:00:00+09:00</published><updated>2021-06-17T00:00:00+09:00</updated><id>https://lahuman.github.io/nestjs_passport_typeorm</id><content type="html" xml:base="https://lahuman.github.io/nestjs_passport_typeorm/">&lt;h1 id=&quot;로그인--db-연결-예제-추가20210617&quot;&gt;로그인 &amp;amp; DB 연결 예제 추가(2021.06.17)&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;typeorm + sqlite 조합의 사용자 CRUD 구현&lt;/li&gt;
  &lt;li&gt;passport + local strategy를 이용한 로그인/로그아웃 처리&lt;/li&gt;
  &lt;li&gt;test-auth-chapter-sample를 참조하여 구현 하였습니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;코드-바로기가&quot;&gt;&lt;a href=&quot;https://github.com/lahuman/nestjs_101&quot;&gt;코드 바로기가&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;TODO : testcase 작성&lt;/p&gt;</content><category term="nestjs" /><category term="passport" /><category term="typeorm" /><summary type="html">nestjs에서 로그인과 DB 연결 예제 작성</summary></entry><entry><title type="html">희망에 대한 짧은 단상</title><link href="https://lahuman.github.io/20210616/" rel="alternate" type="text/html" title="희망에 대한 짧은 단상" /><published>2021-06-16T00:00:00+09:00</published><updated>2021-06-16T00:00:00+09:00</updated><id>https://lahuman.github.io/20210616</id><content type="html" xml:base="https://lahuman.github.io/20210616/">&lt;h1 id=&quot;큰-희망의-잦은-실패는-실망과-절망으로-변한다-하지만-절망은-만사가-피곤해질-뿐이다&quot;&gt;큰 희망의 잦은 실패는 실망과 절망으로 변한다. 하지만 절망은 만사가 피곤해질 뿐이다.&lt;/h1&gt;

&lt;blockquote&gt;
  &lt;p&gt;“삶이 있는 한 희망은 있다.” - 키케로&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;“희망은 사람을 성공으로 이끄는 신앙이다. 희망이 없으면, 아무것도 성취할 수가 없으며 희망 없이는 인간생활이 영위될 수 없다.” - 헬렌 켈러&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;“희망은 잠자고 있지 않는 인간의 꿈이다. 인간의 꿈이 있는 한 이 세상은 도전해볼 만하다. 어떠한 일이 있더라도 꿈을 잃지 말자. 꿈을 꾸자. 꿈은 희망을 버리지 않는 사람에게 선물로 주어진다.” - 아리스토텔레스&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;“내 비장의 무기는 아직 손안에 있다. 그것은 희망이다.” - 나폴레옹 보나파르트&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;“희망은 어둠 속에서 시작된다. 일어나 옳은 일을 하려 할 때, 고집스런 희망이 시작된다. 새벽은 올 것이다. 기다리고 보고 일하라. 포기하지 말라.” - 앤 라모트&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;“큰 희망이 큰 사람을 만든다.” - 토마스 풀러&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;희망은 정말 필요하다고 생각한다. 다만, 이루어질 수 없는 희망을 품는 것은 절망만 반복하게 된다.&lt;/p&gt;

&lt;p&gt;작은 희망으로 가슴을 채우고 점점 희망을 키워나가면서 실현해가자!&lt;/p&gt;

&lt;h2 id=&quot;희망이-절망이-되지-않도록&quot;&gt;희망이 절망이 되지 않도록!&lt;/h2&gt;</content><category term="단상" /><summary type="html">희망이 절망으로 바뀌지 않도록 노력해야 한다.</summary></entry><entry><title type="html">nestjs 테스트 케이스 예제</title><link href="https://lahuman.github.io/nestjs_jest_testcase/" rel="alternate" type="text/html" title="nestjs 테스트 케이스 예제" /><published>2021-06-14T00:00:00+09:00</published><updated>2021-06-14T00:00:00+09:00</updated><id>https://lahuman.github.io/nestjs_jest_testcase</id><content type="html" xml:base="https://lahuman.github.io/nestjs_jest_testcase/">&lt;h1 id=&quot;nestjs에서는-기본적으로-jest-기반의-테스트-케이스를-제공합니다&quot;&gt;NestJS에서는 기본적으로 jest 기반의 테스트 케이스를 제공합니다.&lt;/h1&gt;

&lt;p&gt;오늘 설명은 Controller 기반의 테스트에서 다음 내용입니다.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Repository 객체를 Mock으로 주입&lt;/li&gt;
  &lt;li&gt;Connection 객체를 Mock으로 주입&lt;/li&gt;
  &lt;li&gt;mockAuthGuard 객체를 Mock으로 주입하여 로그인 처리&lt;/li&gt;
  &lt;li&gt;첨부파일 업로드&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;mock-객체-생성&quot;&gt;Mock 객체 생성&lt;/h2&gt;

&lt;p&gt;자동으로 만들어진 테스트 케이스는 아래와 같습니다&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;import { Test, TestingModule } from '@nestjs/testing';
import { Controller } from './my.controller';

describe('Controller', () =&amp;gt; {
  let controller: Controller;

  beforeEach(async () =&amp;gt; {
    const module: TestingModule = await Test.createTestingModule({
      controllers: [Controller],
    }).compile();

    controller = module.get&amp;lt;Controller&amp;gt;(Controller);
  });

  it('should be defined', () =&amp;gt; {
    expect(controller).toBeDefined();
  });
});
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Controller의 소스는 기본적으로 service를 호출하고, service에서는 Entity를 이용하여 Repository를 Inject 합니다.&lt;/p&gt;

&lt;p&gt;Inject에 필요한 Mock객체들을 생성을 합니다.
내부 구현이 필요 없을 경우 &lt;code class=&quot;highlighter-rouge&quot;&gt;jest.fn()&lt;/code&gt;를 활용하면 쉽게 처리 할 수 있습니다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;class MockRepository {

  async save(any) {
    return new OssAtachFileDEntity({
      &quot;refSeq&quot;: 1,
      &quot;refCd&quot;: &quot;RE&quot;,
      &quot;regrId&quot;: &quot;12345&quot;,
      &quot;modrId&quot;: &quot;12345&quot;,
      &quot;fileName&quot;: &quot;첨부파일 테스트.pdf&quot;,
      &quot;filePath&quot;: &quot;202106/e55daf47-af60-4e8d-9e54-67cbfc680556&quot;,
      &quot;size&quot;: 73666,
      &quot;fileExtension&quot;: &quot;pdf&quot;,
      &quot;seq&quot;: 2
    });
  }
  async find() {
    return [new OssAtachFileDEntity({
      &quot;refSeq&quot;: 1,
      &quot;refCd&quot;: &quot;RE&quot;,
      &quot;regrId&quot;: &quot;12345&quot;,
      &quot;modrId&quot;: &quot;12345&quot;,
      &quot;fileName&quot;: &quot;첨부파일 테스트.pdf&quot;,
      &quot;filePath&quot;: &quot;202106/e55daf47-af60-4e8d-9e54-67cbfc680556&quot;,
      &quot;size&quot;: 73666,
      &quot;fileExtension&quot;: &quot;pdf&quot;,
      &quot;seq&quot;: 2
    })];
  }
  async findOne(any) {
    return new OssAtachFileDEntity({
      &quot;refSeq&quot;: 1,
      &quot;refCd&quot;: &quot;RE&quot;,
      &quot;regrId&quot;: &quot;12345&quot;,
      &quot;modrId&quot;: &quot;12345&quot;,
      &quot;fileName&quot;: &quot;첨부파일 테스트.pdf&quot;,
      &quot;filePath&quot;: &quot;202106/e55daf47-af60-4e8d-9e54-67cbfc680556&quot;,
      &quot;size&quot;: 73666,
      &quot;fileExtension&quot;: &quot;pdf&quot;,
      &quot;seq&quot;: 2
    });
  }

  async remove() {

  }
}

const mockConnection = () =&amp;gt; ({
  transaction: jest.fn(),
  createQueryRunner: () =&amp;gt; ({
    connect: jest.fn(),
    startTransaction: jest.fn(),
    commitTransaction: jest.fn(),
    rollbackTransaction: jest.fn(),
    release: jest.fn(),
    manager: {
      save: (r =&amp;gt; r)
    }
  })
});

const mockAuthGuard: CanActivate = {
  canActivate: (context: ExecutionContext) =&amp;gt; {
    const request = context.switchToHttp().getRequest();
    request.user = {
      id: '12345',
      name: &quot;임광규&quot;,
      email: 'lahuman@daum.net'
    };
    return request.user;
  }
};
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;mock-객체-주입&quot;&gt;Mock 객체 주입&lt;/h2&gt;

&lt;p&gt;구현한 Mock 객체들을 module에 Inject 처리를 합니다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; let app: INestApplication;
  let httpService: HttpService;
  let controller: Controller;

  beforeEach(async () =&amp;gt; {

    const module: TestingModule = await Test.createTestingModule({
      imports: [HttpModule, ConfigModule.forRoot({ isGlobal: true })],
      controllers: [Controller],
      providers: [Service,
        {
          provide: getRepositoryToken(OssReqMEntity),
          useClass: MockRepository,
        },
        {
          provide: Connection,
          useFactory: mockConnection
        }
      ],
    })
      .overrideGuard(AuthenticatedGuard).useValue(mockAuthGuard)
      .compile();
    app = module.createNestApplication();
    httpService = module.get&amp;lt;HttpService&amp;gt;(HttpService);
    await app.init();

    controller = module.get&amp;lt;Controller&amp;gt;(Controller);
  });

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;첨부파일-테스트&quot;&gt;첨부파일 테스트&lt;/h2&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; it('첨부파일 추가', async () =&amp;gt; {
    const response = await request(app.getHttpServer())
      .post(&quot;/attach-file/upload&quot;)
      .attach('file', '/path/file-name')
      .expect(201);
    expect(JSON.parse(response.text).status).toEqual(true);
  });
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;로그인-처리-테스트&quot;&gt;로그인 처리 테스트&lt;/h2&gt;

&lt;p&gt;로그인의 경우 PASSPORT-SAML 방식을 이용하였으며 Request에 user라는 객체를 이용합니다.&lt;/p&gt;

&lt;p&gt;등록된 결과에 userId가 12345인지 확인하는 테스트를 진행합니다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; it('조회', async () =&amp;gt; {
    const response = await request(app.getHttpServer())
      .get('/1')
      .expect(200);
    expect(JSON.parse(response.text).regrId).toEqual(&quot;12345&quot;);
  });
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;이상으로 기본적인 Nestjs 테스트 케이스를 사용해보았습니다.&lt;/p&gt;

&lt;h2 id=&quot;은근-어려웠네요&quot;&gt;은근 어려웠네요.&lt;/h2&gt;</content><category term="jest" /><category term="supertest" /><category term="nestjs" /><summary type="html">mock 객제 주입위주로 샘플을 정리 하였습니다.</summary></entry><entry><title type="html">jest를 이용한 테스트 케이스를 작성해보고 있다.</title><link href="https://lahuman.github.io/20210613/" rel="alternate" type="text/html" title="jest를 이용한 테스트 케이스를 작성해보고 있다." /><published>2021-06-13T00:00:00+09:00</published><updated>2021-06-13T00:00:00+09:00</updated><id>https://lahuman.github.io/20210613</id><content type="html" xml:base="https://lahuman.github.io/20210613/">&lt;h1 id=&quot;백문이불여일타라는-개발자의-말이-있듯해보는-중이다&quot;&gt;백문이불여일타라는 개발자의 말이 있듯해보는 중이다.&lt;/h1&gt;

&lt;p&gt;일단 해보고 이상하다고 느껴지는 부분을 다시 고찰하여 보자!&lt;/p&gt;

&lt;p&gt;일단 고~&lt;/p&gt;

&lt;h2 id=&quot;못먹어도-고&quot;&gt;못먹어도 고!&lt;/h2&gt;</content><category term="단상" /><summary type="html">DB 연결을 직접 하지 않고, Mock 객체를 주입하여 테스트를 해보고 있다.</summary></entry><entry><title type="html">이해를 못하는건가? 이해가 안되는건가?</title><link href="https://lahuman.github.io/20210608/" rel="alternate" type="text/html" title="이해를 못하는건가? 이해가 안되는건가?" /><published>2021-06-08T00:00:00+09:00</published><updated>2021-06-08T00:00:00+09:00</updated><id>https://lahuman.github.io/20210608</id><content type="html" xml:base="https://lahuman.github.io/20210608/">&lt;h1 id=&quot;이해를-못하는건지-안-하는건지&quot;&gt;이해를 못하는건지, 안 하는건지…&lt;/h1&gt;

&lt;p&gt;어떤 문제에 대하여 이해를 못하는 건지, 안하는 건지…&lt;/p&gt;

&lt;p&gt;계속 같은 실수를 반복하는 건지?&lt;/p&gt;

&lt;p&gt;나는 여기서 무엇을 하고 있는건지?&lt;/p&gt;

&lt;p&gt;답답한 마음에 아무것도 하기 싫어진다.&lt;/p&gt;

&lt;h2 id=&quot;답답함아-물러가라&quot;&gt;답답함아 물러가라!&lt;/h2&gt;</content><category term="단상" /><summary type="html">답답한 마음에 일이 안된다.</summary></entry></feed>

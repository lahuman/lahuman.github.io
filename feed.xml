<?xml version="1.0" encoding="utf-8"?><?xml-stylesheet type="text/xml" href="https://lahuman.github.io/feed.xslt.xml"?><feed xmlns="http://www.w3.org/2005/Atom"><generator uri="http://jekyllrb.com" version="3.8.4">Jekyll</generator><link href="https://lahuman.github.io/feed.xml" rel="self" type="application/atom+xml" /><link href="https://lahuman.github.io/" rel="alternate" type="text/html" /><updated>2020-06-02T20:04:46+09:00</updated><id>https://lahuman.github.io/</id><title type="html">lahuman</title><subtitle>열심히 사는 아저씨</subtitle><entry><title type="html">Sequelize에서 날짜에 대한 타임존 처리 하기</title><link href="https://lahuman.github.io/sequelize_timezone/" rel="alternate" type="text/html" title="Sequelize에서 날짜에 대한 타임존 처리 하기" /><published>2020-06-01T00:00:00+09:00</published><updated>2020-06-01T00:00:00+09:00</updated><id>https://lahuman.github.io/sequelize_timezone</id><content type="html" xml:base="https://lahuman.github.io/sequelize_timezone/">&lt;h1 id=&quot;sequelize에서-날짜에-대한-타임존-처리-하기&quot;&gt;Sequelize에서 날짜에 대한 타임존 처리 하기&lt;/h1&gt;

&lt;p&gt;Sequelize에서 날짜형(date)을 저장시 -9:00 된 값으로 저장이 됩니다.&lt;/p&gt;

&lt;p&gt;EX) 6월 4일 00:00 =&amp;gt; 6월 3일 15:00&lt;/p&gt;

&lt;p&gt;서버의 타임존도 KST이고, DBMS의 타임존도 KST임에도 저장시 -9시간이 됩니다.&lt;/p&gt;

&lt;p&gt;이럴때는 connection에 timezone을 설정하면 처리가 됩니다.&lt;/p&gt;

&lt;p&gt;아래는 처리 하는 Sequelize Connection 예제입니다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;const Sequelize = require(&quot;sequelize&quot;);

// Option 1: Passing parameters separately
const sequelize = new Sequelize(
  process.env.MYSQL_DB,
  process.env.MYSQL_USER,
  process.env.MYSQL_PASS,
  {
    host: process.env.MYSQL_URL,
    dialect: &quot;mysql&quot;,
    dialectOptions: { charset: &quot;utf8mb4&quot;, dateStrings: true, typeCast: true }, // 날짜의 경우 문자열로 타입 변경 처리
    timezone: &quot;+09:00&quot;, // 타임존을 설정
    pool: {
      max: 5,
      min: 0,
      acquire: 30000,
      idle: 10000,
    },
    define: {
      // The `timestamps` field specify whether or not the `createdAt` and `updatedAt` fields will be created.
      // This was true by default, but now is false by default
      timestamps: false,
      supportBigNumbers: true,
    },
  }
);

module.exports = sequelize;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;주요 설정으로 &lt;strong&gt;타임존과 날짜를 외부에 보낼때 처리&lt;/strong&gt;만 추가 해주면 됩니다.&lt;/p&gt;

&lt;h2 id=&quot;참고자료&quot;&gt;참고자료&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://hakurei.tistory.com/214&quot;&gt;[SEQUELIZE] TIMEZONE 세팅&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="sequelize" /><category term="timezone" /><category term="mysql" /><summary type="html">Mysql에 날짜형을 저장시 타임존이 계속 UTC로 처리될때 해결 방법</summary></entry><entry><title type="html">nodejs에서 TYPESCRIPT 사용 tutorial</title><link href="https://lahuman.github.io/hello_typescript/" rel="alternate" type="text/html" title="nodejs에서 TYPESCRIPT 사용 tutorial" /><published>2020-05-29T00:00:00+09:00</published><updated>2020-05-29T00:00:00+09:00</updated><id>https://lahuman.github.io/hello_typescript</id><content type="html" xml:base="https://lahuman.github.io/hello_typescript/">&lt;h1 id=&quot;nodejs에서-typescript-사용해보기&quot;&gt;Nodejs에서 Typescript 사용해보기!&lt;/h1&gt;

&lt;p&gt;nodejs를 하면서 Typescript에 대하여 어려번 들었습니다.&lt;/p&gt;

&lt;p&gt;기본적으로 nosejs에 대한 개발을 REPL 기반으로 하고 있습니다.&lt;/p&gt;

&lt;p&gt;TDD를 하기 위해서는 타입에 대한 검증등 많은 것들을 처리 해야 하는데요. 이는 Typescript와 더 잘 맞습니다.&lt;/p&gt;

&lt;p&gt;한번 사용해보기 위해서 nodejs에서 Typescript를 사용하는 방법을 설명드리겠습니다.&lt;/p&gt;

&lt;h2 id=&quot;typescript-사용해-보기&quot;&gt;Typescript 사용해 보기&lt;/h2&gt;

&lt;p&gt;평소에는 &lt;a href=&quot;https://www.npmjs.com/&quot;&gt;npm&lt;/a&gt;을 사용하지만, 이번에는 &lt;a href=&quot;https://classic.yarnpkg.com/en/&quot;&gt;yarn&lt;/a&gt;을 사용해보려고 합니다.&lt;/p&gt;

&lt;h3 id=&quot;프로젝트-생성하기&quot;&gt;프로젝트 생성하기&lt;/h3&gt;

&lt;p&gt;먼저 프로젝트 디렉토리를 생성하고 yarn 명령어를 이용해서 초기화 합니다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ mkdir learn-typescript
$ cd learn-typescript
$ yarn init -y
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;typescript-사용을-위한-모듈-설치하기&quot;&gt;Typescript 사용을 위한 모듈 설치하기&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;typescript : Typescript 라이브러리&lt;/li&gt;
  &lt;li&gt;ts-node : node에서 Typescript를 사용하기 위한 라이브러리&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ yarn add typescript ts-node
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;typescript-설정-파일-생성하기&quot;&gt;Typescript 설정 파일 생성하기&lt;/h3&gt;

&lt;p&gt;타입스크립트에 대한 정보를 가지고 있는 설정파일을 생성합니다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ yarn run tsc --init
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;실행을 하면 디렉토리에 &lt;strong&gt;tsconfig.json&lt;/strong&gt; 파일이 생성됩니다.&lt;/p&gt;

&lt;p&gt;해당 파일의 내용은 아래와 같습니다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;{
  &quot;compilerOptions&quot;: {
    /* Visit https://aka.ms/tsconfig.json to read more about this file */

    /* Basic Options */
    // &quot;incremental&quot;: true,                   /* Enable incremental compilation */
    &quot;target&quot;: &quot;es2016&quot; /* Specify ECMAScript target version: 'ES3' (default), 'ES5', 'ES2015', 'ES2016', 'ES2017', 'ES2018', 'ES2019', 'ES2020', or 'ESNEXT'. */,
    &quot;module&quot;: &quot;commonjs&quot; /* Specify module code generation: 'none', 'commonjs', 'amd', 'system', 'umd', 'es2015', 'es2020', or 'ESNext'. */,
    // &quot;lib&quot;: [],                             /* Specify library files to be included in the compilation. */
    // &quot;allowJs&quot;: true,                       /* Allow javascript files to be compiled. */
    // &quot;checkJs&quot;: true,                       /* Report errors in .js files. */
    // &quot;jsx&quot;: &quot;preserve&quot;,                     /* Specify JSX code generation: 'preserve', 'react-native', or 'react'. */
    // &quot;declaration&quot;: true,                   /* Generates corresponding '.d.ts' file. */
    // &quot;declarationMap&quot;: true,                /* Generates a sourcemap for each corresponding '.d.ts' file. */
    // &quot;sourceMap&quot;: true,                     /* Generates corresponding '.map' file. */
    // &quot;outFile&quot;: &quot;./&quot;,                       /* Concatenate and emit output to single file. */
    &quot;outDir&quot;: &quot;./dist/&quot; /* Redirect output structure to the directory. */,
    // &quot;rootDir&quot;: &quot;./&quot;,                       /* Specify the root directory of input files. Use to control the output directory structure with --outDir. */
    // &quot;composite&quot;: true,                     /* Enable project compilation */
    // &quot;tsBuildInfoFile&quot;: &quot;./&quot;,               /* Specify file to store incremental compilation information */
    // &quot;removeComments&quot;: true,                /* Do not emit comments to output. */
    // &quot;noEmit&quot;: true,                        /* Do not emit outputs. */
    // &quot;importHelpers&quot;: true,                 /* Import emit helpers from 'tslib'. */
    // &quot;downlevelIteration&quot;: true,            /* Provide full support for iterables in 'for-of', spread, and destructuring when targeting 'ES5' or 'ES3'. */
    // &quot;isolatedModules&quot;: true,               /* Transpile each file as a separate module (similar to 'ts.transpileModule'). */

    /* Strict Type-Checking Options */
    &quot;strict&quot;: true /* Enable all strict type-checking options. */,
    // &quot;noImplicitAny&quot;: true,                 /* Raise error on expressions and declarations with an implied 'any' type. */
    // &quot;strictNullChecks&quot;: true,              /* Enable strict null checks. */
    // &quot;strictFunctionTypes&quot;: true,           /* Enable strict checking of function types. */
    // &quot;strictBindCallApply&quot;: true,           /* Enable strict 'bind', 'call', and 'apply' methods on functions. */
    // &quot;strictPropertyInitialization&quot;: true,  /* Enable strict checking of property initialization in classes. */
    // &quot;noImplicitThis&quot;: true,                /* Raise error on 'this' expressions with an implied 'any' type. */
    // &quot;alwaysStrict&quot;: true,                  /* Parse in strict mode and emit &quot;use strict&quot; for each source file. */

    /* Additional Checks */
    // &quot;noUnusedLocals&quot;: true,                /* Report errors on unused locals. */
    // &quot;noUnusedParameters&quot;: true,            /* Report errors on unused parameters. */
    // &quot;noImplicitReturns&quot;: true,             /* Report error when not all code paths in function return a value. */
    // &quot;noFallthroughCasesInSwitch&quot;: true,    /* Report errors for fallthrough cases in switch statement. */

    /* Module Resolution Options */
    // &quot;moduleResolution&quot;: &quot;node&quot;,            /* Specify module resolution strategy: 'node' (Node.js) or 'classic' (TypeScript pre-1.6). */
    // &quot;baseUrl&quot;: &quot;./&quot;,                       /* Base directory to resolve non-absolute module names. */
    // &quot;paths&quot;: {},                           /* A series of entries which re-map imports to lookup locations relative to the 'baseUrl'. */
    // &quot;rootDirs&quot;: [],                        /* List of root folders whose combined content represents the structure of the project at runtime. */
    // &quot;typeRoots&quot;: [],                       /* List of folders to include type definitions from. */
    // &quot;types&quot;: [],                           /* Type declaration files to be included in compilation. */
    // &quot;allowSyntheticDefaultImports&quot;: true,  /* Allow default imports from modules with no default export. This does not affect code emit, just typechecking. */
    &quot;esModuleInterop&quot;: true /* Enables emit interoperability between CommonJS and ES Modules via creation of namespace objects for all imports. Implies 'allowSyntheticDefaultImports'. */,
    // &quot;preserveSymlinks&quot;: true,              /* Do not resolve the real path of symlinks. */
    // &quot;allowUmdGlobalAccess&quot;: true,          /* Allow accessing UMD globals from modules. */

    /* Source Map Options */
    // &quot;sourceRoot&quot;: &quot;&quot;,                      /* Specify the location where debugger should locate TypeScript files instead of source locations. */
    // &quot;mapRoot&quot;: &quot;&quot;,                         /* Specify the location where debugger should locate map files instead of generated locations. */
    // &quot;inlineSourceMap&quot;: true,               /* Emit a single file with source maps instead of having a separate file. */
    // &quot;inlineSources&quot;: true,                 /* Emit the source alongside the sourcemaps within a single file; requires '--inlineSourceMap' or '--sourceMap' to be set. */

    /* Experimental Options */
    // &quot;experimentalDecorators&quot;: true,        /* Enables experimental support for ES7 decorators. */
    // &quot;emitDecoratorMetadata&quot;: true,         /* Enables experimental support for emitting type metadata for decorators. */

    /* Advanced Options */
    &quot;skipLibCheck&quot;: true /* Skip type checking of declaration files. */,
    &quot;forceConsistentCasingInFileNames&quot;: true /* Disallow inconsistently-cased references to the same file. */
  }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;물론 명령어 없이 추가해도 됩니다.&lt;/p&gt;

&lt;h3 id=&quot;typescript-컴파일&quot;&gt;Typescript 컴파일&lt;/h3&gt;

&lt;p&gt;다음 명령어로 &lt;strong&gt;.ts&lt;/strong&gt; 파일을 컴파일 하여 &lt;strong&gt;.js&lt;/strong&gt; 파일로 변환합니다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ yarn run tsc
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;컴파일 후 기본적으로 같은 디렉토리에 .js파일로 생성됩니다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;tsconfig.json&lt;/strong&gt; 파일의 &lt;strong&gt;outDir&lt;/strong&gt; 값을 이용해서 다른 디렉토리에 생성되도록 변경이 가능합니다.&lt;/p&gt;

&lt;h3 id=&quot;nodejs에서-typescript-실행하기&quot;&gt;nodejs에서 Typescript 실행하기&lt;/h3&gt;

&lt;p&gt;매번 컴파일을 하지 않고 ts-node 명령어를 이용해서 실행할 수 있습니다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# run ts file
$ yarn run ts-node ./src/index.ts
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;여기까지 기본적은 Typescript를 nodejs에서 사용하는 명령어를 확인하였습니다.&lt;/p&gt;

&lt;p&gt;Typescript에 대하여 자세히 알고 싶다면 &lt;a href=&quot;https://www.typescriptlang.org/docs/home.html&quot;&gt;TypeScript Documentation&lt;/a&gt; 문서를 확인하면 됩니다. :)&lt;/p&gt;

&lt;p&gt;마지막으로 마틴 아저씨가 &lt;a href=&quot;http://blog.cleancoder.com/uncle-bob/2020/05/27/ReplDrivenDesign.html&quot;&gt;REPL로 개발한 경험&lt;/a&gt;을 블로그에 올리셨습니다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;So I’ve learned my lesson. REPL driven development feels easier and faster than TDD; but it is not. Next time, it’s back to TDD for me.

내 맘대로 직역 :

내가 배운 교훈은 REPL개발은 TDD에 비해 쉽고 빠르게 보이지만, 실제로는 그렇지 않다. 여러 부분에서 더 많은 비용을 들이게 된다.
그래서 나는 TDD를 다시 사용한다.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;nodejs에서 명확히 구조화된 프로그램 작성을 위해서는 Typescript를 사용하는 것을 추천합니다. :)&lt;/p&gt;

&lt;h2 id=&quot;참고자료&quot;&gt;참고자료&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.typescriptlang.org/docs/home.html&quot;&gt;TypeScript Documentation&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://blog.cleancoder.com/uncle-bob/2020/05/27/ReplDrivenDesign.html&quot;&gt;REPL Driven Design&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="typescript" /><category term="node" /><summary type="html">Typescript를 사용하여 봅니다!</summary></entry><entry><title type="html">swagger-node에서 express-session 설정 &amp;amp; 사용하기</title><link href="https://lahuman.github.io/swagger-node_session/" rel="alternate" type="text/html" title="swagger-node에서 express-session 설정 &amp; 사용하기" /><published>2020-05-22T00:00:00+09:00</published><updated>2020-05-22T00:00:00+09:00</updated><id>https://lahuman.github.io/swagger-node_session</id><content type="html" xml:base="https://lahuman.github.io/swagger-node_session/">&lt;h1 id=&quot;swagger-node에서-express-session-설정--사용하기&quot;&gt;swagger-node에서 express-session 설정 &amp;amp; 사용하기&lt;/h1&gt;

&lt;p&gt;기본적으로 &lt;a href=&quot;https://github.com/swagger-api/swagger-node&quot;&gt;swagger-node&lt;/a&gt;는 &lt;a href=&quot;https://expressjs.com/ko/&quot;&gt;express&lt;/a&gt;를 기반으로 동작합니다.&lt;/p&gt;

&lt;p&gt;swagger-node는 API 용으로 이용하기 때문에 기본적으로 session을 발행하지 않습니다.&lt;/p&gt;

&lt;p&gt;다만 필요에 따라 로그인 프로세스 구현을 하게 될 경우 다음 라이브러리를 이용해야 합니다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.npmjs.com/package/express-session&quot;&gt;express-session&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.npmjs.com/package/body-parser&quot;&gt;body-parser&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;app.js 코드에 다음과 같이 설정을 하면 세션을 이용할수 있습니다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;express 4.X 부터는 body-parser를 사용하지 않고 express에서 제공되는 것을 이용합니다.
또한 &lt;strong&gt;app.use(express.urlencoded({ extended: true }));&lt;/strong&gt; 을 사용하면 fileupload 처리를 이전과 같이 사용할 수 없습니다. 아래 multer를 이용한 예제를 참고 하셔요.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;app.use(
  require(&quot;express-session&quot;)({
    secret: &quot;keyboard cat&quot;,
    cookie: {
      maxAge: 1000 * 60 * 60 , // 1 hour
    },
    resave: false,
    saveUninitialized: false,
  })
);
app.use(express.urlencoded({ extended: true }));
app.use(express.json());
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;추가로 session 관리를 &lt;a href=&quot;http://www.passportjs.org/&quot;&gt;passport&lt;/a&gt;를 이용해서 쉽게 관리 할수 있습니다.&lt;/p&gt;

&lt;p&gt;다음 예제는 SSO의 방식중 하나인 SAML으로 처리한 예제를 준비 하였습니다.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/lahuman/swagger-node_passport_saml&quot;&gt;예제 코드 바로 보기&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&quot;주요점은-passport는-express-session에서만-동작-하기-때문에-세션-설정을-잘해야-합니다&quot;&gt;주요점은 passport는 express-session에서만 동작 하기 때문에 세션 설정을 잘해야 합니다.&lt;/h4&gt;

&lt;h1 id=&quot;multer를-이용한-첨부-파일-uploade&quot;&gt;Multer를 이용한 첨부 파일 uploade&lt;/h1&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;app.use(express.urlencoded({ extended: true }));&lt;/strong&gt;를 설정하면, formData를 바로 접근하지 못하게 됩니다. 이때 다음 샘플을 기준으로 첨부파일을 처리 할 수 있습니다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;// multer 설정
const multer = require(&quot;multer&quot;);
const storage = multer.diskStorage({
  // upload path
  destination: function (req, file, cb) {
    cb(null, &quot;tempfiles&quot;);
  },
  // 업로드된 파일 이름
  filename: function (req, file, cb) {
    cb(null, `${moment().format(&quot;YYYYMMDDHHmmssSSS&quot;)}${file.originalname}`);
  },
});

const upload = multer({
  storage: storage,
  limits: { fileSize: 10 * 1024 * 1024 },
});

... 설정 처리

SwaggerExpress.create(config, function (err, swaggerExpress) {
  if (err) {
    throw err;
  }
  // swagger-node에서 미들웨어 처리 방법
  app.use(
      &quot;/jira/attachments/upload&quot;,
      upload.single(&quot;filepond&quot;),
      async (req, res, next) =&amp;gt; {
        try {
          const file = req.file;
          res.status(201).json({
            status: &quot;OK&quot;,
            file_nm: file.originalname.normalize(&quot;NFC&quot;),
            file_path: file.filename,
          });
        } catch (e) {
          logger.error(e);
          res.status(400).json({ status: &quot;ERROR&quot;, message: e });
        }
      }
    );
});
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;주요 코드만 표기 하였습니다.
&lt;a href=&quot;https://github.com/lahuman/swagger-node_passport_saml&quot;&gt;예제 코드 바로 보기&lt;/a&gt;의 &lt;strong&gt;app.js&lt;/strong&gt;를 참고 하면 전체 코드를 작성하실수 있습니다.&lt;/p&gt;

&lt;h2 id=&quot;참고-자료&quot;&gt;참고 자료&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/swagger-api/swagger-node&quot;&gt;swagger-node&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://expressjs.com/ko/&quot;&gt;express&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.passportjs.org/&quot;&gt;passport&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://stackoverflow.com/ques-tions/29111571/passports-req-isauthenticated-always-returning-false-even-when-i-hardcode-done&quot;&gt;passport’s req.isAuthenticated always returning false, even when I hardcode done(null, true)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="node" /><category term="swagger" /><category term="session" /><summary type="html">추가로 passport 라이브러리와 연동하여 봅시다.</summary></entry><entry><title type="html">생각이 많아 지는 날입니다.</title><link href="https://lahuman.github.io/20200522/" rel="alternate" type="text/html" title="생각이 많아 지는 날입니다." /><published>2020-05-22T00:00:00+09:00</published><updated>2020-05-22T00:00:00+09:00</updated><id>https://lahuman.github.io/20200522</id><content type="html" xml:base="https://lahuman.github.io/20200522/">&lt;h1 id=&quot;나이가-들면-하드스킬개발-보다-소프트스킬대화에-집중-해야-한다고-하네요&quot;&gt;나이가 들면, 하드스킬(개발) 보다 소프트스킬(대화)에 집중 해야 한다고 하네요.&lt;/h1&gt;

&lt;p&gt;개발을 잘하는 건 아닌데, 꾸준히 노력하고 있습니다.&lt;/p&gt;

&lt;p&gt;나이가 들수록 주위 선배 개발자들은 개발보다는 관리 스킬에 집중하는 모습을 많이 보고 있습니다.&lt;/p&gt;

&lt;p&gt;이전 회사의 이직 사유는 개발하지 말고 관리를 하라는 이유였습니다.&lt;/p&gt;

&lt;p&gt;지금 회사도 크게 다르지 않은 느낌입니다.&lt;/p&gt;

&lt;p&gt;나이가 들면 개발을 그만두어야 할까요?&lt;/p&gt;

&lt;p&gt;이럴때 제 아들은 이렇게 이야기 합니다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;“싫은데, 내가 왜?”&lt;/strong&gt; 라고…&lt;/p&gt;

&lt;p&gt;우선 지금 최선을 다해서 하고 싶은 일을 해보려고 합니다.&lt;/p&gt;

&lt;p&gt;그래도 안되면.. 고민해봐야지요. :)&lt;/p&gt;</content><category term="단상" /><summary type="html">열심히 보단 잘하는게 중요하지요.</summary></entry><entry><title type="html">요즘 동료가 제 코드를 리뷰해주고 있습니다.</title><link href="https://lahuman.github.io/20200515/" rel="alternate" type="text/html" title="요즘 동료가 제 코드를 리뷰해주고 있습니다." /><published>2020-05-15T00:00:00+09:00</published><updated>2020-05-15T00:00:00+09:00</updated><id>https://lahuman.github.io/20200515</id><content type="html" xml:base="https://lahuman.github.io/20200515/">&lt;h1 id=&quot;단위-테스트-코드를-작성하고-있습니다&quot;&gt;단위 테스트 코드를 작성하고 있습니다.&lt;/h1&gt;

&lt;p&gt;제 코드를 기반으로 단위 테스트를 작성하면서 명확한 의미를 가지도록 변수명, 메소드 명을 리팩토링 해주고 있습니다.&lt;/p&gt;

&lt;p&gt;그러면서 저에게 현재 변수명의 의미를 묻는데 명확하게 답해주는 것도 있고 두루뭉실하게 답혀주는 것도 있습니다.&lt;/p&gt;

&lt;p&gt;명확하게 답해주는건 리펙토링 대상이 아니지만, 두루뭉실한 것들이 리펙토링 대상이 됩니다.&lt;/p&gt;

&lt;p&gt;같이 이야기 하면서 많이 생각하고 배우게 되네요.&lt;/p&gt;

&lt;h2 id=&quot;늘-내-코드는-볼때마다-부끄럽네요&quot;&gt;늘 내 코드는 볼때마다 부끄럽네요.&lt;/h2&gt;</content><category term="단상" /><summary type="html">제 코드가 부끄러우면서도 도움이 많이 되네요.</summary></entry><entry><title type="html">nodeJs] 첨부 파일를 다른 서버로 전달하기</title><link href="https://lahuman.github.io/axios_formdata_file_send/" rel="alternate" type="text/html" title="nodeJs] 첨부 파일를 다른 서버로 전달하기" /><published>2020-05-11T00:00:00+09:00</published><updated>2020-05-11T00:00:00+09:00</updated><id>https://lahuman.github.io/axios_formdata_file_send</id><content type="html" xml:base="https://lahuman.github.io/axios_formdata_file_send/">&lt;h1 id=&quot;첨부파일을-다른-서버로-포워딩-하기&quot;&gt;첨부파일을 다른 서버로 포워딩 하기&lt;/h1&gt;

&lt;p&gt;첨부 파일을 아래 그림과 같이 API server에서 받아서 다른 내부 서버에 전달을 하려고 합니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/post_img/file_upload_via_server.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;API 서버에는 따로 첨부파일 정보를 저장하지 않고, buffer를 바로 내부 서버로 전달을 합니다.&lt;/p&gt;

&lt;p&gt;이를 처리하는 방식으로는 2가지가 있습니다.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Proxy 사용&lt;/li&gt;
  &lt;li&gt;axios와 다른 라이브러리를 이용하여 post 통신&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;1-proxy-사용&quot;&gt;1. Proxy 사용&lt;/h2&gt;

&lt;h4 id=&quot;필요-라이브러리&quot;&gt;필요 라이브러리&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.npmjs.com/package/express-http-proxy&quot;&gt;express-http-proxy&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;사용법&quot;&gt;사용법&lt;/h4&gt;

&lt;p&gt;&lt;a href=&quot;https://www.npmjs.com/package/express-http-proxy&quot;&gt;express-http-proxy&lt;/a&gt;를 다음과 같이 설정하면 해당 주소로 오는 요청의 통신을 설정된 서버로 포워딩 해줍니다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# 예제
const proxy = require('express-http-proxy');

const app = require('express')();

app.use('/proxy', proxy('http://proxy_target_domain', {
  proxyReqPathResolver: async (req) =&amp;gt; {
    return '/proxy/target/url?id='+req.params.id;
  },
  proxyReqOptDecorator: (proxyReqOpts) =&amp;gt; {
    const newProxyReqOpts = { ...proxyReqOpts };
    newProxyReqOpts.headers = { host: 'spacial hosts', apikey: 'spacial key' };
    newProxyReqOpts.rejectUnauthorized = false;
    return newProxyReqOpts;
  },
}));
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;2-axios와-다른-라이브러리를-이용하여-post-통신&quot;&gt;2. axios와 다른 라이브러리를 이용하여 post 통신&lt;/h2&gt;

&lt;h4 id=&quot;필요-라이브러리-1&quot;&gt;필요 라이브러리&lt;/h4&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.npmjs.com/package/axios&quot;&gt;axios&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.npmjs.com/package/multer&quot;&gt;multer&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.npmjs.com/package/form-data&quot;&gt;form-data&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&quot;사용법-1&quot;&gt;사용법&lt;/h4&gt;

&lt;p&gt;우선 첨부파일을 &lt;a href=&quot;https://www.npmjs.com/package/multer&quot;&gt;multer&lt;/a&gt;를 이용해서 객체로 만들고, 이를 &lt;a href=&quot;https://www.npmjs.com/package/form-data&quot;&gt;form-data&lt;/a&gt;로 감싸서 &lt;a href=&quot;https://www.npmjs.com/package/axios&quot;&gt;axios&lt;/a&gt;를 통해 전송합니다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;const axios = require(&quot;axios&quot;);
const https = require(&quot;https&quot;);
const multer = require(&quot;multer&quot;);
const FormData = require(&quot;form-data&quot;);
const express = require('express');

const app = express();
const router = express.Router();

app.use('/', router);

const upload = multer();
router.post(
  &quot;/upload&quot;,
  upload.single(&quot;filepond&quot;), // multer를 이용하여 업로드 파일 처리
  async (req, res, next) =&amp;gt; {
    try {
      // buffer를 FormData로 감쌈
      const formData = new FormData();
      formData.append(&quot;filepond&quot;, req.file.buffer, {
        filename: req.file.originalname,
      });

      // 다른 서버로 전송
      const result = await axios.post(
        'http://proxy_target_domain/proxy/target/url',
        formData,
        {
          headers: {
            ...formData.getHeaders(),
            &quot;Content-Length&quot;: formData.getLengthSync(),
            apikey: &quot;apikey&quot;,
            host: &quot;hosts&quot;,
          },
          httpsAgent: new https.Agent({
            rejectUnauthorized: false,
          }),
        }
      );
      res.status(200).json(result.data);
    } catch (err) {
      logger.error(err);
      res
        .status(500)
        .send(`${err}`);
    }
  }
);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;첨부 파일을 다른 서버로 전송할때 주의 하는 부분이 있습니다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;formData.append(&quot;filepond&quot;, req.file.buffer, {
        filename: req.file.originalname,
      });
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;이 부분에서 3번째 옵션 파라메터에 filename 이외의 값을 함부로 추가 하면 &lt;strong&gt;400 Bad request&lt;/strong&gt; 가 발생합니다.&lt;/p&gt;

&lt;h2 id=&quot;파일을-전달하는-것이-어려운게-아닌데-명확한-인터페이스를-확인하지-못해서-시간이-많이-지체-되었습니다&quot;&gt;파일을 전달하는 것이 어려운게 아닌데 명확한 인터페이스를 확인하지 못해서 시간이 많이 지체 되었습니다.&lt;/h2&gt;</content><category term="node" /><category term="axios" /><category term="proxy" /><summary type="html">Proxy를 이용하거나, axios와 몇가지 라이브러리를 사용하면 된다.</summary></entry><entry><title type="html">Ubuntu 20.04] npm install sqlite3 설치시 오류 처리</title><link href="https://lahuman.github.io/ubuntu_20.04_npm_sqlite3/" rel="alternate" type="text/html" title="Ubuntu 20.04] npm install sqlite3 설치시 오류 처리" /><published>2020-05-10T00:00:00+09:00</published><updated>2020-05-10T00:00:00+09:00</updated><id>https://lahuman.github.io/ubuntu_20.04_npm_sqlite3</id><content type="html" xml:base="https://lahuman.github.io/ubuntu_20.04_npm_sqlite3/">&lt;h1 id=&quot;ubuntu-2004-npm-install-sqlite3-설치시-오류-처리&quot;&gt;Ubuntu 20.04] npm install sqlite3 설치시 오류 처리&lt;/h1&gt;

&lt;p&gt;WSL에서 Ubuntu 20.04가 제공된다는 이야기를 듣고 바로 설치 하였습니다.&lt;/p&gt;

&lt;p&gt;node를 설치하고 진행중인 개인 프로젝트를 설치 하였는데, npm install sqlite3에서 다음과 같은 오류페이지가 표출 되었습니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/post_img/sqlite3_error.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;오류를 처리하기 위해서 많은 시도를 하였지만, 모두 실패 하였습니다.&lt;/p&gt;

&lt;p&gt;결국 최후의 방법으로 Ubuntu를 삭제하고 재설치를 진행하였습니다.&lt;/p&gt;

&lt;p&gt;다음과 같이 처리하여 문제를 해결하였습니다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# ubuntu update
$ sudo apt-get update
$ sudo apt-get -y upgrade

# 개발도구 설치
$ sudo apt-get install -y build-essential

# node 12 설치
$ curl -sL https://deb.nodesource.com/setup_12.x | sudo -E bash -
$ sudo apt-get install -y nodejs

$ sudo npm install sqlite3
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/post_img/sqlite3_install.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;아주 잘 설치됩니다.&lt;/p&gt;

&lt;p&gt;거의 2주간 여러 라이브러리를 설치하고 지우고를 했는데, 결국 포멧후 첨부터 다시하니 쉽게 되네요.&lt;/p&gt;

&lt;h2 id=&quot;역시-최후의-방법은-포멧입니다&quot;&gt;역시 최후의 방법은 포멧입니다.&lt;/h2&gt;</content><category term="ubuntu" /><category term="npm" /><category term="sqlite3" /><summary type="html">돌고 돌아 깔끔 처리</summary></entry><entry><title type="html">동네에 코로나바이러스 확진자가 발생하였습니다.</title><link href="https://lahuman.github.io/20200510/" rel="alternate" type="text/html" title="동네에 코로나바이러스 확진자가 발생하였습니다." /><published>2020-05-10T00:00:00+09:00</published><updated>2020-05-10T00:00:00+09:00</updated><id>https://lahuman.github.io/20200510</id><content type="html" xml:base="https://lahuman.github.io/20200510/">&lt;h1 id=&quot;끝날때까지-끝난게-아니라고-그렇게-이야기-다들-하는데&quot;&gt;끝날때까지 끝난게 아니라고 그렇게 이야기 다들 하는데…&lt;/h1&gt;

&lt;p&gt;몇몇 사람들로 인해서 다시 활성화되고 있습니다.&lt;/p&gt;

&lt;p&gt;클럽에가서 놀고 싶은 마음을 모르는건 아니지만, 시국이 시국인 만큼 참아야 한다는걸 왜 모를까요?&lt;/p&gt;

&lt;p&gt;걸려서 가족에게 옮기기라도 하면 얼마나 큰 후회를 할려고 이러는 걸까요?&lt;/p&gt;

&lt;p&gt;조금만 더 참고 조심해야 합니다.&lt;/p&gt;

&lt;h2 id=&quot;모두-조금만-더-힘내-보아요&quot;&gt;모두 조금만 더 힘내 보아요!&lt;/h2&gt;</content><category term="단상" /><summary type="html">이태원 클럽을 다녀왔다고 하네요.</summary></entry><entry><title type="html">[Dockerfile] node:Alpine에서 puppeteer 기동 &amp;amp; 한글 깨짐 처리</title><link href="https://lahuman.github.io/dockerfile_alpine_puppeteer/" rel="alternate" type="text/html" title="[Dockerfile] node:Alpine에서 puppeteer 기동 &amp; 한글 깨짐 처리" /><published>2020-04-14T00:00:00+09:00</published><updated>2020-04-14T00:00:00+09:00</updated><id>https://lahuman.github.io/dockerfile_alpine_puppeteer</id><content type="html" xml:base="https://lahuman.github.io/dockerfile_alpine_puppeteer/">&lt;h1 id=&quot;nodealpine-에서-puppeteer-기동-하고-한글-깨짐-처리-하기&quot;&gt;node:Alpine 에서 puppeteer 기동 하고 한글 깨짐 처리 하기&lt;/h1&gt;

&lt;p&gt;&lt;a href=&quot;https://www.weave.works/blog/gitops-operations-by-pull-request&quot;&gt;GitOps&lt;/a&gt; 스타일의 지속적인 배포를 구축하여 자동 배포 시스템을 Git ==&amp;gt; jenkins ==&amp;gt; Kubernetes로 구축하여 사용하고 있습니다.&lt;/p&gt;

&lt;p&gt;배포가 문제 없이 되었으나 puppeteer를 사용하는 순간 다음과 같은 오류를 만나게 되었습니다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;....
Error: Failed to launch chrome! spawn /app/node_modules/puppeteer/.local-chromium/linux-609904/chrome-linux/chrome ENOENT
...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;원인 해결 방법으로 chrome을 설치하고 실행 위치를 강제로 잡아주면 된다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# Dockerfile 내부
# chromium 설치
RUN apk add --no-cache udev ttf-freefont chromium

# npm 설치 시 chromium 다운하지 않도록 설정
ENV PUPPETEER_SKIP_CHROMIUM_DOWNLOAD true
# 설치된 위치를 환경 변수로 설정(node에서 사용)
ENV CHROMIUM_PATH /usr/bin/chromium-browser
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;이후 puppeteer를 실행하는 곳에서 다음과 같이 처리 해줍니다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;puppeteer.launch({
  executablePath: process.env.CHROMIUM_PATH,
  args: ['--no-sandbox'], // This was important. Can't remember why
});
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;이후 다음과 같은 오류가 발생할 수 있습니다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Protocol error (IO.read): Invalid parameters handle: string value expected
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;이유는 &lt;code class=&quot;highlighter-rouge&quot;&gt;node:12-alpine&lt;/code&gt;를 사용할 경우 발생하는 오류로 &lt;code class=&quot;highlighter-rouge&quot;&gt;node:13-alpine&lt;/code&gt;를 이용하면 해결 됩니다.&lt;/p&gt;

&lt;p&gt;마지막으로 이렇게 처리 했음에도 한글이 깨지고 맙니다.&lt;/p&gt;

&lt;p&gt;한글 폰트를 다음과 같이 설치하여 줍니다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# Dockerfile
# 한글 폰트 설치
RUN mkdir /usr/share/fonts/nanumfont
RUN wget http://cdn.naver.com/naver/NanumFont/fontfiles/NanumFont_TTF_ALL.zip
RUN unzip NanumFont_TTF_ALL.zip -d /usr/share/fonts/nanumfont
RUN fc-cache -f -v

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;추가--전체-dockerfile을-예제&quot;&gt;추가 : 전체 Dockerfile을 예제&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;Alpine 이란? 알파인 리눅스는 보안, 단순성 및 자원 효율성을 높이는 고급 사용자를 위해 설계된 범용 리눅스 배포판으로 musl libc와 busybox를 기반으로 하기에 GNU/Linux 배포판 보다 작고 가벼우며 yum이나 apt 같은 패키지 관리자가 아닌 apk라는 자체 패키지 관리자를 가지며 보안에 염두해두고 설계되었기에 모든 바이너리는 독립적인 실행 파일(PIE)로 컴파일 됩니다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;FROM node:13.12.0-alpine3.11 as build

USER root

# 앱 디렉터리 생성
WORKDIR /usr/src/app

COPY . .
# chromium 설치
RUN apk add --no-cache udev ttf-freefont chromium

# 한글 폰트 처리
RUN mkdir /usr/share/fonts/nanumfont
RUN wget http://cdn.naver.com/naver/NanumFont/fontfiles/NanumFont_TTF_ALL.zip
RUN unzip NanumFont_TTF_ALL.zip -d /usr/share/fonts/nanumfont
RUN fc-cache -f -v

# 앱 디렉토리로 다시 이동
RUN cd /usr/src/app
# npm install 시 Chromium 다운로드 제외 처리
ENV PUPPETEER_SKIP_CHROMIUM_DOWNLOAD true
# chromium-browser 설치 위치를 환경 변수에 저장
ENV CHROMIUM_PATH /usr/bin/chromium-browser

# 시간을 서울로 변경 처리
RUN apk --no-cache add tzdata &amp;amp;&amp;amp; \
        cp /usr/share/zoneinfo/Asia/Seoul /etc/localtime &amp;amp;&amp;amp; \
        echo &quot;Asia/Seoul&quot; &amp;gt; /etc/timezone

# Set the lang
ENV LANG=ko_KR.UTF-8 \
    LANGUAGE=ko_KR.UTF-8

# node module 설치
RUN npm  install --unsafe-perm 

# docker 외부 OPEN 포트
EXPOSE 3000
CMD [&quot;npm&quot;, &quot;start&quot;]

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;아마-나중에-다시-만날-문제일꺼-같습니다&quot;&gt;아마 나중에 다시 만날 문제일꺼 같습니다.&lt;/h2&gt;

&lt;p&gt;한글 꺠짐 문제는 늘 한번씩 돌아오네요.&lt;/p&gt;

&lt;h2 id=&quot;참고자료&quot;&gt;참고자료&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/puppeteer/puppeteer/issues/3994&quot;&gt;Error: Failed to launch chrome! spawn /app/node_modules/puppeteer/.local-chromium/linux-609904/chrome-linux/chrome ENOENT #3994&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/puppeteer/puppeteer/issues/4609&quot;&gt;v1.18.0 Page.pdf - Protocol error (IO.read): Invalid parameters handle: string value expected #4609&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="node" /><category term="alpine" /><category term="docker" /><summary type="html">Docker container에서 puppeteer 기동하고 한글 깨짐 처리</summary></entry><entry><title type="html">[Mac TIP] OS 업데이트 이후 다시 설치해야 하는 xcode 재설치 하는 법!</title><link href="https://lahuman.github.io/mac_xcode_reinstall/" rel="alternate" type="text/html" title="[Mac TIP] OS 업데이트 이후 다시 설치해야 하는 xcode 재설치 하는 법!" /><published>2020-04-09T00:00:00+09:00</published><updated>2020-04-09T00:00:00+09:00</updated><id>https://lahuman.github.io/mac_xcode_reinstall</id><content type="html" xml:base="https://lahuman.github.io/mac_xcode_reinstall/">&lt;h1 id=&quot;mac-tip-os-업데이트-이후-다시-설치해야-하는-xcode-재설치-하는-법&quot;&gt;[Mac TIP] OS 업데이트 이후 다시 설치해야 하는 xcode 재설치 하는 법!&lt;/h1&gt;

&lt;p&gt;Mac의 OS를 업데이트를 하고 나면 꼭 다음과 같은 오류를 만나게 됩니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;assets/img/post_img/mac_no_xcode.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;xcode CommandLineTools을 분명히 설치 했음에도 발생합니다.&lt;/p&gt;

&lt;p&gt;이럴때는 아래의 명령어로 삭제후 재설치 하여야 합니다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$&amp;gt; sudo rm -rf /Library/Developer/CommandLineTools
$&amp;gt; sudo xcode-select --install
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;mac-os-종특인듯&quot;&gt;MAC OS 종특인듯…&lt;/h2&gt;</content><category term="mac" /><category term="xcode" /><summary type="html">No Xcode or CLT version detected!</summary></entry></feed>

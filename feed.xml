<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.6.3">Jekyll</generator><link href="https://lahuman.github.io/feed.xml" rel="self" type="application/atom+xml" /><link href="https://lahuman.github.io/" rel="alternate" type="text/html" /><updated>2025-03-27T03:33:32+00:00</updated><id>https://lahuman.github.io/feed.xml</id><title type="html">lahuman</title><subtitle>열심히 사는 아저씨</subtitle><entry><title type="html">AWS NLB 에서 Preserved Client IP Address 사용시 Nginx 연계 오류</title><link href="https://lahuman.github.io/aws_nlb_nginx_/" rel="alternate" type="text/html" title="AWS NLB 에서 Preserved Client IP Address 사용시 Nginx 연계 오류" /><published>2025-03-26T00:00:00+00:00</published><updated>2025-03-26T00:00:00+00:00</updated><id>https://lahuman.github.io/aws_nlb_nginx_</id><content type="html" xml:base="https://lahuman.github.io/aws_nlb_nginx_/">&lt;h1 id=&quot;aws-nlb-preserve-client-ip와-nginx-연동-삽질기-feat-proxy-protocol&quot;&gt;AWS NLB Preserve Client IP와 Nginx 연동 삽질기 (feat. Proxy Protocol)&lt;/h1&gt;

&lt;p&gt;오늘은 AWS 환경에서 애플리케이션을 운영하며 흔히 만날 수 있는 로드밸런서, 그중에서도 Network Load Balancer(NLB)와 Nginx를 함께 사용할 때 겪었던 &lt;code class=&quot;highlighter-rouge&quot;&gt;Preserve Client IP&lt;/code&gt; 옵션 관련 삽질기를 공유해볼까 합니다. 저와 비슷한 문제로 골머리를 앓았던 분들께 조금이나마 도움이 되기를 바랍니다.&lt;/p&gt;

&lt;h2 id=&quot;문제-상황-nlb--preserve-client-ip-addresses-옵션&quot;&gt;문제 상황: NLB  &lt;code class=&quot;highlighter-rouge&quot;&gt;Preserve client IP addresses&lt;/code&gt; 옵션&lt;/h2&gt;

&lt;p&gt;일반적인 웹 서비스 구성이었습니다.&lt;/p&gt;

&lt;div class=&quot;mermaid&quot;&gt; 
  graph LR;
    A[Client] --&amp;gt;|호출| B(NLB);
    B --&amp;gt; C(Nginx);
    C --&amp;gt; D(Tomcat);
&lt;/div&gt;

&lt;p&gt;Nginx는 리버스 프록시 역할을 수행합니다. Nginx 로그나 애플리케이션 단에서 &lt;strong&gt;실제 클라이언트의 IP 주소&lt;/strong&gt;를 확인해야 할 필요성이 생겼습니다. 가장 먼저 떠오른 것은 NLB의 &lt;code class=&quot;highlighter-rouge&quot;&gt;Preserve client IP addresses&lt;/code&gt; 옵션입니다. 이 옵션은 실제 클라이언트 IP로 호출 된것 같이 Nginx로 요청을 보내 줍니다.&lt;/p&gt;

&lt;p&gt;하지만 결과는 참담했습니다. NLB의 모니터링 지표에서 해당 타겟 그룹(Nginx 인스턴스들)으로 가는 &lt;strong&gt;Request / Response Byte Size가 0/0&lt;/strong&gt; 으로 찍히며 통신이 완전히 두절된 것입니다. 옵션을 끄면 다시 정상으로 돌아왔고요. 대체 왜 이런 일이 발생했을까요?&lt;/p&gt;

&lt;h2 id=&quot;원인-분석-비대칭-라우팅&quot;&gt;원인 분석: 비대칭 라우팅&lt;/h2&gt;

&lt;p&gt;결론부터 말하자면, &lt;code class=&quot;highlighter-rouge&quot;&gt;Preserve Client IP&lt;/code&gt; 옵션을 켰을 때 발생하는 &lt;strong&gt;비대칭 라우팅(Asymmetric Routing)&lt;/strong&gt; 때문이었습니다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Preserve Client IP&lt;/code&gt; = OFF (기본값, 정상 작동 시):&lt;/strong&gt;
    &lt;ol&gt;
      &lt;li&gt;Client -&amp;gt; NLB 로 요청이 옵니다.&lt;/li&gt;
      &lt;li&gt;NLB는 &lt;strong&gt;자신의 Private IP&lt;/strong&gt;를 Source IP로 사용하여 Nginx에 요청을 전달합니다 (Source NAT 발생).&lt;/li&gt;
      &lt;li&gt;Nginx는 NLB IP로부터 요청을 받았으므로, 응답도 &lt;strong&gt;NLB IP&lt;/strong&gt;로 보냅니다.&lt;/li&gt;
      &lt;li&gt;NLB는 응답을 받아 Client에게 전달합니다.&lt;/li&gt;
      &lt;li&gt;요청과 응답이 NLB를 통해 대칭적으로 이루어집니다. Nginx는 같은 VPC 내의 NLB IP와 통신하므로 문제가 없습니다. 이를 &lt;strong&gt;대칭 라우팅(Symmetric Routing)&lt;/strong&gt;이라고 합니다. 즉, 요청(Request) 패킷이 지나간 경로와 응답(Response) 패킷이 돌아오는 경로가 동일한 네트워크 장비(여기서는 NLB)를 거치는 상태입니다.&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Preserve Client IP&lt;/code&gt; = ON (문제 발생 시):&lt;/strong&gt;
    &lt;ol&gt;
      &lt;li&gt;Client -&amp;gt; NLB 로 요청이 옵니다.&lt;/li&gt;
      &lt;li&gt;NLB는 Source IP를 변경하지 않고 &lt;strong&gt;원본 Client IP&lt;/strong&gt;를 Source IP로 사용하여 Nginx에 요청을 전달합니다.&lt;/li&gt;
      &lt;li&gt;Nginx는 &lt;strong&gt;원본 Client IP&lt;/strong&gt;로부터 요청을 받은 것으로 인지합니다.&lt;/li&gt;
      &lt;li&gt;Nginx는 응답을 &lt;strong&gt;원본 Client IP&lt;/strong&gt;로 직접 보내려고 시도합니다!&lt;/li&gt;
      &lt;li&gt;이때, EC2 인스턴스(Nginx)의 기본 라우팅 경로는 보통 인터넷 게이트웨이(IGW)나 NAT 게이트웨이를 향합니다. 따라서 응답 패킷은 &lt;strong&gt;NLB를 거치지 않고&lt;/strong&gt; 바로 인터넷으로 나가버립니다.&lt;/li&gt;
      &lt;li&gt;바로 이 지점에서 &lt;strong&gt;비대칭 라우팅(Asymmetric Routing)&lt;/strong&gt;이 발생합니다. 요청 패킷은 &lt;code class=&quot;highlighter-rouge&quot;&gt;Client -&amp;gt; NLB -&amp;gt; Nginx&lt;/code&gt; 경로로 왔지만, 응답 패킷은 &lt;code class=&quot;highlighter-rouge&quot;&gt;Nginx -&amp;gt; IGW -&amp;gt; Client&lt;/code&gt; 경로로 돌아가게 됩니다. 요청 경로와 응답 경로가 달라진 것입니다.&lt;/li&gt;
      &lt;li&gt;NLB와 같은 상태 기반(Stateful) 네트워크 장비는 자신이 전달한 요청에 대한 응답이 &lt;strong&gt;자신을 통해&lt;/strong&gt; 돌아오는 것을 기대하며 연결 상태를 추적합니다. 하지만 비대칭 라우팅 상황에서는 NLB가 Nginx로 보낸 요청에 대한 응답을 볼 수 없으므로, 연결이 비정상적으로 종료되었거나 실패한 것으로 간주합니다. 이것이 0/0 카운트의 원인이었습니다.&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;결국, 이 옵션을 켜려면 Nginx 인스턴스의 운영체제 레벨에서 라우팅 테이블을 수정하여 &lt;strong&gt;클라이언트 IP로 가는 응답 트래픽이 NLB를 거치도록&lt;/strong&gt; 매우 복잡한 설정을 해줘야 했습니다. 이건 너무 번거로웠죠.&lt;/p&gt;

&lt;h2 id=&quot;대안-1-그냥-preserve-client-ip--off-쓰고-xff-헤더-확인하기&quot;&gt;대안 1: 그냥 &lt;code class=&quot;highlighter-rouge&quot;&gt;Preserve Client IP&lt;/code&gt; = OFF 쓰고 XFF 헤더 확인하기&lt;/h2&gt;

&lt;p&gt;가장 간단한 방법입니다. &lt;code class=&quot;highlighter-rouge&quot;&gt;Preserve Client IP&lt;/code&gt; 옵션을 끄면, NLB는 자동으로 &lt;code class=&quot;highlighter-rouge&quot;&gt;X-Forwarded-For&lt;/code&gt; (XFF) HTTP 헤더에 원본 클라이언트 IP를 담아서 Nginx로 전달해줍니다. Nginx에서는 이 헤더 값을 읽으면 됩니다.&lt;/p&gt;

&lt;p&gt;Nginx에서 XFF 헤더를 신뢰하고 실제 클라이언트 IP로 인식하게 하려면 &lt;code class=&quot;highlighter-rouge&quot;&gt;nginx.conf&lt;/code&gt; 등에 다음과 같이 설정합니다.&lt;/p&gt;

&lt;div class=&quot;language-nginx highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;http&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# ... 다른 설정들 ...
&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# NLB의 IP 대역을 신뢰하도록 설정 (VPC CIDR 사용 권장)
&lt;/span&gt;    &lt;span class=&quot;kn&quot;&gt;set_real_ip_from&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;.0.0.0/16&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# 예시: VPC CIDR
&lt;/span&gt;    &lt;span class=&quot;c1&quot;&gt;# 어떤 헤더를 실제 IP로 사용할지 지정
&lt;/span&gt;    &lt;span class=&quot;kn&quot;&gt;real_ip_header&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;X-Forwarded-For&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# XFF 헤더가 여러 IP를 포함할 경우, 가장 오른쪽 IP를 사용 (가장 마지막 프록시 IP 제외)
&lt;/span&gt;    &lt;span class=&quot;c1&quot;&gt;# real_ip_recursive on; # 필요에 따라 설정
&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# ... 다른 설정들 ...
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;이 방법은 OS 라우팅 수정 없이 Nginx 설정만으로 해결 가능해서 매우 편리합니다. 대부분의 경우 이 방법으로 충분할 것입니다.&lt;/p&gt;

&lt;h2 id=&quot;대안-2-proxy-protocol-v2-사용하기&quot;&gt;대안 2: Proxy Protocol v2 사용하기&lt;/h2&gt;

&lt;p&gt;하지만 어떤 이유로든 &lt;code class=&quot;highlighter-rouge&quot;&gt;Preserve Client IP = ON&lt;/code&gt;과 유사한 효과 (TCP 레벨에서 클라이언트 IP 확인 등)가 필요하거나, 혹은 다른 이유로 &lt;code class=&quot;highlighter-rouge&quot;&gt;Preserve Client IP = OFF&lt;/code&gt; 상태에서 &lt;strong&gt;Proxy Protocol v2&lt;/strong&gt;를 사용해야 하는 상황이 있을 수 있습니다. (예: &lt;code class=&quot;highlighter-rouge&quot;&gt;NLB -&amp;gt; ALB&lt;/code&gt; 구성에서 Client IP 전달 등)&lt;/p&gt;

&lt;p&gt;그래서 다음 시도를 해봤습니다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;NLB 설정: &lt;code class=&quot;highlighter-rouge&quot;&gt;Preserve Client IP&lt;/code&gt; = &lt;strong&gt;OFF&lt;/strong&gt;, Target Group의 &lt;code class=&quot;highlighter-rouge&quot;&gt;Proxy Protocol v2&lt;/code&gt; = &lt;strong&gt;ON&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;Nginx 설정: 원본 IP를 받도록 설정&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;이론적으로는 &lt;code class=&quot;highlighter-rouge&quot;&gt;Preserve Client IP = OFF&lt;/code&gt; 이므로 라우팅은 해결되고, Proxy Protocol v2 헤더를 통해 원본 IP 정보가 TCP 스트림 내에 포함되어 Nginx로 전달될 것으로 기대했습니다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;결과:&lt;/strong&gt; 또다시 0/0 !!&lt;/p&gt;

&lt;p&gt;이번엔 또 무슨 문제일까요? 원인은 &lt;strong&gt;Nginx가 Proxy Protocol 헤더를 이해하도록 설정되지 않았기 때문&lt;/strong&gt;이었습니다.&lt;/p&gt;

&lt;p&gt;NLB가 Proxy Protocol v2 헤더를 보내면, Nginx는 기본적으로 이를 해석하지 못하고 비정상적인 요청으로 간주하여 연결을 끊어버립니다. NLB는 Nginx와의 통신(Health Check 포함)이 실패하니 타겟이 비정상이라고 판단하는 것이죠.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;해결책:&lt;/strong&gt; Nginx의 &lt;code class=&quot;highlighter-rouge&quot;&gt;listen&lt;/code&gt; 지시어에 &lt;code class=&quot;highlighter-rouge&quot;&gt;proxy_protocol&lt;/code&gt; 파라미터를 추가해야 합니다.&lt;/p&gt;

&lt;div class=&quot;language-nginx highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;server&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# HTTP (80번 포트) + Proxy Protocol
&lt;/span&gt;    &lt;span class=&quot;kn&quot;&gt;listen&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;80&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;proxy_protocol&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;# HTTPS (443번 포트) + Proxy Protocol
&lt;/span&gt;    &lt;span class=&quot;c1&quot;&gt;# listen 443 ssl proxy_protocol;
&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# Proxy Protocol 헤더를 보내는 주체(NLB)를 신뢰하도록 설정
&lt;/span&gt;    &lt;span class=&quot;kn&quot;&gt;set_real_ip_from&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;.0.0.0/16&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# 예시: VPC CIDR
&lt;/span&gt;    &lt;span class=&quot;c1&quot;&gt;# 실제 IP를 Proxy Protocol 헤더에서 가져오도록 설정
&lt;/span&gt;    &lt;span class=&quot;kn&quot;&gt;real_ip_header&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;proxy_protocol&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;# ... 나머지 설정 ...
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;여기서 중요한 점! &lt;code class=&quot;highlighter-rouge&quot;&gt;set_real_ip_from&lt;/code&gt; 지시어는 여전히 필요합니다. 왜냐하면 &lt;code class=&quot;highlighter-rouge&quot;&gt;real_ip_header proxy_protocol;&lt;/code&gt; 설정이 동작하려면, &lt;strong&gt;직접 연결을 시도한 IP 주소(&lt;code class=&quot;highlighter-rouge&quot;&gt;Preserve Client IP = OFF&lt;/code&gt;이므로 NLB의 Private IP)가 신뢰할 수 있는 프록시 목록(&lt;code class=&quot;highlighter-rouge&quot;&gt;set_real_ip_from&lt;/code&gt;)에 포함되어 있어야&lt;/strong&gt; Nginx가 Proxy Protocol 헤더의 내용을 신뢰하기 때문입니다.&lt;/p&gt;

&lt;p&gt;이 설정을 적용하고 Nginx를 재시작하니 드디어 NLB &amp;lt;-&amp;gt; Nginx 통신이 정상화되고, Nginx 로그에도 실제 클라이언트 IP가 찍히는 것을 확인할 수 있었습니다!&lt;/p&gt;

&lt;h2 id=&quot;결론&quot;&gt;결론&lt;/h2&gt;

&lt;p&gt;AWS NLB의 &lt;code class=&quot;highlighter-rouge&quot;&gt;Preserve Client IP&lt;/code&gt; 옵션은 편리해 보이지만, &lt;strong&gt;비대칭 라우팅&lt;/strong&gt;이라는 숨겨진 복병을 만날 수 있습니다. 요청 경로와 응답 경로가 달라지면서 NLB와 같은 상태 기반 장비의 연결 추적을 방해하는 이 현상은 예상치 못한 통신 장애를 유발합니다.&lt;/p&gt;

&lt;p&gt;대부분의 경우, 이 옵션을 &lt;strong&gt;끄고&lt;/strong&gt; NLB가 자동으로 추가해주는 &lt;strong&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;X-Forwarded-For&lt;/code&gt; 헤더를 Nginx에서 활용&lt;/strong&gt;하는 것이 가장 간단하고 권장되는 방법입니다.&lt;/p&gt;

&lt;p&gt;만약 Proxy Protocol v2를 사용해야 한다면, NLB 타겟 그룹 설정뿐만 아니라 &lt;strong&gt;Nginx의 &lt;code class=&quot;highlighter-rouge&quot;&gt;listen&lt;/code&gt; 지시어에도 &lt;code class=&quot;highlighter-rouge&quot;&gt;proxy_protocol&lt;/code&gt; 파라미터를 반드시 추가&lt;/strong&gt;해야 한다는 점, 그리고 &lt;strong&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;set_real_ip_from&lt;/code&gt; 설정으로 NLB를 신뢰&lt;/strong&gt;하도록 지정해야 한다는 점을 잊지 마시기 바랍니다.&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;참고-자료&quot;&gt;참고 자료&lt;/h2&gt;

&lt;p&gt;이 글의 내용은 AWS NLB 및 Nginx 설정과 관련된 일반적인 기술 개념과 문제 해결 과정을 바탕으로 작성되었습니다. 더 자세한 기술 정보는 아래 공식 문서를 참고하시면 좋습니다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;AWS Network Load Balancer - 대상 그룹:&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Preserve client IP addresses&lt;/code&gt; 설명: &lt;a href=&quot;https://docs.aws.amazon.com/ko_kr/elasticloadbalancing/latest/network/load-balancer-target-groups.html#preserve-client-ip&quot;&gt;https://docs.aws.amazon.com/ko_kr/elasticloadbalancing/latest/network/load-balancer-target-groups.html#preserve-client-ip&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Proxy Protocol&lt;/code&gt; 설명: &lt;a href=&quot;https://docs.aws.amazon.com/ko_kr/elasticloadbalancing/latest/network/load-balancer-target-groups.html#proxy-protocol&quot;&gt;https://docs.aws.amazon.com/ko_kr/elasticloadbalancing/latest/network/load-balancer-target-groups.html#proxy-protocol&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Nginx Documentation:&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;ngx_http_realip_module&lt;/code&gt; (&lt;code class=&quot;highlighter-rouge&quot;&gt;set_real_ip_from&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;real_ip_header&lt;/code&gt;): &lt;a href=&quot;http://nginx.org/en/docs/http/ngx_http_realip_module.html&quot;&gt;http://nginx.org/en/docs/http/ngx_http_realip_module.html&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;listen&lt;/code&gt; 지시어 (&lt;code class=&quot;highlighter-rouge&quot;&gt;proxy_protocol&lt;/code&gt; 파라미터): &lt;a href=&quot;http://nginx.org/en/docs/http/ngx_http_core_module.html#listen&quot;&gt;http://nginx.org/en/docs/http/ngx_http_core_module.html#listen&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;</content><author><name></name></author><category term="aws" /><category term="nlb" /><category term="nginx" /><summary type="html">Proxy Protocol 설정으로 client ip 가져오기</summary></entry><entry><title type="html">김프봇 제작하기</title><link href="https://lahuman.github.io/kimpbot/" rel="alternate" type="text/html" title="김프봇 제작하기" /><published>2025-01-30T00:00:00+00:00</published><updated>2025-01-30T00:00:00+00:00</updated><id>https://lahuman.github.io/kimpbot</id><content type="html" xml:base="https://lahuman.github.io/kimpbot/">&lt;h1 id=&quot;김치-프리미엄-알리미-봇--웹-서비스&quot;&gt;김치 프리미엄 알리미 봇 &amp;amp; 웹 서비스&lt;/h1&gt;

&lt;h1 id=&quot;바로가기&quot;&gt;&lt;a href=&quot;https://kimpbot.duckdns.org/&quot;&gt;바로가기&lt;/a&gt;&lt;/h1&gt;

&lt;h2 id=&quot;소개&quot;&gt;소개&lt;/h2&gt;

&lt;p&gt;이 프로젝트는 실시간으로 USDT, USD 가격 정보를 가져와 김치 프리미엄을 계산하고, 이를 사용자에게 보여주는 텔레그램 봇 및 웹 서비스입니다. 사용자는 봇을 통해 실시간 가격 정보를 확인하고, 특정 가격 변동에 대한 알림을 설정할 수 있습니다. 웹 서비스는 현재 가격 정보와 함께 시각적인 인터페이스를 제공합니다.&lt;/p&gt;

&lt;h2 id=&quot;기능&quot;&gt;기능&lt;/h2&gt;

&lt;h3 id=&quot;텔레그램-봇-기능&quot;&gt;텔레그램 봇 기능&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;/start&lt;/code&gt;&lt;/strong&gt;: 봇 시작 및 사용 안내 메시지 출력&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;/show&lt;/code&gt;&lt;/strong&gt;: 실시간 USDT, USD 가격 정보 및 김치 프리미엄 표시&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;/event&lt;/code&gt;&lt;/strong&gt;: USDT, USD, 김프(김치 프리미엄) 알림 설정 메뉴 제공
    &lt;ul&gt;
      &lt;li&gt;&lt;strong&gt;USDT 알림&lt;/strong&gt;: 특정 USDT 가격 이상/이하 시 알림 설정&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;USD 알림&lt;/strong&gt;: 특정 USD 가격 이상/이하 시 알림 설정&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;김프 알림&lt;/strong&gt;: 특정 김프 이상/이하 시 알림 설정&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;/list&lt;/code&gt;&lt;/strong&gt;: 설정된 알림 목록 표시 및 삭제 기능 제공&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;/web&lt;/code&gt;&lt;/strong&gt;: 웹 서비스 링크 제공 및 버튼 생성&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;실시간 알림&lt;/strong&gt;: 설정된 가격 조건에 부합하는 경우 3시간 간격으로 텔레그램 메시지 발송&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;웹-서비스-기능&quot;&gt;웹 서비스 기능&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;실시간 USDT/USD 가격 정보 및 김치 프리미엄 표시&lt;/li&gt;
  &lt;li&gt;전일 최고/최저 가격 정보 제공&lt;/li&gt;
  &lt;li&gt;5초마다 자동으로 최신 정보 갱신&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;기술-스택&quot;&gt;기술 스택&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Backend&lt;/strong&gt;: Kotlin, Spring Boot&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Database&lt;/strong&gt;: SQLite&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Telegram Bot&lt;/strong&gt;: KT-GRAM (Kotlin Telegram Bot Framework)&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Frontend&lt;/strong&gt;: HTML, CSS, Tailwind CSS&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;REST Client&lt;/strong&gt;: Spring RestClient&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Scheduling&lt;/strong&gt;: Spring Scheduling&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;프로젝트-구조&quot;&gt;프로젝트 구조&lt;/h2&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;├── src
│ ├── main
│ │ ├── kotlin
│ │ │ └── lahuman
│ │ │ └── kimpre
│ │ │ ├── bot
│ │ │ │ └── BotComponent.kt (텔레그램 봇 로직)
│ │ │ ├── config
│ │ │ │ ├── BotConfig.kt (텔레그램 봇 설정)
│ │ │ │ └── RestClientConfig.kt (Rest Client 설정)
│ │ │ ├── controller
│ │ │ │ └── PriceController.kt (가격 정보 API)
│ │ │ ├── dto
│ │ │ │ ├── BithumbMarketResponse.kt (빗썸 API 응답 DTO)
│ │ │ │ ├── NaverExchangeRate4USDResponse.kt (네이버 환율 API 응답 DTO)
│ │ │ │ ├── RequestPriceHistory.kt (가격 이력 저장 요청 DTO)
│ │ │ │ ├── RequestPriceInfo.kt (가격 정보 요청 DTO)
│ │ │ │ └── ResponsePriceInfo.kt (가격 정보 응답 DTO)
│ │ │ ├── entity
│ │ │ │ ├── BaseTimeEntity.kt (생성/수정 시간 추상 엔티티)
│ │ │ │ ├── HistoryPk.kt (가격 이력 복합 키)
│ │ │ │ ├── PriceHistory.kt (가격 이력 엔티티)
│ │ │ │ ├── PriceInfo.kt (가격 정보 엔티티)
│ │ │ │ ├── PricePk.kt (가격 정보 복합 키)
│ │ │ │ └── TelegramAlarm.kt (텔레그램 알림 엔티티)
│ │ │ ├── repository
│ │ │ │ ├── PriceHistoryRepository.kt (가격 이력 레포지토리)
│ │ │ │ ├── PriceInfoRepository.kt (가격 정보 레포지토리)
│ │ │ │ └── TelegramAlarmRepository.kt (텔레그램 알림 레포지토리)
│ │ │ ├── schedule
│ │ │ │ └── PriceCrawling.kt (가격 정보 크롤링 및 알림 스케줄러)
│ │ │ ├── service
│ │ │ │ ├── PriceService.kt (가격 정보 서비스)
│ │ │ │ └── TelegramAlarmService.kt (텔레그램 알림 서비스)
│ │ │ └── utils
│ │ │ ├── DateUtils.kt (날짜 유틸리티)
│ │ │ └── UseYn.kt (사용 여부 Enum)
│ │ ├── resources
│ │ │ ├── application.yaml (Spring Boot 설정 파일)
│ │ │ └── static
│ │ │ ├── index.html (웹 서비스 HTML 파일)
│ │ │ └── tm.png (텔레그램 봇 QR 코드 이미지)
│ ├── test
│ │ └── kotlin
│ │ └── lahuman
│ │ └── kimpre
│ │ └── KimchiPremiumApplicationTests.kt (테스트 클래스)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;실행-방법&quot;&gt;실행 방법&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;프로젝트를 로컬로 클론합니다.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;src/main/resources/application.yaml&lt;/code&gt; 파일에서 데이터베이스 설정 및 텔레그램 봇 토큰을 확인합니다.&lt;/li&gt;
  &lt;li&gt;IntelliJ IDEA와 같은 IDE를 사용하여 프로젝트를 실행하거나, Gradle을 사용하여 빌드하고 실행합니다.
    &lt;ul&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;./gradlew bootRun&lt;/code&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;텔레그램 봇을 시작하고 &lt;code class=&quot;highlighter-rouge&quot;&gt;/start&lt;/code&gt; 명령어를 입력하여 봇을 사용할 수 있습니다.&lt;/li&gt;
  &lt;li&gt;웹 브라우저에서 &lt;code class=&quot;highlighter-rouge&quot;&gt;http://localhost:8080&lt;/code&gt; 주소를 입력하여 웹 서비스에 접속합니다.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;추가-정보&quot;&gt;추가 정보&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;외부 API&lt;/strong&gt;:
    &lt;ul&gt;
      &lt;li&gt;&lt;strong&gt;Bithumb API&lt;/strong&gt;: 실시간 USDT 가격 정보 제공&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;Naver API&lt;/strong&gt;: 실시간 USD 환율 정보 제공&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;데이터베이스&lt;/strong&gt;: SQLite를 사용하여 가격 정보 및 알림 설정 저장&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;스케줄링&lt;/strong&gt;: Spring Scheduling을 사용하여 5초마다 가격 정보 크롤링 및 알림 전송&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;테스트&lt;/strong&gt;: JUnit을 사용하여 기본적인 테스트 코드 작성&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;개선-사항&quot;&gt;개선 사항&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;데이터베이스에 사용자 알림 저장 및 관리&lt;/li&gt;
  &lt;li&gt;다양한 코인 가격 지원&lt;/li&gt;
  &lt;li&gt;웹 서비스 디자인 개선&lt;/li&gt;
  &lt;li&gt;테스트 코드 확장&lt;/li&gt;
&lt;/ul&gt;</content><author><name></name></author><category term="usdt" /><category term="usd" /><category term="kimp" /><summary type="html">핫한 코인, 김프봇 제작기</summary></entry><entry><title type="html">2024년 회고</title><link href="https://lahuman.github.io/20241220/" rel="alternate" type="text/html" title="2024년 회고" /><published>2024-12-20T00:00:00+00:00</published><updated>2024-12-20T00:00:00+00:00</updated><id>https://lahuman.github.io/20241220</id><content type="html" xml:base="https://lahuman.github.io/20241220/">&lt;h1 id=&quot;2024년을-되돌아-보며&quot;&gt;2024년을 되돌아 보며,&lt;/h1&gt;

&lt;blockquote&gt;
  &lt;p&gt;“성공이란 열정을 잃지 않고 실패를 거듭할 수 있는 능력이다.” - 윈스턴 처칠&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;다사-다난한-한해&quot;&gt;다사 다난한 한해&lt;/h2&gt;

&lt;p&gt;회사 생활에 많은(?) 변화가 있었습니다.&lt;/p&gt;

&lt;p&gt;일을 하며 답답함을 넘어서 좌절을 하게 되는 상황이 많이 발생하네요.&lt;/p&gt;

&lt;p&gt;그래도 나아가야 한다고 생각하고 열심히 나아가고 있습니다.&lt;/p&gt;

&lt;h2 id=&quot;강남-생활-끝-당산-생활-시작&quot;&gt;강남 생활 끝, 당산 생활 시작&lt;/h2&gt;

&lt;p&gt;거의 3년간 출퇴근 하던 강남에서 당산으로 근무지가 변경되었습니다.&lt;/p&gt;

&lt;p&gt;좋은건 출/퇴근 시간이 총 40분이 줄어들었네요.&lt;/p&gt;

&lt;h2 id=&quot;마지막으로&quot;&gt;마지막으로&lt;/h2&gt;

&lt;p&gt;25년은 뭔가 많은 시도를 해봐야겠습니다.&lt;/p&gt;

&lt;p&gt;24년은 뭔가 아쉽네요. :(&lt;/p&gt;</content><author><name></name></author><category term="2024" /><category term="review" /><summary type="html">2보 전진을 위한 1보 후퇴를 했는데, 계속 후퇴 중?</summary></entry><entry><title type="html">Care Mate PoC 개발</title><link href="https://lahuman.github.io/care_mate/" rel="alternate" type="text/html" title="Care Mate PoC 개발" /><published>2024-11-13T00:00:00+00:00</published><updated>2024-11-13T00:00:00+00:00</updated><id>https://lahuman.github.io/care_mate</id><content type="html" xml:base="https://lahuman.github.io/care_mate/">&lt;h1 id=&quot;주변-돌발-교통-상황-정보-제공-poc&quot;&gt;주변 돌발 교통 상황 정보 제공 PoC&lt;/h1&gt;

&lt;p&gt;회사에서 진행하는 러닝크루(학습 크루) 에서 동료를 모아 &lt;a href=&quot;https://www.mycaremate.co.kr/&quot;&gt;Care Mate&lt;/a&gt;라는 프로젝트를 진행했습니다.&lt;/p&gt;

&lt;p&gt;프로젝트의 초기 PoC 단계를 빠르게 구현해보았습니다.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/lahuman/traffic-alert&quot;&gt;프로젝트 바로 가기&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://t-a.duckdns.org/&quot;&gt;데모사이트 바로 가기&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;개요&quot;&gt;개요&lt;/h2&gt;

&lt;p&gt;이 프로젝트는 사용자가 지정한 위치 근처의 교통 사고에 대한 알림을 제공하기 위해 설계되었습니다. 시스템은 외부 소스로부터 교통 사고 데이터를 가져와 이를 처리하고, 지리 공간 데이터를 지원하는 PostGIS 확장 기능을 사용하는 PostgreSQL 데이터베이스에 저장합니다. 서버는 이 데이터를 API를 통해 제공하며, 사용자는 근처의 사고를 조회할 수 있습니다.&lt;/p&gt;

&lt;h2 id=&quot;주요-기능&quot;&gt;주요 기능&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;실시간 교통 사고 데이터&lt;/strong&gt;: 시스템은 외부 소스로부터 5분마다 교통 사고 데이터를 가져옵니다.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;지리 공간 데이터 처리&lt;/strong&gt;: PostGIS 확장 기능을 사용하는 PostgreSQL을 활용하여 지리 공간 데이터를 저장하고, 근접 기반 검색을 효율적으로 수행할 수 있습니다.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;보안된 API 접근&lt;/strong&gt;: API는 헤더에 &lt;code class=&quot;highlighter-rouge&quot;&gt;authkey&lt;/code&gt;를 요구하며, 이를 통해 인증된 사용자만 교통 데이터를 조회할 수 있습니다.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;도커 기반 설정&lt;/strong&gt;: PostgreSQL과 PostGIS는 Docker를 이용해 컨테이너화되어 있어 배포와 관리가 용이합니다.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;PM2 프로세스 관리&lt;/strong&gt;: 서버와 스케줄링 작업은 PM2로 관리되어 신뢰성 있는 작동과 모니터링이 가능합니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;시스템-구조&quot;&gt;시스템 구조&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Docker&lt;/strong&gt;: PostgreSQL과 PostGIS는 Docker 컨테이너에서 실행되어 일관된 격리 환경을 유지합니다.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Node.js&lt;/strong&gt;: 애플리케이션 백엔드는 Node.js와 Express로 구축되었습니다.
    &lt;ul&gt;
      &lt;li&gt;&lt;strong&gt;index.js&lt;/strong&gt;: 근접 기반의 교통 사고 데이터를 제공하는 API 요청을 처리합니다.&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;schedule.js&lt;/strong&gt;: 5분마다 교통 데이터를 가져와 데이터베이스를 갱신합니다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;PM2&lt;/strong&gt;: Node.js 프로세스를 관리하여 서버(&lt;code class=&quot;highlighter-rouge&quot;&gt;index.js&lt;/code&gt;)와 스케줄러(&lt;code class=&quot;highlighter-rouge&quot;&gt;schedule.js&lt;/code&gt;)가 항상 실행되도록 하고, 장애 발생 시 자동으로 재시작합니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;사전-준비-사항&quot;&gt;사전 준비 사항&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Docker&lt;/li&gt;
  &lt;li&gt;Node.js&lt;/li&gt;
  &lt;li&gt;PM2&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;설정-및-설치&quot;&gt;설정 및 설치&lt;/h2&gt;

&lt;h3 id=&quot;1-저장소-클론&quot;&gt;1. 저장소 클론&lt;/h3&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git clone https://github.com/lahuman/traffic-alert.git
&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;traffic-alert
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;2-환경-변수-설정&quot;&gt;2. 환경 변수 설정&lt;/h3&gt;

&lt;p&gt;프로젝트 루트 디렉토리에 &lt;code class=&quot;highlighter-rouge&quot;&gt;_env&lt;/code&gt;를 &lt;code class=&quot;highlighter-rouge&quot;&gt;.env&lt;/code&gt; 파일로 변경하고 다음 변수를 추가합니다:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;DB_HOST&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;your_postgres_host
&lt;span class=&quot;nv&quot;&gt;DB_PORT&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;your_postgres_port
&lt;span class=&quot;nv&quot;&gt;DB_DB&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;your_database_name
&lt;span class=&quot;nv&quot;&gt;DB_USER&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;your_database_user
&lt;span class=&quot;nv&quot;&gt;DB_PW&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;your_database_password
&lt;span class=&quot;nv&quot;&gt;TRAFFIC_TOKEN&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;your_traffic_api_token
&lt;span class=&quot;nv&quot;&gt;WALK_TOKEN&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;your_walk_api_token
&lt;span class=&quot;nv&quot;&gt;AUTH_KEY&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;your_api_token
&lt;span class=&quot;c&quot;&gt;# 반경 M 조회 기준&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;WALK_RADIUS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;50
&lt;span class=&quot;nv&quot;&gt;TRAFFIC_RADIUS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;500
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;3-docker를-이용한-postgresql과-postgis-시작&quot;&gt;3. Docker를 이용한 PostgreSQL과 PostGIS 시작&lt;/h3&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;docker run &lt;span class=&quot;nt&quot;&gt;--name&lt;/span&gt; some-postgis &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; 5432:5432 &lt;span class=&quot;nt&quot;&gt;-e&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;POSTGRES_PASSWORD&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;mysecretpassword &lt;span class=&quot;nt&quot;&gt;-d&lt;/span&gt; postgis/postgis
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;이 명령어는 PostgreSQL과 PostGIS 컨테이너를 시작합니다.&lt;/p&gt;

&lt;h3 id=&quot;4-nodejs-의존성-설치&quot;&gt;4. Node.js 의존성 설치&lt;/h3&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;npm install
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;5-데이터베이스-초기화&quot;&gt;5. 데이터베이스 초기화&lt;/h3&gt;

&lt;p&gt;PostgreSQL 컨테이너에 접속하여 PostGIS 확장을 초기화합니다&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;/data/initial.sql&lt;/code&gt; 의 SQL을 실행해서 초기 테이블 구성 및 데이터를 적재합니다.&lt;/p&gt;

&lt;h3 id=&quot;6-애플리케이션-시작&quot;&gt;6. 애플리케이션 시작&lt;/h3&gt;

&lt;p&gt;PM2를 사용하여 서버와 스케줄러를 시작합니다:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;pm2 start &lt;span class=&quot;s2&quot;&gt;&quot;npm run start&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--name&lt;/span&gt; traffic-server
pm2 start &lt;span class=&quot;s2&quot;&gt;&quot;npm run t-schedule&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--name&lt;/span&gt; traffic-scheduler &lt;span class=&quot;nt&quot;&gt;--cron&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;*/5 * * * *&quot;&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# 1회만 실행&lt;/span&gt;
npm run w-schedule
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;이 명령은 다음을 시작합니다:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;index.js&lt;/code&gt;: API 요청을 처리하는 서버.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;schedule.js&lt;/code&gt;: 5분마다 교통 데이터를 가져와 갱신하는 스크립트.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;7-애플리케이션-모니터링-및-관리&quot;&gt;7. 애플리케이션 모니터링 및 관리&lt;/h3&gt;

&lt;p&gt;PM2를 사용하여 프로세스를 모니터링하고 관리할 수 있습니다:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;pm2 list
pm2 logs
pm2 restart traffic-server
pm2 restart traffic-scheduler
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;사용법&quot;&gt;사용법&lt;/h2&gt;

&lt;h3 id=&quot;api-엔드포인트&quot;&gt;API 엔드포인트&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;GET /traffic-alert?lat={latitude}&amp;amp;lon={longitude}&lt;/strong&gt;&lt;/p&gt;

    &lt;p&gt;이 엔드포인트는 지정된 위도와 경도 근처의 교통 사고를 반환합니다.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;도로-돌발-상황&quot;&gt;도로 돌발 상황&lt;/h3&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;curl &lt;span class=&quot;nt&quot;&gt;-X&lt;/span&gt; GET &lt;span class=&quot;s2&quot;&gt;&quot;http://localhost:3000/traffic-alert?lat=37.4959854&amp;amp;lon=126.8879636&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-H&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;authkey: AUTH_KEY&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;응답-예제&quot;&gt;응답 예제&lt;/h4&gt;

&lt;div class=&quot;language-json highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;id&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;incident_123&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;address&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Guro-gu, Seoul&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;title&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Traffic accident on the main road&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;type_cd&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;accident&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;sub_cd&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;collision&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;latitude&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;37.4959854&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;longitude&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;126.8879636&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;start_dtm&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;2023-09-01 10:00&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;end_dtm&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;2023-09-01 12:00&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;update_dtm&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;2023-09-01 10:05&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;보행자-사고-다발-지역&quot;&gt;보행자 사고 다발 지역&lt;/h3&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;curl &lt;span class=&quot;nt&quot;&gt;-X&lt;/span&gt; GET &lt;span class=&quot;s2&quot;&gt;&quot;http://localhost:3000/traffic-alert?lat=37.4959854&amp;amp;lon=126.8879636&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-H&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;authkey: AUTH_KEY&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;응답-예제-1&quot;&gt;응답 예제&lt;/h4&gt;

&lt;div class=&quot;language-json highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;distance&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;id&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;6779261&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;address&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;서울특별시 강남구 청담동(강남구청역사거리 부근)&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;year&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;2021&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;occxrrnc_cnt&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;latitude&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;37.517132005639&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;longitude&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;127.040862919289&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;reg_dtm&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;2024-09-02T21:11:22.537Z&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;지도로-확인하는-특별-교통-정보&quot;&gt;지도로 확인하는 특별 교통 정보&lt;/h3&gt;

&lt;p&gt;API 서버 실행 후, &lt;code class=&quot;highlighter-rouge&quot;&gt;http://localhost:3000/map&lt;/code&gt; 으로 접근하면 아래와 같은 지도를 확인 할 수 있습니다&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/screenshot.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;지도 중심에서 5KM 반경으로 특별 교통 정보를 표기 합니다. 반경은 원으로 표기 하여 알 수 있게 합니다.&lt;/p&gt;

&lt;h2 id=&quot;데모-사이트-접근&quot;&gt;데모 사이트 접근&lt;/h2&gt;

&lt;p&gt;https://t-a.duckdns.org/&lt;/p&gt;

&lt;h2 id=&quot;기여하기&quot;&gt;기여하기&lt;/h2&gt;

&lt;p&gt;이 프로젝트에 기여하고 싶다면, 저장소를 포크한 후 풀 리퀘스트를 제출해주세요. 모든 기여를 환영합니다!&lt;/p&gt;

&lt;h2 id=&quot;라이선스&quot;&gt;라이선스&lt;/h2&gt;

&lt;p&gt;이 프로젝트는 MIT 라이선스로 라이선스가 부여되어 있습니다.&lt;/p&gt;

&lt;h2 id=&quot;참고-자료&quot;&gt;참고 자료&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.utic.go.kr/map/map.do?menu=incident&amp;amp;x=127.028&amp;amp;y=37.263&quot;&gt;도시교통정보센터-돌발정보&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://opendata.koroad.or.kr/api/selectPedstriansDataSet.do&quot;&gt;보행자 사고다발지역 API&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://registry.hub.docker.com/r/postgis/postgis/&quot;&gt;docker-postgis&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/mratanusarkar/NodeJS-ProgressBar&quot;&gt;NodeJS-ProgressBar&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.openstreetmap.org/&quot;&gt;openstreetmap&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://project-osrm.org/&quot;&gt;OSRM&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.data.go.kr/data/15111389/fileData.do?recommendDataYn=Y&quot;&gt;한국문화정보원_전국 반려동물 동반 가능 문화시설 위치 데이터&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name></name></author><category term="caremate" /><category term="poc" /><summary type="html">돌발 교통 상황, CCTV, 반려견 동반 위치 정보</summary></entry><entry><title type="html">오모오모 서비스 종료</title><link href="https://lahuman.github.io/EOS_OMOOMO/" rel="alternate" type="text/html" title="오모오모 서비스 종료" /><published>2024-11-11T00:00:00+00:00</published><updated>2024-11-11T00:00:00+00:00</updated><id>https://lahuman.github.io/EOS_OMOOMO</id><content type="html" xml:base="https://lahuman.github.io/EOS_OMOOMO/">&lt;h1 id=&quot;20241031-오모오모-서비스-종료&quot;&gt;2024.10.31 오모오모 서비스 종료&lt;/h1&gt;

&lt;h2 id=&quot;이력&quot;&gt;이력&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;서비스 기간 : 2022.11.28 ~ 2024.10.31&lt;/li&gt;
  &lt;li&gt;오모오모 하우스 운영(팝업스토어) : 2023.11.24 ~ 2023.12.02&lt;/li&gt;
  &lt;li&gt;이벤트 : 크리스마스, 새해, 추석, 사진 공모전, 네이밍 공모전 등 20여 차례 진행&lt;/li&gt;
  &lt;li&gt;구글 플레이 스토어 1위 : 2022.12.17&lt;/li&gt;
  &lt;li&gt;최종 누적 회원 수 : 20만명(2024.10.31)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;회고&quot;&gt;회고&lt;/h2&gt;

&lt;p&gt;오픈 당시에는 삼성화재에서 이런 서비스를 만들었다고 많은 관심을 받았지만, 컨텐츠 부족으로 인기가 쉽게 시들해졌습니다.&lt;/p&gt;

&lt;p&gt;23년 5월 부족한 컨텐츠를 채우기 위해 웹 기반의 게시판과 상품 판매 그리고 메타 버스 기반의 펫 상품 판매 샵 추가  및 게임 추가하는 등의 대대적인 업데이트를 단행 했습니다.&lt;/p&gt;

&lt;p&gt;오모오모를 사용하는 주요 고객인 10대가 할 수 있는 컨텐츠 보다, 보험 연계 그리고 펫 상품 판매에 집중한 기획 결과는 많이 아쉬운 성적표와 함께 사용자가 점점 줄어들게 되었고,&lt;/p&gt;

&lt;p&gt;결국 오모오모 서비스 종료와 함께 &lt;a href=&quot;https://www.seoulfn.com/news/articleView.html?idxno=535764&quot;&gt;삼성화재, 펫 건강관리 서비스 리뉴얼 선봬&lt;/a&gt; 게 되었습니다.&lt;/p&gt;

&lt;p&gt;24년은 착한 펫 서비스 리뉴얼을 하면서 보냈습니다. 
오모오모를 떠나 보내는 마음은 아쉽고 안타깝웠습니다.&lt;/p&gt;

&lt;h2 id=&quot;스냅샷&quot;&gt;스냅샷&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/post_img/omoomo_end.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;20241031-마지막-모습&quot;&gt;2024.10.31 마지막 모습&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/post_img/omoomo_1.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/post_img/omoomo_2.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/post_img/omoomo_3.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/post_img/omoomo_4.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;</content><author><name></name></author><category term="omoomo" /><category term="EOS" /><summary type="html">2년 6개월간의 서비스 실패기</summary></entry><entry><title type="html">AWS Lambda에서 oracle 에 접근하기 위한 python layer 만들기!</title><link href="https://lahuman.github.io/aws_lambda_oracledb_layer/" rel="alternate" type="text/html" title="AWS Lambda에서 oracle 에 접근하기 위한 python layer 만들기!" /><published>2024-09-27T00:00:00+00:00</published><updated>2024-09-27T00:00:00+00:00</updated><id>https://lahuman.github.io/aws_lambda_oracledb_layer</id><content type="html" xml:base="https://lahuman.github.io/aws_lambda_oracledb_layer/">&lt;h1 id=&quot;aws-lambda에서-oracle에-접근하기-위한-python-layer-만들기&quot;&gt;AWS Lambda에서 Oracle에 접근하기 위한 Python Layer 만들기&lt;/h1&gt;

&lt;p&gt;AWS Lambda 함수에서 Oracle 데이터베이스에 접근하려면 &lt;code class=&quot;highlighter-rouge&quot;&gt;oracledb&lt;/code&gt; 모듈을 사용해야 합니다. 하지만 이 모듈을 Lambda에서 사용하기 위해서는 Layer를 만들어야 합니다. 이번 포스팅에서는 AWS Lambda에서 Oracle에 접근하기 위한 Python Layer를 만드는 방법과 발생할 수 있는 오류 및 해결 방법을 소개합니다.&lt;/p&gt;

&lt;h2 id=&quot;문제-상황&quot;&gt;문제 상황&lt;/h2&gt;

&lt;p&gt;AWS Lambda 함수에서 &lt;code class=&quot;highlighter-rouge&quot;&gt;oracledb&lt;/code&gt; 모듈을 사용하기 위해 Layer를 생성하고 함수를 실행했을 때, 다음과 같은 오류가 발생했습니다.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;ERROR] Runtime.ImportModuleError: Unable to import module &lt;span class=&quot;s1&quot;&gt;'lambda_function'&lt;/span&gt;: cannot import name &lt;span class=&quot;s1&quot;&gt;'base_impl'&lt;/span&gt; from partially initialized module &lt;span class=&quot;s1&quot;&gt;'oracledb'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;most likely due to a circular import&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;/opt/python/lib/python3.11/site-packages/oracledb/__init__.py&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
Traceback &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;most recent call last&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;:INIT_REPORT Init Duration: 93.00 ms	Phase: init	Status: error	Error Type: Runtime.Unknown
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;ERROR] Runtime.ImportModuleError: Unable to import module &lt;span class=&quot;s1&quot;&gt;'lambda_function'&lt;/span&gt;: cannot import name &lt;span class=&quot;s1&quot;&gt;'base_impl'&lt;/span&gt; from partially initialized module &lt;span class=&quot;s1&quot;&gt;'oracledb'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;most likely due to a circular import&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;/opt/python/lib/python3.11/site-packages/oracledb/__init__.py&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
Traceback &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;most recent call last&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;:INIT_REPORT Init Duration: 1363.42 ms	Phase: invoke	Status: error	Error Type: Runtime.Unknown
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;오류의 원인은 레이어에 가상 환경을 구성하는 pip 와 같은 모듈이 섞여 발생하는 문제였습니다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;layer-생성-방법&quot;&gt;Layer 생성 방법&lt;/h2&gt;

&lt;p&gt;AWS Lambda에서 Python 함수용 Layer를 생성하기 위해 AWS 공식 문서인 &lt;a href=&quot;https://docs.aws.amazon.com/ko_kr/lambda/latest/dg/python-layers.html&quot;&gt;Python Lambda 함수를 위한 계층 작업&lt;/a&gt;을 참고하여 다음과 같이 Layer를 생성했습니다.&lt;/p&gt;

&lt;h3 id=&quot;1-가상-환경-생성-및-패키지-설치&quot;&gt;1. 가상 환경 생성 및 패키지 설치&lt;/h3&gt;

&lt;p&gt;먼저, Python 3.11 버전의 가상 환경을 생성하고 필요한 패키지를 설치합니다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;requirements.txt&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;oracledb
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;1-install.sh&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;python3.11 &lt;span class=&quot;nt&quot;&gt;-m&lt;/span&gt; venv create_layer
&lt;span class=&quot;nb&quot;&gt;source &lt;/span&gt;create_layer/bin/activate
pip install &lt;span class=&quot;nt&quot;&gt;-r&lt;/span&gt; requirements.txt &lt;span class=&quot;nt&quot;&gt;--platform&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;manylinux2014_x86_64 &lt;span class=&quot;nt&quot;&gt;--only-binary&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;:all: &lt;span class=&quot;nt&quot;&gt;--target&lt;/span&gt; ./create_layer/lib/python3.11/site-packages
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;2-layer-패키징&quot;&gt;2. Layer 패키징&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;2-package.sh&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;mkdir python
cp &lt;span class=&quot;nt&quot;&gt;-r&lt;/span&gt; create_layer/lib python/
zip &lt;span class=&quot;nt&quot;&gt;-r&lt;/span&gt; layer_content.zip python
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;lambda-함수-코드&quot;&gt;Lambda 함수 코드&lt;/h2&gt;

&lt;p&gt;Lambda 함수에서는 &lt;code class=&quot;highlighter-rouge&quot;&gt;oracledb&lt;/code&gt; 모듈을 임포트하여 사용합니다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;lambda_function.py&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;lambda_handler&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;oracledb&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Successfully imported oracledb&quot;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;except&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Exception&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;오류-발생&quot;&gt;오류 발생&lt;/h2&gt;

&lt;p&gt;위와 같이 Layer를 생성하고 Lambda 함수를 실행했을 때, 앞서 언급한 오류가 발생했습니다.&lt;/p&gt;

&lt;h2 id=&quot;원인-분석&quot;&gt;원인 분석&lt;/h2&gt;

&lt;p&gt;오류 메시지를 보면 &lt;code class=&quot;highlighter-rouge&quot;&gt;oracledb&lt;/code&gt; 모듈에서 &lt;code class=&quot;highlighter-rouge&quot;&gt;base_impl&lt;/code&gt;을 임포트할 수 없다는 내용과 순환 임포트(circular import)가 원인일 수 있다는 힌트를 제공합니다.&lt;/p&gt;

&lt;p&gt;Layer를 생성할 때 가상 환경을 생성하면서 기본적으로 설치되는 &lt;code class=&quot;highlighter-rouge&quot;&gt;pip&lt;/code&gt; 등의 모듈이 함께 포함되어 &lt;code class=&quot;highlighter-rouge&quot;&gt;oracledb&lt;/code&gt; 모듈과 충돌이 발생한 것입니다.&lt;/p&gt;

&lt;h2 id=&quot;해결-방법&quot;&gt;해결 방법&lt;/h2&gt;

&lt;p&gt;가상 환경에서 기본적으로 생성되는 불필요한 모듈들을 제외하고, 필요한 패키지만 Layer에 포함하도록 스크립트를 수정했습니다.&lt;/p&gt;

&lt;h3 id=&quot;수정된-layer-생성-스크립트&quot;&gt;수정된 Layer 생성 스크립트&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;1-install.sh&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;python3.11 &lt;span class=&quot;nt&quot;&gt;-m&lt;/span&gt; venv create_layer
&lt;span class=&quot;nb&quot;&gt;source &lt;/span&gt;create_layer/bin/activate
pip install &lt;span class=&quot;nt&quot;&gt;-r&lt;/span&gt; requirements.txt &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;--platform&lt;/span&gt; manylinux2014_x86_64 &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;--target&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;./src &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;--implementation&lt;/span&gt; cp &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;--python-version&lt;/span&gt; 3.11 &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;--only-binary&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;:all: 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;--target=./src&lt;/code&gt; 옵션을 사용하여 필요한 패키지만 &lt;code class=&quot;highlighter-rouge&quot;&gt;src&lt;/code&gt; 디렉토리에 설치합니다.&lt;/li&gt;
  &lt;li&gt;가상 환경의 기본 모듈들과 분리하여 충돌을 방지합니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;2-package.sh&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;mkdir -p python/lib/python3.11/site-packages
cp -r src/ python/lib/python3.11/site-packages/
zip -r layer_content.zip python
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;src&lt;/code&gt; 디렉토리에 설치된 패키지들을 Layer의 &lt;code class=&quot;highlighter-rouge&quot;&gt;site-packages&lt;/code&gt; 디렉토리로 복사합니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;결과-확인&quot;&gt;결과 확인&lt;/h2&gt;

&lt;p&gt;수정된 Layer를 적용하여 Lambda 함수를 실행하면 &lt;code class=&quot;highlighter-rouge&quot;&gt;oracledb&lt;/code&gt; 모듈이 성공적으로 임포트됩니다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&quot;Successfully imported oracledb&quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;결론&quot;&gt;결론&lt;/h2&gt;

&lt;p&gt;AWS Lambda에서 Oracle에 접근하기 위한 Python Layer를 생성할 때, 가상 환경의 기본 모듈들과의 충돌로 인해 발생하는 오류를 해결하기 위해 필요한 패키지만 Layer에 포함시켰습니다. 이를 통해 &lt;code class=&quot;highlighter-rouge&quot;&gt;oracledb&lt;/code&gt; 모듈을 성공적으로 임포트하고 Oracle 데이터베이스에 접근할 수 있었습니다.&lt;/p&gt;

&lt;h2 id=&quot;참고-자료&quot;&gt;참고 자료&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.aws.amazon.com/ko_kr/lambda/latest/dg/python-layers.html&quot;&gt;Python Lambda 함수를 위한 계층 작업&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name></name></author><category term="python" /><category term="aws" /><category term="layer" /><summary type="html">python layer 만들기 삽질기</summary></entry><entry><title type="html">Spring Session에서 특정 API에 대해 세션 생성 방지하기</title><link href="https://lahuman.github.io/redis_session_ignore_path/" rel="alternate" type="text/html" title="Spring Session에서 특정 API에 대해 세션 생성 방지하기" /><published>2024-09-26T00:00:00+00:00</published><updated>2024-09-26T00:00:00+00:00</updated><id>https://lahuman.github.io/redis_session_ignore_path</id><content type="html" xml:base="https://lahuman.github.io/redis_session_ignore_path/">&lt;h1 id=&quot;spring-session에서-특정-api에-대해-세션-생성-방지하기&quot;&gt;Spring Session에서 특정 API에 대해 세션 생성 방지하기&lt;/h1&gt;

&lt;p&gt;Spring 애플리케이션에서 &lt;code class=&quot;highlighter-rouge&quot;&gt;/health&lt;/code&gt; 같은 특정 API 호출 시 불필요한 세션이 생성되지 않도록 하기 위한 방법을 정리합니다. 주로 &lt;code class=&quot;highlighter-rouge&quot;&gt;SessionRepositoryFilter&lt;/code&gt; 커스터마이징과 필터 추가를 통해 이를 해결할 수 있습니다.&lt;/p&gt;

&lt;h2 id=&quot;1-문제-상황&quot;&gt;1. 문제 상황&lt;/h2&gt;

&lt;p&gt;기본적으로 Spring은 요청이 들어올 때 세션을 자동으로 생성합니다. 그러나 &lt;code class=&quot;highlighter-rouge&quot;&gt;/health&lt;/code&gt;와 같은 단순 API에 대해 세션 생성이 불필요할 수 있습니다. 특정 URL에 대해 세션 생성을 방지하고 싶다면, 이를 명시적으로 처리해야 합니다.&lt;/p&gt;

&lt;h2 id=&quot;2-커스텀-sessionrepositoryfilter-생성&quot;&gt;2. 커스텀 &lt;code class=&quot;highlighter-rouge&quot;&gt;SessionRepositoryFilter&lt;/code&gt; 생성&lt;/h2&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;SessionRepositoryFilter&lt;/code&gt;를 확장하여, 특정 URL에 대해 세션이 생성되지 않도록 하는 필터를 작성할 수 있습니다.&lt;/p&gt;

&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.springframework.session.Session&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.springframework.session.SessionRepository&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.springframework.session.web.http.SessionRepositoryFilter&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;javax.servlet.FilterChain&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;javax.servlet.ServletException&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;javax.servlet.ServletRequest&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;javax.servlet.ServletResponse&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;javax.servlet.http.HttpServletRequest&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;CustomSessionRepositoryFilter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Session&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;(&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;sessionRepository&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SessionRepository&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;,&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;excludedUrls&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;listOf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/health&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;/actuator&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SessionRepositoryFilter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sessionRepository&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;@Throws&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ServletException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;doFilterInternal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ServletRequest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ServletResponse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;chain&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;FilterChain&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;httpRequest&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HttpServletRequest&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;path&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;httpRequest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;requestURI&lt;/span&gt;

        &lt;span class=&quot;c1&quot;&gt;// 제외할 URL에 대해 세션 생성하지 않음
&lt;/span&gt;        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;excludedUrls&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;any&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;startsWith&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;it&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;chain&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;doFilter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;doFilterInternal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;chain&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;위의 코드는 &lt;code class=&quot;highlighter-rouge&quot;&gt;/health&lt;/code&gt;나 &lt;code class=&quot;highlighter-rouge&quot;&gt;/actuator&lt;/code&gt; 경로로 들어오는 요청에 대해 세션을 생성하지 않도록 설정합니다.&lt;/p&gt;

&lt;h2 id=&quot;3-필터를-spring-bean으로-등록&quot;&gt;3. 필터를 Spring Bean으로 등록&lt;/h2&gt;

&lt;p&gt;필터를 빈으로 등록하여 특정 URL에 대한 요청에만 적용되도록 합니다.&lt;/p&gt;

&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.springframework.boot.web.servlet.FilterRegistrationBean&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.springframework.context.annotation.Bean&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.springframework.context.annotation.Configuration&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.springframework.core.Ordered&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.springframework.session.Session&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.springframework.session.SessionRepository&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.springframework.session.web.http.SessionRepositoryFilter&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;@Configuration&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;SessionFilterConfig&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;@Bean&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;sessionFilter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sessionRepository&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SessionRepository&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;*&amp;gt;):&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;FilterRegistrationBean&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SessionRepositoryFilter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;*&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;filter&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CustomSessionRepositoryFilter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sessionRepository&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;registration&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;FilterRegistrationBean&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SessionRepositoryFilter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;*&amp;gt;&amp;gt;()&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;registration&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;filter&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;filter&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;registration&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;order&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Ordered&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;HIGHEST_PRECEDENCE&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;registration&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;addUrlPatterns&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/*&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;registration&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;4-세션-생성-여부-확인&quot;&gt;4. 세션 생성 여부 확인&lt;/h2&gt;

&lt;h3 id=&quot;일반적으로-사용하는-requestsession-을-사용할-경우-getsession이-호출되어-세션이-없을-경우-새로-생성하게-됩니다&quot;&gt;일반적으로 사용하는 request.session 을 사용할 경우 getSession()이 호출되어 세션이 없을 경우 새로 생성하게 됩니다.&lt;/h3&gt;

&lt;p&gt;세션이 실제로 생성되었는지 여부를 확인하려면, &lt;code class=&quot;highlighter-rouge&quot;&gt;HttpServletRequest.getSession(false)&lt;/code&gt;를 사용하여 세션이 존재하는지 확인할 수 있습니다.&lt;/p&gt;

&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.springframework.web.bind.annotation.GetMapping&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.springframework.web.bind.annotation.RequestMapping&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.springframework.web.bind.annotation.RestController&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;javax.servlet.http.HttpServletRequest&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;@RestController&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;@RequestMapping&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/session-test&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;SessionController&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;@GetMapping&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/check&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;checkSession&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HttpServletRequest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;session&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getSession&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// 세션이 없으면 새로 생성하지 않음
&lt;/span&gt;        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;session&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;s&quot;&gt;&quot;Session not created&quot;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;s&quot;&gt;&quot;Session exists: ${session.id}&quot;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;이 코드는 &lt;code class=&quot;highlighter-rouge&quot;&gt;/session-test/check&lt;/code&gt;로 요청 시, 세션이 이미 존재하는지 여부를 확인해줍니다.&lt;/p&gt;

&lt;h2 id=&quot;5-결론&quot;&gt;5. 결론&lt;/h2&gt;

&lt;p&gt;Spring 애플리케이션에서 &lt;code class=&quot;highlighter-rouge&quot;&gt;/health&lt;/code&gt;와 같은 경로에 대한 세션 생성을 방지하기 위해서는 필터를 적절히 구성하고, 필요에 따라 Spring Security 설정을 통해 세션 생성을 제어할 수 있습니다. 이 방법을 통해 불필요한 세션 생성을 막아 애플리케이션의 성능을 향상시킬 수 있습니다.&lt;/p&gt;</content><author><name></name></author><category term="session" /><category term="redis" /><category term="spring" /><summary type="html">request.session 사용을 주의 하세요!</summary></entry><entry><title type="html">git push 시 HTTP 400 오류 발생 시 해결 방법</title><link href="https://lahuman.github.io/git_400_error/" rel="alternate" type="text/html" title="git push 시 HTTP 400 오류 발생 시 해결 방법" /><published>2024-09-08T00:00:00+00:00</published><updated>2024-09-08T00:00:00+00:00</updated><id>https://lahuman.github.io/git_400_error</id><content type="html" xml:base="https://lahuman.github.io/git_400_error/">&lt;h1 id=&quot;git-push-시-http-400-오류-발생-시-해결-방법&quot;&gt;git push 시 HTTP 400 오류 발생 시 해결 방법&lt;/h1&gt;

&lt;p&gt;git push 명령을 실행하는 도중 HTTP 400 오류가 발생할 수 있습니다. 이 문제는 종종 대용량 파일을 업로드할 때 발생하는데, Git의 기본 HTTP 포스트 버퍼 크기가 충분하지 않기 때문입니다. 이 문제를 간단히 해결하는 방법을 소개하겠습니다.&lt;/p&gt;

&lt;h2 id=&quot;문제-해결-방법&quot;&gt;문제 해결 방법&lt;/h2&gt;
&lt;p&gt;이 오류를 해결하기 위해서는 Git의 HTTP 포스트 버퍼 크기를 조정할 필요가 있습니다. 기본적으로 설정된 버퍼 크기는 큰 파일을 처리하기에 부족할 수 있기 때문에, 이를 늘려주는 것이 필요합니다.&lt;/p&gt;

&lt;p&gt;다음 명령어를 사용하여 포스트 버퍼 크기를 150MB로 증가시킬 수 있습니다&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git config &lt;span class=&quot;nt&quot;&gt;--global&lt;/span&gt; http.postBuffer 157286400
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;위 명령어는 HTTP 포스트 버퍼 크기를 150MB (157,286,400 바이트)로 설정합니다. 이를 통해 대용량 파일도 문제없이 처리할 수 있게 됩니다.&lt;/p&gt;

&lt;h2 id=&quot;참고자료&quot;&gt;참고자료&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://stackoverflow.com/questions/59282476/error-rpc-failed-curl-92-http-2-stream-0-was-not-closed-cleanly-protocol-erro&quot;&gt;error: RPC failed; curl 92 HTTP/2 stream 0 was not closed cleanly: PROTOCOL_ERROR (err 1)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name></name></author><category term="git" /><category term="error" /><summary type="html">error: RPC failed; HTTP 400 curl 22 The requested URL returned error: 400</summary></entry><entry><title type="html">Redis 기반 Spring framework Cache 고도화</title><link href="https://lahuman.github.io/redis_cache_with_ttl/" rel="alternate" type="text/html" title="Redis 기반 Spring framework Cache 고도화" /><published>2024-08-29T00:00:00+00:00</published><updated>2024-08-29T00:00:00+00:00</updated><id>https://lahuman.github.io/redis_cache_with_ttl</id><content type="html" xml:base="https://lahuman.github.io/redis_cache_with_ttl/">&lt;h1 id=&quot;redis와-spring-aop를-이용한-캐시-관리-rediscacheable로-ttl-설정하기&quot;&gt;Redis와 Spring AOP를 이용한 캐시 관리: RedisCacheable로 TTL 설정하기&lt;/h1&gt;

&lt;p&gt;애플리케이션 성능을 최적화하기 위해서는 캐시를 활용하는 것이 매우 중요합니다. 특히, Redis는 고속의 인메모리 데이터 저장소로써 Spring과 결합해 캐시를 관리하는 데 아주 유용합니다. 이번 포스팅에서는 @RedisCacheable이라는 커스텀 어노테이션을 사용하여 TTL(Time to Live)로 Redis 캐시의 생명주기를 관리하는 방법을 소개하려 합니다.&lt;/p&gt;

&lt;h2 id=&quot;1-rediscacheable-어노테이션-정의&quot;&gt;1. @RedisCacheable 어노테이션 정의&lt;/h2&gt;

&lt;p&gt;@RedisCacheable 어노테이션을 정의합니다. 이 어노테이션은 메서드에 적용되어, 메서드의 반환값을 Redis에 캐싱하도록 해줍니다. 이를 통해 반복되는 데이터 조회 작업의 부담을 줄일 수 있습니다.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@Target&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AnnotationTarget&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;FUNCTION&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@Retention&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AnnotationRetention&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;RUNTIME&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;annotation&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;RedisCacheable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;name:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;key:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;ttl:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Long&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;hasClassAndMethodNamePrefix:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Boolean&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;nd&quot;&gt;@Target&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AnnotationTarget&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;FUNCTION&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@Retention&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AnnotationRetention&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;RUNTIME&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;annotation&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;RedisCacheEvict&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;name:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Array&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;key:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;clearAll:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Boolean&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;hasClassAndMethodNamePrefix:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Boolean&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;kn&quot;&gt;package&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;com&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;samsungfire&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;chacpet&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;common&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;annotation&lt;/span&gt;

&lt;span class=&quot;nd&quot;&gt;@Target&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AnnotationTarget&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;FUNCTION&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@Retention&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AnnotationRetention&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;RUNTIME&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;annotation&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;RedisCacheEvict&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;name:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Array&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;key:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;clearAll:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Boolean&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;hasClassAndMethodNamePrefix:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Boolean&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;ul&gt;
  &lt;li&gt;name: Redis에서 사용할 캐시 이름을 지정합니다.&lt;/li&gt;
  &lt;li&gt;key: 캐시에 사용할 특정 키를 지정합니다. 메서드의 파라미터 값들을 기반으로 키가 생성됩니다.&lt;/li&gt;
  &lt;li&gt;ttl: 캐시의 유효 기간을 초 단위로 설정합니다. 기본값은 -1로, 이 경우 캐시가 만료되지 않습니다.&lt;/li&gt;
  &lt;li&gt;hasClassAndMethodNamePrefix: 캐시 키에 클래스와 메서드 이름을 포함할지 여부를 설정합니다.&lt;/li&gt;
  &lt;li&gt;clearAll: 주어진 명명 이하로 * 를 추가해서 삭제시 사용하며, key와 혼합해서 사용 가능합니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;ol&gt;
  &lt;li&gt;RedisCacheable 어노테이션 처리하기&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;AOP를 사용해 RedisCacheable 어노테이션을 처리하는 방법을 설명하겠습니다. &lt;code class=&quot;highlighter-rouge&quot;&gt;RedisCacheAspect&lt;/code&gt; 클래스를 통해 어노테이션이 적용된 메서드를 가로채어 캐시를 관리하는 로직을 추가합니다.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@Aspect&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@Component&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;RedisCacheAspect&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;redisTemplate:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;RedisTemplate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Any&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;?&amp;gt;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@Around&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;@annotation(redisCacheable)&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;cacheableProcess&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;joinPoint:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ProceedingJoinPoint&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;redisCacheable:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;RedisCacheable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;):&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Any&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cacheKey&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;generateKey&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;redisCacheable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;joinPoint&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;redisCacheable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;hasClassAndMethodNamePrefix&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;redisCacheable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;key&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cacheTTL&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;redisCacheable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;ttl&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;redisTemplate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;opsForValue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cacheKey&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)?.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;it&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;methodReturnValue&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;joinPoint&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;proceed&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cacheTTL&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;redisTemplate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;opsForValue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cacheKey&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;methodReturnValue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;redisTemplate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;opsForValue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cacheKey&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;methodReturnValue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cacheTTL&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TimeUnit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;SECONDS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;methodReturnValue&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;


    &lt;span class=&quot;nd&quot;&gt;@Around&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;@annotation(redisCacheEvict)&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;cacheEvictProcess&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;joinPoint:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ProceedingJoinPoint&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;redisCacheEvict:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;RedisCacheEvict&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;):&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Any&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;methodReturnValue&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;joinPoint&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;proceed&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cacheKey&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;generateKey&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cacheName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;joinPoint&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;redisCacheEvict&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;hasClassAndMethodNamePrefix&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;redisCacheEvict&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;redisCacheEvict&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;forEach&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cacheName&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;redisCacheEvict&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;clearAll&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;keys&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;redisTemplate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;keys&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;$cacheKey*&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;keys&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;isNotEmpty&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;redisTemplate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;delete&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;keys&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;redisTemplate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;delete&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cacheKey&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;methodReturnValue&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;


    &lt;span class=&quot;nd&quot;&gt;@Around&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;@annotation(redisCachePut)&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;cachePutProcess&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;joinPoint:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ProceedingJoinPoint&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;redisCachePut:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;RedisCachePut&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;):&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Any&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cacheKey&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;generateKey&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;redisCachePut&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;joinPoint&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;redisCachePut&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;hasClassAndMethodNamePrefix&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;redisCachePut&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;key&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cacheTTL&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;redisCachePut&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;ttl&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;methodReturnValue&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;joinPoint&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;proceed&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cacheTTL&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;redisTemplate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;opsForValue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cacheKey&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;methodReturnValue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;redisTemplate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;opsForValue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cacheKey&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;methodReturnValue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cacheTTL&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TimeUnit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;SECONDS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;methodReturnValue&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;generateKey&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
        &lt;span class=&quot;nl&quot;&gt;cacheName:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;nl&quot;&gt;joinPoint:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ProceedingJoinPoint&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;nl&quot;&gt;hasClassAndMethodNamePrefix:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Boolean&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;nl&quot;&gt;key:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;):&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;generatedKey&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;isEmpty&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;StringUtils&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;arrayToCommaDelimitedString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;joinPoint&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;getParameterValueByKey&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;joinPoint&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;?:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IllegalArgumentException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;No matching parameter for key: $key&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hasClassAndMethodNamePrefix&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;target&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;joinPoint&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;simpleName&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;method&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;joinPoint&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;signature&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MethodSignature&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;method&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;
            &lt;span class=&quot;s&quot;&gt;&quot;$cacheName::$target.$method::$generatedKey&quot;&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;s&quot;&gt;&quot;$cacheName::$generatedKey&quot;&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;parser&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SpelExpressionParser&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getParameterValueByKey&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;joinPoint:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ProceedingJoinPoint&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;key:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;):&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;signature&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;joinPoint&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;signature&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MethodSignature&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;parameterNames&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;signature&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;parameterNames&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;StandardEvaluationContext&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;parameterNames&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;forEachIndexed&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;indexedValue&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setVariable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;indexedValue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;joinPoint&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;parser&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;parseExpression&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getValue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;String:&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;java&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h2 id=&quot;3-캐시-키-생성과-ttl-적용&quot;&gt;3. 캐시 키 생성과 TTL 적용&lt;/h2&gt;

&lt;p&gt;generateKey 메서드를 이용해 캐시 키를 생성합니다. 이 키는 Redis에 저장될 데이터의 고유 식별자가 됩니다. TTL 값은 캐시의 생명주기를 관리하는 데 사용되며, 지정된 TTL이 지나면 캐시는 자동으로 만료됩니다. TTL 값이 지정되지 않았다면 캐시는 영구적으로 유지됩니다.&lt;/p&gt;

&lt;h2 id=&quot;4-실제-사용-예시&quot;&gt;4. 실제 사용 예시&lt;/h2&gt;
&lt;p&gt;이제 @RedisCacheable 어노테이션을 실제 코드에 적용해 보겠습니다:&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@RedisCacheable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;petCache&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;key&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;#petType&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ttl&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3600&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getPetDetails&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;petType:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;):&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PetDetails&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// 데이터베이스 또는 외부 API를 통해 데이터를 조회하는 로직&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;petService&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getPetDetails&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;petType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;위 메서드는 petType을 키로 하여 petCache에 캐싱됩니다. 캐시는 3600초(1시간) 동안 유효하며, 이후에는 자동으로 만료됩니다.&lt;/p&gt;

&lt;h2 id=&quot;5-적재된-cache가-redis-에서-조회가-안될-경우-처리-방법&quot;&gt;5. 적재된 cache가 redis 에서 조회가 안될 경우 처리 방법&lt;/h2&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    &lt;span class=&quot;nd&quot;&gt;@Bean&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;redisTemplate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;connectionFactory:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;RedisConnectionFactory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;):&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;RedisTemplate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Any&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;?&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;template&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;RedisTemplate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Any&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;apply&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;setConnectionFactory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;connectionFactory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;setKeySerializer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;StringRedisSerializer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;template&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;setKeySerializer(StringRedisSerializer())&lt;/code&gt; 라인은 RedisTemplate이 Redis에 데이터를 저장하거나 조회할 때 사용하는 키의 직렬화 방식을 설정하는 부분입니다.&lt;/p&gt;

&lt;p&gt;RedisTemplate은 Redis와의 상호작용을 추상화하여 간단한 API를 제공합니다. 이 때 Redis에 저장되는 데이터의 키와 값은 각각 직렬화가 필요합니다. KeySerializer는 Redis에 저장되는 키를 어떻게 직렬화할지를 결정합니다.&lt;/p&gt;

&lt;p&gt;기본적으로 RedisTemplate의 키 직렬화는 &lt;code class=&quot;highlighter-rouge&quot;&gt;JdkSerializationRedisSerializer&lt;/code&gt;을 사용합니다. 이 방식은 Java의 기본 직렬화 방식을 사용하여 객체를 바이트 배열로 변환합니다. 하지만, 일반적으로 Redis 키는 문자열로 저장되는 것이 좋습니다. 그 이유는&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;문자열은 Redis CLI나 기타 관리 도구로 쉽게 조회할 수 있습니다.&lt;/li&gt;
  &lt;li&gt;다른 언어나 시스템과의 호환성이 높습니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;마치며&quot;&gt;마치며&lt;/h2&gt;

&lt;p&gt;이번 포스팅에서는 @RedisCacheable 어노테이션과 AOP를 활용해 Redis 캐싱을 어떻게 구현하고 TTL로 캐시의 생명주기를 관리하는지를 살펴보았습니다. 이를 통해 데이터 조회 성능을 크게 향상시킬 수 있으며, 특히 빈번한 데이터 변경이 없는 경우 유용하게 사용할 수 있습니다. Redis와 Spring의 조합을 통해 성능 최적화에 한 발 더 나아가 보세요!&lt;/p&gt;

&lt;h2 id=&quot;참고자료&quot;&gt;참고자료&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.spring.io/spring-data/redis/reference/redis/redis-cache.html&quot;&gt;Redis Cache&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/spring-projects/spring-framework/blob/main/spring-context/src/main/java/org/springframework/cache/interceptor/SimpleKey.java&quot;&gt;spring-framework/spring-context/src/main/java/org/springframework/cache/interceptor/SimpleKey.java&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://jgrammer.tistory.com/entry/Spring-Boot-%EB%A7%8C%EB%A3%8C%EC%8B%9C%EA%B0%84-%EC%84%A4%EC%A0%95%EC%9D%84-%EC%9C%84%ED%95%9C-Redis-Cache-AOP-%EC%9E%91%EC%84%B1&quot;&gt;Spring Boot 캐시 만료시간 설정을 위한 Redis Cache AOP 작성&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name></name></author><category term="spring" /><category term="cache" /><category term="redis" /><summary type="html">Spring Cache에서 ttl 설정이 어려워 개발했습니다.</summary></entry><entry><title type="html">npm install 시 개발 라이브러리 제외 처리</title><link href="https://lahuman.github.io/npm_instal_without_devDependencies/" rel="alternate" type="text/html" title="npm install 시 개발 라이브러리 제외 처리 " /><published>2024-08-28T00:00:00+00:00</published><updated>2024-08-28T00:00:00+00:00</updated><id>https://lahuman.github.io/npm_instal_without_devDependencies</id><content type="html" xml:base="https://lahuman.github.io/npm_instal_without_devDependencies/">&lt;h1 id=&quot;운영에서-npm-install-시-devdependencies-제외-처리&quot;&gt;운영에서 npm install 시 devDependencies 제외 처리&lt;/h1&gt;

&lt;p&gt;프로덕션 환경에서 애플리케이션을 배포할 때, 불필요한 패키지를 설치하지 않기 위해 npm i –production을 사용합니다. 이는 애플리케이션의 크기를 줄이고, 배포 시간을 단축시키며, 보안상 불필요한 패키지가 포함되지 않도록 하기 위해 유용합니다.&lt;/p&gt;

&lt;div class=&quot;language-json highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;dependencies&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;express&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;^4.17.1&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;devDependencies&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;nodemon&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;^2.0.7&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;npm i&lt;/code&gt;: express와 nodemon 둘 다 설치됩니다.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;npm i --production&lt;/code&gt;: express만 설치됩니다. nodemon은 개발 의존성이기 때문에 설치되지 않습니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;프로덕션 환경에서는 불필요한 코드와 리소스를 줄이고, 보안성을 높이며, 배포 및 실행 속도를 최적화하기 위해 개발 의존성을 설치하지 않습니다.
이는 전체적인 시스템 성능을 개선하고, 유지 관리의 부담을 줄이는 데 중요한 역할을 합니다&lt;/p&gt;</content><author><name></name></author><category term="npm" /><category term="dependencies" /><summary type="html">불필요한 라이브러리를 설치 하지 않아요!</summary></entry></feed>
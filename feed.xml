<?xml version="1.0" encoding="utf-8"?><?xml-stylesheet type="text/xml" href="https://lahuman.github.io/feed.xslt.xml"?><feed xmlns="http://www.w3.org/2005/Atom"><generator uri="http://jekyllrb.com" version="3.8.4">Jekyll</generator><link href="https://lahuman.github.io/feed.xml" rel="self" type="application/atom+xml" /><link href="https://lahuman.github.io/" rel="alternate" type="text/html" /><updated>2019-12-13T17:59:04+09:00</updated><id>https://lahuman.github.io/</id><title type="html">lahuman</title><subtitle>열심히 사는 아저씨</subtitle><entry><title type="html">git 메시지 작성 도움말</title><link href="https://lahuman.github.io/git_message/" rel="alternate" type="text/html" title="git 메시지 작성 도움말" /><published>2019-12-13T00:00:00+09:00</published><updated>2019-12-13T00:00:00+09:00</updated><id>https://lahuman.github.io/git_message</id><content type="html" xml:base="https://lahuman.github.io/git_message/">&lt;h1 id=&quot;udacity-git-commit-message-style-guide를-기초로-작성한-메시지-작성-규칙&quot;&gt;&lt;a href=&quot;https://udacity.github.io/git-styleguide/&quot;&gt;Udacity Git Commit Message Style Guide&lt;/a&gt;를 기초로 작성한 메시지 작성 규칙&lt;/h1&gt;

&lt;p&gt;지금까지 git message가 귀찮아서 그냥 update 이런식으로 작성하였는데, 시간이 지나서 보면 내가 어떤 작업을 했었는지 알수 없다.&lt;/p&gt;

&lt;p&gt;엉망인 코멘트가 달린 로그를 보고 내가 원하는 시점으로 전환이 되지 않아 많이 불편해서 git 메시지를 아름답게 작성하는 노하우를 인터넷에 검색해보았다.&lt;/p&gt;

&lt;p&gt;우선 시작하기 전에 이런 방법도 있구나로 알고 있으면 좋다.&lt;/p&gt;

&lt;h2 id=&quot;메시지-구조&quot;&gt;메시지 구조&lt;/h2&gt;

&lt;p&gt;메시지는 다음과 같이 작성한다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;type: subject

body(options)

footer(options)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;제목은 type과 subject로 구성됩니다.&lt;/p&gt;

&lt;h2 id=&quot;type&quot;&gt;Type&lt;/h2&gt;

&lt;p&gt;타입은 다음중 하나를 선택하여서 사용합니다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;feat: 새로운 기능&lt;/li&gt;
  &lt;li&gt;fix: 오류 수정&lt;/li&gt;
  &lt;li&gt;docs: 문서 수정&lt;/li&gt;
  &lt;li&gt;style: 코드의 변경 없이 포멧이나 ; 추가 등 작업;&lt;/li&gt;
  &lt;li&gt;refactor: 코드의 리펙토링 작업&lt;/li&gt;
  &lt;li&gt;test: 테스트를 추가 하거나, 리펙토링 작업을 진행한 경우; 운영 코드의 변화 없음&lt;/li&gt;
  &lt;li&gt;chore:  빌드 테스크 변화, 패키지 매니저 설정 등; 운영 코드의 변화 없음&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;subject&quot;&gt;Subject&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;주제는 50자를 넘어서는 안된다.&lt;/li&gt;
  &lt;li&gt;이해하기 쉽게 명령조로 작성하세요.&lt;/li&gt;
  &lt;li&gt;영어로 작성할 경우 변경을 작성할때, chage를 사용하고, changed 또는 changes를 사용하지 마세요.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;body&quot;&gt;Body&lt;/h2&gt;

&lt;p&gt;제목만으로 충분하지 않을 경우 사용합니다. 
제목과 Body 사이에는 빈공간 1칸을 두어서 구분해주세요.
어떻게를 작성하지 말고, &lt;strong&gt;왜&lt;/strong&gt;와 &lt;strong&gt;무엇을&lt;/strong&gt; 기준으로 작성하세요.
또한 한 라인에 72글자를 넘지 않도록 작성하세요.&lt;/p&gt;

&lt;h2 id=&quot;footer&quot;&gt;Footer&lt;/h2&gt;

&lt;p&gt;선택 사항이며, 이슈트레커의 IDs 나 참고 정보를 작성합니다.&lt;/p&gt;

&lt;h2 id=&quot;example-commit-message&quot;&gt;Example Commit Message&lt;/h2&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;feat: Summarize changes in around 50 characters or less

More detailed explanatory text, if necessary. Wrap it to about 72
characters or so. In some contexts, the first line is treated as the
subject of the commit and the rest of the text as the body. The
blank line separating the summary from the body is critical (unless
you omit the body entirely); various tools like `log`, `shortlog`
and `rebase` can get confused if you run the two together.

Explain the problem that this commit is solving. Focus on why you
are making this change as opposed to how (the code explains that).
Are there side effects or other unintuitive consequenses of this
change? Here's the place to explain them.

Further paragraphs come after blank lines.

 - Bullet points are okay, too

 - Typically a hyphen or asterisk is used for the bullet, preceded
   by a single space, with blank lines in between, but conventions
   vary here

If you use an issue tracker, put references to them at the bottom,
like this:

Resolves: #123
See also: #456, #789
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;우선 간단하게 제목만이라도 적는 연습을 하다보면 좋은 결과를 얻을 수 있다!&lt;/p&gt;

&lt;h1 id=&quot;참고-자료&quot;&gt;참고 자료&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://udacity.github.io/git-styleguide/&quot;&gt;Udacity Git Commit Message Style Guide&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="git" /><category term="message" /><summary type="html">유다시티 스타일 가이드가 괜찮습니다.</summary></entry><entry><title type="html">PM2 save / startup을 해두어도, reboot 시 실행되지 않을시 처리 방안</title><link href="https://lahuman.github.io/pm2_reboot_problem/" rel="alternate" type="text/html" title="PM2 save / startup을 해두어도, reboot 시 실행되지 않을시 처리 방안" /><published>2019-12-12T00:00:00+09:00</published><updated>2019-12-12T00:00:00+09:00</updated><id>https://lahuman.github.io/pm2_reboot_problem</id><content type="html" xml:base="https://lahuman.github.io/pm2_reboot_problem/">&lt;h1 id=&quot;pm2-save--startup을-해두어도-reboot-시-실행되지-않을시-처리-방안&quot;&gt;PM2 save / startup을 해두어도, reboot 시 실행되지 않을시 처리 방안&lt;/h1&gt;

&lt;p&gt;PM2에서 startup 을 root 가 아닌 계정으로 실행할 경우 아래와 같은 메시지가 표기 된다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ pm2 startup
[PM2] You have to run this command as root. Execute the following command:
      sudo su -c &quot;env PATH=$PATH:/home/unitech/.nvm/versions/node/v4.3/bin pm2 startup &amp;lt;distribution&amp;gt; -u &amp;lt;user&amp;gt; --hp &amp;lt;home-path&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;이때 당황하지 말고 &lt;strong&gt;sudo&lt;/strong&gt; 이하의 명령어를 실행하면 된다.
(꺽쇠로 나온 값에 대하여 셋팅되여 명령어에 표기 된다.)&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;root 계정이 아닐 경우 발생하는 문제로 설정을 해야 한다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;이후에 startup / service 기동 / save 를 하고 reboot을 해도 문제가 없다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ pm2 startup
# 서비스 기동
$ pm2 start app.js --name=serviceName
# 상태 저장
$ pm2 save
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;예제&quot;&gt;예제&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;상황 : ubuntu 계정으로 재부팅시 pm2 프로세스를 기동하려고 한다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$&amp;gt; pm2 startup ubuntu
$&amp;gt; sudo env PATH=$PATH:/usr/bin /usr/lib/node_modules/pm2/bin/pm2 startup ubuntu -u ubuntu --hp /home/ubuntu

$&amp;gt; cd service
$&amp;gt; pm2 start app.js --name=servicename
$&amp;gt; pm2 save
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;늘-그렇지만-문서만-잘읽어도-금방-해결될-문제다-문서-읽기를-생활화-하자&quot;&gt;늘 그렇지만 문서만 잘읽어도 금방 해결될 문제다. 문서 읽기를 생활화 하자!&lt;/h3&gt;

&lt;h1 id=&quot;참고-자료&quot;&gt;참고 자료&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://pm2.keymetrics.io/docs/usage/startup/&quot;&gt;Startup Script Generator&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="pm2" /><category term="reboot" /><summary type="html">계정이 root가 아닐 경우 발생한다.</summary></entry><entry><title type="html">ReactJS에서 파일 다운로드 처리 방안</title><link href="https://lahuman.github.io/reactjs_readablestream/" rel="alternate" type="text/html" title="ReactJS에서 파일 다운로드 처리 방안" /><published>2019-12-08T00:00:00+09:00</published><updated>2019-12-08T00:00:00+09:00</updated><id>https://lahuman.github.io/reactjs_readablestream</id><content type="html" xml:base="https://lahuman.github.io/reactjs_readablestream/">&lt;h1 id=&quot;요즘-reactjs를-이용해서-개발을-진행하고-있다&quot;&gt;요즘 ReactJS를 이용해서 개발을 진행하고 있다.&lt;/h1&gt;

&lt;p&gt;사용하면서 간간히 만나는 문제들을 풀어가고 있는데,&lt;/p&gt;

&lt;p&gt;API에서 DOWNLOAD를 구현하고 React에서 해당 결과를 받아 보니 처음 보는 &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/ReadableStream&quot;&gt;ReadableStream&lt;/a&gt;가 튀어 나왔다.&lt;/p&gt;

&lt;p&gt;처리 방법은 여러가지가 있었는데, 우선 나는 다음과 같이 처리 했다.&lt;/p&gt;

&lt;p&gt;ReadableStream을 blob으로 변경하여 &lt;a href=&quot;https://www.npmjs.com/package/file-saver&quot;&gt;file-saver&lt;/a&gt; 전달 하여서 처리 하였다.&lt;/p&gt;

&lt;h2 id=&quot;처리-코드&quot;&gt;처리 코드&lt;/h2&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; import fileDownload from 'file-saver';

 const callFileDownload = async (file_name, file_path) =&amp;gt; {
    const res = await CustomFetch('/fileDownload', {
      responseType: 'blob',
      method: 'POST', headers: {
        'Content-Type': 'application/json',
      },
    }, {
      &quot;_id&quot;: noticeId,
      file_name,
      file_path
    });

    fileDownload(await (await new Response(res.body)).blob(), file_name);

  }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;다음에 또 ReadableStream을 만나면 쫄지말자!&lt;/p&gt;

&lt;h1 id=&quot;참고-자료&quot;&gt;참고 자료&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Streams_API/Using_readable_streams&quot;&gt;Using readable streams&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/ReadableStream&quot;&gt;ReadableStream&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.npmjs.com/package/file-saver&quot;&gt;file-saver&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="reactjs" /><category term="readablestream" /><summary type="html">API 에서 ReadableStream 객체를 받아왔을 때 처리 방법</summary></entry><entry><title type="html">신뢰에 대하여…</title><link href="https://lahuman.github.io/20191204/" rel="alternate" type="text/html" title="신뢰에 대하여..." /><published>2019-12-04T00:00:00+09:00</published><updated>2019-12-04T00:00:00+09:00</updated><id>https://lahuman.github.io/20191204</id><content type="html" xml:base="https://lahuman.github.io/20191204/">&lt;h1 id=&quot;일을-하다-보면-함께-일해서-즐거운-동료가-있다&quot;&gt;일을 하다 보면 함께 일해서 즐거운 동료가 있다.&lt;/h1&gt;

&lt;p&gt;일을 하다 보면 함께 하고 싶은 동료가 있고, 그렇지 않은 사람이 있다.&lt;/p&gt;

&lt;p&gt;신뢰를 얻을 수 있는 가장 쉬운 방법은 궂은 일을 도맡아 하는 것인데… 이게 하다보면 신뢰를 얻기 보다 호구가 되는 경우도 왕왕있다.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://brunch.co.kr/@hyungsukkim/107?fbclid=IwAR3yVlRF3OXR3dAS1xowVUYZeUBl0pE2gn1mybcci4afR-ng6ssoNzNc_Dc&quot;&gt;신뢰는 어떻게 형성되는가&lt;/a&gt;라는 글을 읽고 동감이 되는 부분이 많았다.&lt;/p&gt;

&lt;p&gt;특히 &lt;strong&gt;일이 성공했나?&lt;/strong&gt; 보다는 다음에도 이 이사람과 일하고 싶은가?가 가장 중요하다고 생각한다.&lt;/p&gt;

&lt;p&gt;결국 남는건 &lt;strong&gt;사람&lt;/strong&gt;이다.&lt;/p&gt;

&lt;h2 id=&quot;함께-일하고-나서-다시-찾고-싶은-사람이-되도록-노력하자&quot;&gt;함께 일하고 나서 다시 찾고 싶은 사람이 되도록 노력하자!&lt;/h2&gt;</content><category term="단상" /><summary type="html">노력으로 신뢰를 얻는게 아니다.</summary></entry><entry><title type="html">swagger-node + mongoose 예제</title><link href="https://lahuman.github.io/swagger-node_mongoose/" rel="alternate" type="text/html" title="swagger-node + mongoose 예제" /><published>2019-11-29T00:00:00+09:00</published><updated>2019-11-29T00:00:00+09:00</updated><id>https://lahuman.github.io/swagger-node_mongoose</id><content type="html" xml:base="https://lahuman.github.io/swagger-node_mongoose/">&lt;h1 id=&quot;swagger-node--mongoose-예제&quot;&gt;swagger-node + mongoose 예제&lt;/h1&gt;

&lt;p&gt;&lt;img src=&quot;assets/img/post_img/swagger-node_example.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;프로젝트 초반에 셋팅을 잘해놓고 한참 쓰고 나서 다시 새 프로젝트를 시작할때면 나는 아무런 기억이 나지 않는다.&lt;/p&gt;

&lt;p&gt;나중에 프로젝트 시작할때 참고 하기위해서 예제 코드를 만들었다.&lt;/p&gt;

&lt;p&gt;기본 Base는 swagger-node에 로그, dotenv, helmet 등을 설정 하였고, mongodb에 대하여 CRUD 하는 예제를 만들었다.&lt;/p&gt;

&lt;h1 id=&quot;예제-코드-보기&quot;&gt;&lt;a href=&quot;https://github.com/lahuman/swagger-node_mongoose&quot;&gt;예제 코드 보기&lt;/a&gt;&lt;/h1&gt;

&lt;h2 id=&quot;주요-내용&quot;&gt;주요 내용&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;app.js&lt;/strong&gt; 에서 처음 앱이 기동될때, connect.js를 호출하여 DB 연결을 한다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;require(`${__basedir}/config/connect`);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;connect.js&lt;/strong&gt; 내부를 보면 models 라는 디렉터리 밑에 존재하는 모든 모델을 자동으로 읽어 들여서 처리 한다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;const models = join(__basedir, 'models');

// Bootstrap models
fs.readdirSync(models)
  .filter(file =&amp;gt; ~file.search(/^[^.].*\.js$/))
  .forEach(file =&amp;gt; require(join(models, file)));
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h1 id=&quot;기동-방법&quot;&gt;기동 방법&lt;/h1&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$&amp;gt; npm install
$&amp;gt; swagger project start
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;주요 샘플은 서버를 설치 후 다음 주소에 접근해서 확인 할 수 있다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;swagger-test-url&quot;&gt;Swagger test URL&lt;/h2&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;http://localhost:10010/api/docs
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;예저-정보&quot;&gt;예저 정보&lt;/h2&gt;
&lt;h3 id=&quot;book&quot;&gt;Book&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;Mongoose 를 이용한 샘플&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;schedule&quot;&gt;Schedule&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;Swagger 사용법을 알기 위핸 샘플&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1 id=&quot;참고-자료&quot;&gt;참고 자료&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/swagger-api/swagger-node&quot;&gt;Swagger-node&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://mongoosejs.com/&quot;&gt;Mongoose&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="nodejs" /><category term="example" /><summary type="html">프로젝트 새로 시작할 때마다 자꾸 까먹는다.</summary></entry><entry><title type="html">JAVA 개발자가 시작하는 NodeJS</title><link href="https://lahuman.github.io/java_user_useing_node/" rel="alternate" type="text/html" title="JAVA 개발자가 시작하는 NodeJS" /><published>2019-11-26T00:00:00+09:00</published><updated>2019-11-26T00:00:00+09:00</updated><id>https://lahuman.github.io/java_user_useing_node</id><content type="html" xml:base="https://lahuman.github.io/java_user_useing_node/">&lt;h1 id=&quot;java-개발자가-시작하는-nodejs&quot;&gt;JAVA 개발자가 시작하는 NodeJS&lt;/h1&gt;

&lt;p&gt;이번에 회사에서 지원하는 사내강사 프로그램에 참가하였다.&lt;/p&gt;

&lt;p&gt;발표 주제로 입사하고 nodejs를 사용하면서 느낀 점을 공유 하는 것으로 잡았다.&lt;/p&gt;

&lt;p&gt;주요 내용은 nodejs를 사용하여 좋은 점과 아쉬운 점을 담았다.&lt;/p&gt;

&lt;iframe src=&quot;//www.slideshare.net/slideshow/embed_code/key/eQIONDNAh6RF4N&quot; width=&quot;595&quot; height=&quot;485&quot; frameborder=&quot;0&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; scrolling=&quot;no&quot; style=&quot;border:1px solid #CCC; border-width:1px; margin-bottom:5px; max-width: 100%;&quot; allowfullscreen=&quot;&quot;&gt; &lt;/iframe&gt;
&lt;div style=&quot;margin-bottom:5px&quot;&gt; &lt;strong&gt; &lt;a href=&quot;//www.slideshare.net/lahuman1/java-nodejs-196972795&quot; title=&quot;JAVA 개발자가 시작하는 NodeJS&quot; target=&quot;_blank&quot;&gt;JAVA 개발자가 시작하는 NodeJS&lt;/a&gt; &lt;/strong&gt; from &lt;strong&gt;&lt;a href=&quot;https://www.slideshare.net/lahuman1&quot; target=&quot;_blank&quot;&gt;Daniel Lim&lt;/a&gt;&lt;/strong&gt; &lt;/div&gt;</content><category term="nodejs" /><summary type="html">발표자료를 만들었는데 생각보다 어렵다.</summary></entry><entry><title type="html">요즘 내가 벌인 일들…</title><link href="https://lahuman.github.io/20191106/" rel="alternate" type="text/html" title="요즘 내가 벌인 일들..." /><published>2019-11-06T00:00:00+09:00</published><updated>2019-11-06T00:00:00+09:00</updated><id>https://lahuman.github.io/20191106</id><content type="html" xml:base="https://lahuman.github.io/20191106/">&lt;h1 id=&quot;요즘-무언가-열심히-해보려고-하고-있다&quot;&gt;요즘 무언가 열심히 해보려고 하고 있다.&lt;/h1&gt;

&lt;ol&gt;
  &lt;li&gt;때밀이
    &lt;ul&gt;
      &lt;li&gt;내부 강사인데 “자바 개발자가 시작하는 노드” 라는 주제로 준비 하고 있다.&lt;/li&gt;
    &lt;/ul&gt;
    &lt;ul&gt;
      &lt;li&gt;문제는… 장표를 100장은 만들어야 할꺼 같다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;북클
    &lt;ul&gt;
      &lt;li&gt;2번째 북클이다 이번엔 쉬운 책으로 이솝 우화이다.&lt;/li&gt;
    &lt;/ul&gt;
    &lt;ul&gt;
      &lt;li&gt;가볍게 보면 될꺼 같다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;뭉클
    &lt;ul&gt;
      &lt;li&gt;라즈베리파이로 개발환경 구축 하기를 진행하고 있다.&lt;/li&gt;
    &lt;/ul&gt;
    &lt;ul&gt;
      &lt;li&gt;함께 하는 좋은 분들이 있어서 즐겁게 하고 있다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;아마존 개발자에게 개발/운영/문화 배우기
    &lt;ul&gt;
      &lt;li&gt;안재우님에게 오셔서 2주간 느끼고 배우고 있다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;블록체인
    &lt;ul&gt;
      &lt;li&gt;테크 스크럼이라고 기술에 대해서 배우는 스크럼을 진행한다.&lt;/li&gt;
    &lt;/ul&gt;
    &lt;ul&gt;
      &lt;li&gt;이제 이게 뭔지 하나씩 배우고 있다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;ReactJS 기초 강좌
    &lt;ul&gt;
      &lt;li&gt;갑자기 훅 들어온건데… 일단 내일부터 아무 준비없이 하나씩 해보기로했다.&lt;/li&gt;
    &lt;/ul&gt;
    &lt;ul&gt;
      &lt;li&gt;내일인데.. 우선 경험을 공유해봐야지&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;정신없이-하루가-가는구나&quot;&gt;정신없이 하루가 가는구나&lt;/h2&gt;</content><category term="단상" /><summary type="html">왠만한 사고는 다치고 다닌다.</summary></entry><entry><title type="html">NODEJS] AWS의 S3에 파일 업로드 다운로드 구현</title><link href="https://lahuman.github.io/aws_s3_file_upload_download/" rel="alternate" type="text/html" title="NODEJS] AWS의 S3에 파일 업로드 다운로드 구현" /><published>2019-10-25T00:00:00+09:00</published><updated>2019-10-25T00:00:00+09:00</updated><id>https://lahuman.github.io/aws_s3_file_upload_download</id><content type="html" xml:base="https://lahuman.github.io/aws_s3_file_upload_download/">&lt;h1 id=&quot;nodejs-aws의-s3에-파일-업로드-다운로드-구현&quot;&gt;NODEJS] AWS의 S3에 파일 업로드 다운로드 구현&lt;/h1&gt;

&lt;p&gt;AWS EC2 서버에서 공지사항에 들어가는 첨부 파일을 업로드 하고 다운로드 하는 기능이 필요 했다.&lt;/p&gt;

&lt;p&gt;다음의 순서로 처리하면 쉽게 된다.&lt;/p&gt;

&lt;h2 id=&quot;1-사용자-생성-하기&quot;&gt;1. 사용자 생성 하기&lt;/h2&gt;

&lt;h6 id=&quot;1-aws-iam에서-사용자를-생성-하고-애세스-유형을-프로그램-방식으로-선택&quot;&gt;1. AWS IAM에서 사용자를 생성 하고, 애세스 유형을 프로그램 방식으로 선택&lt;/h6&gt;

&lt;p class=&quot;image-left&quot;&gt;&lt;img src=&quot;https://lahuman.github.io/assets/img/post_img/aws_iam.png&quot; alt=&quot;사용자 추가&quot; /&gt;&lt;/p&gt;

&lt;p&gt;이후 결과로 &lt;strong&gt;Access key ID, Secret access key&lt;/strong&gt;를 알고 있어야 한다.&lt;/p&gt;

&lt;h6 id=&quot;2-권한으로-amazons3fullaccess를-할당&quot;&gt;2. 권한으로 AmazonS3FullAccess를 할당&lt;/h6&gt;

&lt;p class=&quot;image-left&quot;&gt;&lt;img src=&quot;https://lahuman.github.io/assets/img/post_img/aws_permission.png&quot; alt=&quot;사용자 권한&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;2-nodejs에서-aws-sdk-사용하기&quot;&gt;2. nodejs에서 aws-sdk 사용하기&lt;/h2&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# 프로젝트 초기화
$&amp;gt; npm init

# aws-sdk 모듈 설치
$&amp;gt; npm install aws-sdk --save
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;3-bucket-생성-하기&quot;&gt;3. bucket 생성 하기&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;createBucket.js&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;const AWS = require('aws-sdk');
const ID = 'Access key Id';
const SECRET = '';
const BUCKET_NAME = '';
const s3 = new AWS.S3({
  accessKeyId: ID,
  secretAccessKey: SECRET
});
const params = {
  Bucket: BUCKET_NAME,
  CreateBucketConfiguration: {
      // Set your region here
      LocationConstraint: &quot;ap-northeast-2&quot;
  }
};

s3.createBucket(params, function(err, data) {
  if (err) console.log(err, err.stack);
  else console.log('Bucket Created Successfully', data.Location);
});
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;4-파일-업로드&quot;&gt;4. 파일 업로드&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;uploadFile.js&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;const fs = require('fs');
const AWS = require('aws-sdk');
const BUCKET_NAME = '';
const s3 = new AWS.S3({
  accessKeyId: '',
  secretAccessKey: ''
});
const uploadFile = (fileName) =&amp;gt; {
  const fileContent = fs.readFileSync(fileName);
  const params = {
      Bucket: BUCKET_NAME,
      Key: 'test.txt', // File name you want to save as in S3
      Body: fileContent
  };
  s3.upload(params, function(err, data) {
      if (err) { throw err; }
      console.log(`File uploaded successfully. ${data.Location}`);
  });
};
uploadFile('./uploads/test.txt');
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;5-파일-다운로드&quot;&gt;5. 파일 다운로드&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;download.js&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;const fs = require('fs');
const AWS = require('aws-sdk');
const BUCKET_NAME = '';
const s3 = new AWS.S3({
  accessKeyId: '',
  secretAccessKey: ''
});
const downloadFile = (fileName) =&amp;gt; {
  const params = {
      Bucket: BUCKET_NAME,
      Key: 'test.txt', // File name you want to save as in S3
  };
  s3.getObject(params, function(err, data) {
      if (err) {
          throw err;
      }
      fs.writeFileSync(fileName, data.Body.toString());
  });
};
downloadFile('../../uploads/test-download.txt');
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;참고자료&quot;&gt;참고자료&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://stackabuse.com/uploading-files-to-aws-s3-with-node-js/&quot;&gt;Uploading Files to AWS S3 with Node.js&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="s3" /><category term="nodejs" /><summary type="html">코드는 쉽다. 잘 안되었던 경험을 공유 하자</summary></entry><entry><title type="html">이춘기가 시작된 딸아이</title><link href="https://lahuman.github.io/20191022/" rel="alternate" type="text/html" title="이춘기가 시작된 딸아이" /><published>2019-10-22T00:00:00+09:00</published><updated>2019-10-22T00:00:00+09:00</updated><id>https://lahuman.github.io/20191022</id><content type="html" xml:base="https://lahuman.github.io/20191022/">&lt;h1 id=&quot;이춘기가-시작된-딸아이&quot;&gt;이춘기가 시작된 딸아이&lt;/h1&gt;

&lt;p&gt;요즘 이춘기가 시작된 따님과 밤마실을 다녀왔다.&lt;/p&gt;

&lt;p&gt;이춘기가 시작된 따님은 감정 기복이 심하다.&lt;/p&gt;

&lt;p&gt;소리를 지르기도 하고 물건을 던지거나 감정을 온 몸으로 표현한다.&lt;/p&gt;

&lt;p&gt;감정적이 된 따님을 대할때 주의해야 할 것이 함께 감정적으로 대하면 안된다. 그렇게 되면 이쁜 따님의 눈에서 짜고 투명한 물이 흘려나오기 때문이다.&lt;/p&gt;

&lt;p&gt;따님이 감정을 추스릴때까지 기다려 줘야 한다.&lt;/p&gt;

&lt;p&gt;그리고 왜 힘들었는지 앞으로는 이렇게 해주었으면 좋겠다는 이야기를 하며 서로의 눈높이를 마춘다.&lt;/p&gt;

&lt;p&gt;감정을 모두 소비하고 난 따님은 잘 듣고 이해한다고 말한다.
앞으로 서로 노력하자는 훈훈한 마무리로 하루를 마친다.&lt;/p&gt;

&lt;p&gt;하지만 내일이면 다시 이춘기가 시작된다.&lt;/p&gt;

&lt;h2 id=&quot;무한루프&quot;&gt;무한루프&lt;/h2&gt;
&lt;h2 id=&quot;다음차례는아들이겠지&quot;&gt;다음차례는아들이겠지&lt;/h2&gt;</content><category term="단상" /><summary type="html">세상은 돌고 돌아 나에게 왔다.</summary></entry><entry><title type="html">NodeJS에서 Mongoose를 이용해서 MongoDB 사용하기</title><link href="https://lahuman.github.io/mongodb_mongoose/" rel="alternate" type="text/html" title="NodeJS에서 Mongoose를 이용해서 MongoDB 사용하기" /><published>2019-10-15T00:00:00+09:00</published><updated>2019-10-15T00:00:00+09:00</updated><id>https://lahuman.github.io/mongodb_mongoose</id><content type="html" xml:base="https://lahuman.github.io/mongodb_mongoose/">&lt;h1 id=&quot;nodejs에서-mongoose를-이용해서-mongodb-사용하기&quot;&gt;NodeJS에서 Mongoose를 이용해서 MongoDB 사용하기&lt;/h1&gt;

&lt;h2 id=&quot;1-mongodb-42와-robot3-연동-오류&quot;&gt;#1 MongoDB 4.2와 RoboT3 연동 오류&lt;/h2&gt;

&lt;p&gt;어제부터 Docker를 이용해서 MongoDB 4.2를 설치하고 Robo 3T로 접근을 하는데 다음과 같은 오류가 계속 발생하고 있었다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;network error while attempting to run command 'saslstart' on host 'localhost:27017'
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;검색을 해보았는데 여러 가지 이유가 나와서, 다른 이미지로 설치도 하고 계정을 추가도 해보는 등의 여러 삽질을 하였다.
하지만 해결을 못해서 전전 긍긍 되고 있었는데, 드디어 원인을 알았다.&lt;/p&gt;

&lt;p&gt;바로 Robo 3T 버그 였다. 내가 사용하던 1.2.1 에서 발생하는 문제로 1.3.1로 업그레이드 하니 해결 되었다.&lt;/p&gt;

&lt;h3 id=&quot;문제-해결-이슈&quot;&gt;&lt;a href=&quot;https://github.com/Studio3T/robomongo/issues/1566&quot;&gt;문제 해결 이슈&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;나의 귀중한 하루를 날렸다.&lt;/p&gt;

&lt;h2 id=&quot;2-mongoose에서-데이터베이스를-만들지-않고-접근-시도&quot;&gt;#2 mongoose에서 데이터베이스를 만들지 않고 접근 시도&lt;/h2&gt;

&lt;p&gt;mongodb 에서 데이터베이스를 만들지 않고 mongoose를 이용해서 해당 데이터 베이스에 접근 하려고 했더니…. 안된다는 삽질을 오전 내내 했다….&lt;/p&gt;

&lt;p&gt;그리고 데이터 베이스를 생성 하였으면 꼭 사용자도 생성 해야 한다.&lt;/p&gt;

&lt;p&gt;늘 하는 작업인데 Command에서 되니까 그냥 넘어갔었나 보다.&lt;/p&gt;

&lt;h2 id=&quot;3-docker-db-설치&quot;&gt;#3 Docker DB 설치&lt;/h2&gt;

&lt;p&gt;Docker-compose 명령어를 이용해서 DB를 설치 하려고 하는데 ID/PW 셋팅을 안해주면 관리해주기 많이 귀찮다.&lt;/p&gt;

&lt;p&gt;docker-compose.yml 파일을 이용하여서 여러 개의 인스턴스를 생성 관리 할 수 있다.&lt;/p&gt;

&lt;p&gt;다음은 docker-compose.yml 의 예제이다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;version: '3.1'
services:
  mongodb:
    image: mongo:4
    command: [--auth]
    ports:
      - &quot;27017:27017&quot;
    environment:
      MONGO_INITDB_ROOT_USERNAME: &amp;lt;ID&amp;gt;
      MONGO_INITDB_ROOT_PASSWORD: &amp;lt;PW&amp;gt;
  mysql:
    image: mysql:5.7
    environment:
      MYSQL_ROOT_PASSWORD: &amp;lt;PW&amp;gt;
      WORDPRESS_DB_NAME: &amp;lt;DBNAME&amp;gt;
      WORDPRESS_DB_USER: &amp;lt;ID&amp;gt;
      WORDPRESS_DB_PASSWORD: &amp;lt;PW&amp;gt;
    ports:
      - &quot;3306:3306&quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;실행은 다음과 같이 해당 파일이 있는 곳에서 하면 된다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$&amp;gt; docker-compose up -d
# 삭제시 해당 인스턴스도 삭제 한다!! 조심할 것!
$&amp;gt; docker-compose down
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;down-명령어는-인스턴스를-삭제한다&quot;&gt;down 명령어는 인스턴스를 삭제한다.&lt;/h4&gt;

&lt;h2 id=&quot;참고-자료&quot;&gt;참고 자료&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/Studio3T/robomongo/issues/1566&quot;&gt;문제 해결 이슈&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="mongoose" /><category term="mongodb" /><summary type="html">삽질기</summary></entry></feed>

<?xml version="1.0" encoding="utf-8"?><?xml-stylesheet type="text/xml" href="https://lahuman.github.io/feed.xslt.xml"?><feed xmlns="http://www.w3.org/2005/Atom"><generator uri="http://jekyllrb.com" version="3.8.4">Jekyll</generator><link href="https://lahuman.github.io/feed.xml" rel="self" type="application/atom+xml" /><link href="https://lahuman.github.io/" rel="alternate" type="text/html" /><updated>2020-11-20T00:06:53+09:00</updated><id>https://lahuman.github.io/</id><title type="html">lahuman</title><subtitle>열심히 사는 아저씨</subtitle><entry><title type="html">nestjs에서 passport 연동하기</title><link href="https://lahuman.github.io/nestjs_passport_swagger/" rel="alternate" type="text/html" title="nestjs에서 passport 연동하기" /><published>2020-11-19T00:00:00+09:00</published><updated>2020-11-19T00:00:00+09:00</updated><id>https://lahuman.github.io/nestjs_passport_swagger</id><content type="html" xml:base="https://lahuman.github.io/nestjs_passport_swagger/">&lt;h1 id=&quot;nestjs에서-passport를-이용해서-로그인-하는-기능을-확인해보았습니다&quot;&gt;nestjs에서 passport를 이용해서 로그인 하는 기능을 확인해보았습니다.&lt;/h1&gt;

&lt;p&gt;오늘은 &lt;a href=&quot;https://github.com/nestjsplus/test-auth-chapter-sample&quot;&gt;nestjs에서 passport(Local) 예제&lt;/a&gt;에 &lt;a href=&quot;https://github.com/nestjsplus/test-auth-chapter-sample/pull/13&quot;&gt;SAML 연동 예제를 작성해서 PR&lt;/a&gt;을 보냈습니다.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/rucken/core-nestjs&quot;&gt;다른 예제&lt;/a&gt;도 있었지만, 이 예제가 가장 심플하게 구성되어 있네요.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;도움받은 것을 다시 나누기 위해서 요즘 PR을 열심히 작성하고 있습니다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;혹시 nestjs에서 passport 연동을 테스트 해보고 싶으시면 &lt;a href=&quot;https://github.com/nestjsplus/test-auth-chapter-sample&quot;&gt;예제&lt;/a&gt;를 보셔요&lt;/p&gt;

&lt;p&gt;물론 &lt;a href=&quot;https://docs.nestjs.com/techniques/authentication&quot;&gt;nestjs에서 제공되는 샘플&lt;/a&gt;이 있지만, 조각 코드라 실제로 구동하긴 어렵습니다.&lt;/p&gt;

&lt;p&gt;또한 각 url의 설명을 Swagger document를 이용해서 작성했습니다.&lt;/p&gt;

&lt;h1 id=&quot;참고자료&quot;&gt;참고자료&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/nestjsplus/test-auth-chapter-sample&quot;&gt;test-auth-chapter-sample&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/nestjs/docs.nestjs.com/issues/237&quot;&gt;NestJS Authenticated sessions documentation has major gaps and is seemingly wrong #237&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/rucken/core-nestjs&quot;&gt;core-nestjs&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="nestjs" /><category term="passport" /><category term="auth" /><summary type="html">nestjs + passport</summary></entry><entry><title type="html">nestjs 예제 추천</title><link href="https://lahuman.github.io/nestjs_example_swagger/" rel="alternate" type="text/html" title="nestjs 예제 추천" /><published>2020-11-15T00:00:00+09:00</published><updated>2020-11-15T00:00:00+09:00</updated><id>https://lahuman.github.io/nestjs_example_swagger</id><content type="html" xml:base="https://lahuman.github.io/nestjs_example_swagger/">&lt;h1 id=&quot;nestjs-예제-추천&quot;&gt;nestjs 예제 추천&lt;/h1&gt;

&lt;p&gt;nestjs기반으로 Backend 를 개발하고 있습니다.&lt;/p&gt;

&lt;p&gt;예제로 &lt;a href=&quot;https://github.com/lujakob/nestjs-realworld-example-app&quot;&gt;nestjs-realworld-example-app&lt;/a&gt; 프로젝트를 참고 하였습니다.&lt;/p&gt;

&lt;p&gt;해당 프로젝트에서 아쉽게도 Swagger-docs에 body나 param/query 등이 제대로 표기되지 않아서 수정을 하였습니다.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/lujakob/nestjs-realworld-example-app/pull/52?&quot;&gt;pull request&lt;/a&gt;를 날리긴 했는데, 받아들여질지는 모르겠습니다.&lt;/p&gt;

&lt;h1 id=&quot;참고자료&quot;&gt;참고자료&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/lujakob/nestjs-realworld-example-app&quot;&gt;nestjs-realworld-example-app&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="nestjs" /><category term="swagger" /><summary type="html">예제에 swagger body/param/query가 표기 안되어서 수정함</summary></entry><entry><title type="html">javascript에 대한 단상</title><link href="https://lahuman.github.io/20201114/" rel="alternate" type="text/html" title="javascript에 대한 단상" /><published>2020-11-14T00:00:00+09:00</published><updated>2020-11-14T00:00:00+09:00</updated><id>https://lahuman.github.io/20201114</id><content type="html" xml:base="https://lahuman.github.io/20201114/">&lt;h1 id=&quot;1-javascript&quot;&gt;1 Javascript&lt;/h1&gt;

&lt;p&gt;10여년전 javascript는 나에게 계륵과 같은 존재였습니다.
언어라고 하기에는 뭔가 애매하게 동작하는 부분들이 있었습니다.
게다가 브라우져별로 지원하지 않는 내장 함수도 꽤 있었습니다.&lt;/p&gt;

&lt;p&gt;2년전 다시 만난 javascript는 Backend와 Frontend를 아우르는 커다란 생태계를 가지고 있습니다.&lt;/p&gt;

&lt;p&gt;Express를 이용하여 빠르게 개발하면서 쉽지만 제대로 된 개발을 하는지 반신반의하는 마음을 가지고 있습니다.&lt;/p&gt;

&lt;p&gt;왜냐면, Java 언어 이전에 Asp, php를 잠시 해보면서 빠르게는 개발하지만, 나중에 유지보수가 힘들어지는 일을 겪어 보았기 때문입니다.&lt;/p&gt;

&lt;p&gt;하지만, 빠르게 프로토타입을 개발할때는 이만한게 없네요.&lt;/p&gt;

&lt;p&gt;시간이 지나 현재의 고민은 좀더 탄탄하고 빠르게 프로그램을 개발하는 일입니다.&lt;/p&gt;

&lt;p&gt;그러기 위해서 &lt;a href=&quot;https://www.typescriptlang.org/&quot;&gt;typescript&lt;/a&gt;를 도입하려고 합니다.&lt;/p&gt;</content><category term="단상" /><category term="개발" /><summary type="html">빠르게 게발하기 + 단단해지기에 대하여</summary></entry><entry><title type="html">JS] typeof를 이용해서 선언되지 않은 변수 확인</title><link href="https://lahuman.github.io/js_typeof/" rel="alternate" type="text/html" title="JS] typeof를 이용해서 선언되지 않은 변수 확인" /><published>2020-11-08T00:00:00+09:00</published><updated>2020-11-08T00:00:00+09:00</updated><id>https://lahuman.github.io/js_typeof</id><content type="html" xml:base="https://lahuman.github.io/js_typeof/">&lt;h1 id=&quot;js-typeof를-이용해서-선언되지-않은-변수-확인&quot;&gt;JS] typeof를 이용해서 선언되지 않은 변수 확인&lt;/h1&gt;

&lt;blockquote&gt;
  &lt;p&gt;typeof 연산자는 피연산자의 평가 전 자료형을 나타내는 문자열을 반환합니다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;값이 없는 변수와 선언되지 않은 변수에 대한 처리를 어떻게 하시나요?&lt;/p&gt;

&lt;p&gt;일반적으로 값이 없는 변수는 undefined를 가지고 있습니다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;var a;

console.log(a); // undefined

// 처리 방법 

// a의 값이 있을 때만 처리
if(a){

}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;자 그럼, 선언되지 않은 변수를 사용하면 어떻게 될까요?&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;console.log(b); // ReferenceError: b is not defined

// ReferenceError: b is not defined
if(b) {
  console.log('b');
}

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;선언되지 않는 변수와 값이 없는 변수는 다른 개념이며 오류가 발생하면 이후 실행이 안됩니다.&lt;/p&gt;

&lt;p&gt;그럼, 선언되지 않은 변수를 확인 하는 방법이 무엇일까요?&lt;/p&gt;

&lt;p&gt;바로 &lt;code class=&quot;highlighter-rouge&quot;&gt;typeof&lt;/code&gt;를 이용하면 됩니다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;// 선언되었으나 값이 없는 변수
typeof a; // 'undefined'
// 선언하지 않은 변수
typeof b; // 'undefined'

// 조건으로 사용시
if(typeof b === 'undefined') {
  console.log('b 는 값이 없거나, 선언되지 않았습니다.');
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;어디에 활용 할까요?&lt;/p&gt;

&lt;p&gt;특정 브라우저에서 지원하지 기능을 구현할때 사용하면 됩니다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;// atob 가 없을 경우 구현 처리 
// 선언자(var, const, let)를 사용하지 않아야 전역으로 사용 가능하다.
if(typeof atob === &quot;undefined&quot;) {
  atob = function () { /* ... */ };
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;참고-자료&quot;&gt;참고 자료&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Operators/typeof&quot;&gt;typeof&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="javascipt" /><category term="typeof" /><summary type="html">undefined와 ReferenceError에 대한 처리시 유용</summary></entry><entry><title type="html">회사의 가치는 어디서 올까요?</title><link href="https://lahuman.github.io/20201101/" rel="alternate" type="text/html" title="회사의 가치는 어디서 올까요?" /><published>2020-11-01T00:00:00+09:00</published><updated>2020-11-01T00:00:00+09:00</updated><id>https://lahuman.github.io/20201101</id><content type="html" xml:base="https://lahuman.github.io/20201101/">&lt;h1 id=&quot;내가-생각하는-좋은-회사란&quot;&gt;내가 생각하는 좋은 회사란?&lt;/h1&gt;

&lt;h3 id=&quot;q-회사의-가치는-어디서-올까요&quot;&gt;Q. 회사의 가치는 어디서 올까요?&lt;/h3&gt;

&lt;p&gt;제가 생각하는 회사의 가장 큰 가치는 동료입니다.&lt;/p&gt;

&lt;p&gt;물론 연봉이나 복지도 중요하지만, 지속적인 발전과 변화를 위해서는 함께 일하는 사람이 가장 중요합니다.&lt;/p&gt;

&lt;h3 id=&quot;q-어떤-동료가-좋은-동료인가요&quot;&gt;Q. 어떤 동료가 좋은 동료인가요?&lt;/h3&gt;

&lt;p&gt;틀림이 아니라 다름을 인정 할 수 있어야 하고, 모두에게 배울수 있어야 합니다.&lt;/p&gt;

&lt;p&gt;나이, 경력, 학벌에 상관없이 서로 배우고 가끔은 자극제가 되기도 해야하며, 믿고 기댈 수 있는 지지자가 되어야 합니다.&lt;/p&gt;

&lt;h3 id=&quot;q-좋은-동료와-일하면-어떻게-다른가요&quot;&gt;Q. 좋은 동료와 일하면 어떻게 다른가요?&lt;/h3&gt;

&lt;p&gt;새로운 시도를 피하지 않게 됩니다.
나를 믿고, 또는 동료를 믿고 실패해도 실패에 대한 경험을 공유 하면 됩니다.&lt;/p&gt;

&lt;p&gt;내가 실패한 시도가 거름이 되어 다음 시도를 한 동료는 성공 합니다.&lt;/p&gt;

&lt;p&gt;한발자국씩이라도 발전하는 하루하루를 보내게 됩니다.&lt;/p&gt;

&lt;h2 id=&quot;좋은-회사에-들어가는-방법도-있지만-지금-일하는-곳을-좋은-회사로-발전-시키는-방법도-있습니다&quot;&gt;좋은 회사에 들어가는 방법도 있지만, 지금 일하는 곳을 좋은 회사로 발전 시키는 방법도 있습니다.&lt;/h2&gt;</content><category term="단상" /><category term="회사" /><category term="동료" /><summary type="html">내가 생각하는 좋은 회사의 조건</summary></entry><entry><title type="html">Node express에서 Content Security Policy(CSP) 처리 하기</title><link href="https://lahuman.github.io/node_csp_error/" rel="alternate" type="text/html" title="Node express에서 Content Security Policy(CSP) 처리 하기" /><published>2020-10-28T00:00:00+09:00</published><updated>2020-10-28T00:00:00+09:00</updated><id>https://lahuman.github.io/node_csp_error</id><content type="html" xml:base="https://lahuman.github.io/node_csp_error/">&lt;h1 id=&quot;node-express에서-content-security-policycsp-처리-하기&quot;&gt;Node express에서 Content Security Policy(CSP) 처리 하기&lt;/h1&gt;

&lt;p&gt;Google Analytics를 사용하면 CSP 오류가 발생하기도 합니다.&lt;/p&gt;

&lt;p&gt;이때 쉽게 처리 하기 위해서는 helmet 라이브러리의 contentSecurityPolicy 옵션을 false로 변경하면 됩니다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;app.use(
  helmet({
    contentSecurityPolicy: false,
  })
);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Google Analytics에서는 inline script를 사용하기 때문에, 일반적으로 CSP 처리를 위해 복잡한 설정을 사용하게 됩니다.&lt;/p&gt;

&lt;h2 id=&quot;참고-자료&quot;&gt;참고 자료&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTTP/CSP&quot;&gt;Content Security Policy (CSP)&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://analytics.google.com/analytics/web/&quot;&gt;Google Analytics&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.npmjs.com/package/helmet&quot;&gt;helmet&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="express" /><category term="node" /><category term="helmet" /><category term="csp" /><summary type="html">helmet을 사용하면 쉽게 처리 가능합니다</summary></entry><entry><title type="html">Node에서 mssql 사용하기</title><link href="https://lahuman.github.io/node_use_mssql/" rel="alternate" type="text/html" title="Node에서 mssql 사용하기" /><published>2020-10-23T00:00:00+09:00</published><updated>2020-10-23T00:00:00+09:00</updated><id>https://lahuman.github.io/node_use_mssql</id><content type="html" xml:base="https://lahuman.github.io/node_use_mssql/">&lt;h1 id=&quot;node에서-mssql-사용하기&quot;&gt;Node에서 mssql 사용하기&lt;/h1&gt;

&lt;blockquote&gt;
  &lt;p&gt;단독으로 mssql을 사용할 경우 참고하세요.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href=&quot;https://www.npmjs.com/package/mssql&quot;&gt;mssql&lt;/a&gt;라이브러리를 참고해서 간략하게 사용하는 예제입니다.&lt;/p&gt;

&lt;p&gt;설치는 다음과 같습니다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ npm install mssql
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;기본 사용은 가이드에 다음과 같이 나옵니다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;const sql = require('mssql')
 
async () =&amp;gt; {
    try {
        // make sure that any items are correctly URL encoded in the connection string
        await sql.connect('mssql://username:password@localhost/database')
        const result = await sql.query`select * from mytable where id = ${value}`
        console.dir(result)
    } catch (err) {
        // ... error checks
    } finally {
        sql.close();
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;하지만, 일반적으로 Connection을 생성하여 사용하기 보다, Pool을 사용합니다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;sql&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'mssql'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
 
&lt;span class=&quot;c1&quot;&gt;// async/await style:&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;pool&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;sql&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;ConnectionPool&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

 
&lt;span class=&quot;nx&quot;&gt;pool&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;on&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'error'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;err&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// ... error handler&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
 
&lt;span class=&quot;k&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;messageHandler&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;poolConnect&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;pool&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;connect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// ensures that the pool has been created&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;request&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;pool&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// or: new sql.Request(pool)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;query&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'select 1 as number'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;dir&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;err&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'SQL error'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;err&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;finally&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;pool&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;close&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// when your application exits&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;finishThisApplication&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;sql&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;close&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Pool을 사용할 경우 프로그램이 종료 될때 &lt;code class=&quot;highlighter-rouge&quot;&gt;finishThisApplication&lt;/code&gt; 메소드를 호출하여 모든 connection을 닫아 줍니다.&lt;/p&gt;

&lt;p&gt;사용하면서 어려웠던 것이 close을 언제 어떻게 해야 하는지 명확하게 나오지 않아서 어려웠습니다.&lt;/p&gt;

&lt;p&gt;위와 같이 사용할 경우 오류가 발생하지는 않았습니다.&lt;/p&gt;

&lt;h2 id=&quot;참고-자료&quot;&gt;참고 자료&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.npmjs.com/package/mssql&quot;&gt;mssql&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="mssql" /><category term="node" /><summary type="html">단독으로 mssql을 사용할 경우 참조하셔요.</summary></entry><entry><title type="html">어떤 일을 해야 하는가?</title><link href="https://lahuman.github.io/20201020/" rel="alternate" type="text/html" title="어떤 일을 해야 하는가?" /><published>2020-10-20T00:00:00+09:00</published><updated>2020-10-20T00:00:00+09:00</updated><id>https://lahuman.github.io/20201020</id><content type="html" xml:base="https://lahuman.github.io/20201020/">&lt;h1 id=&quot;지금은-많은-일을-하고-있습니다&quot;&gt;지금은 많은 일을 하고 있습니다.&lt;/h1&gt;

&lt;p&gt;일의 가치를 따지기 보다 나에게 할당되는 일을 빠르게 많이 하고 있습니다.&lt;/p&gt;

&lt;p&gt;일을 하다 보면 사공이 여러명일 경우가 종종 있습니다.&lt;/p&gt;

&lt;p&gt;누구의 의견이 가치가 있는지 사실 판단하기 매우 어렵습니다.&lt;/p&gt;

&lt;p&gt;서로의 의견이 틀린게 아니라 다르기 때문인데요.&lt;/p&gt;

&lt;p&gt;보다 어떤 것이 가치가 있을지는 사실 시간이 지나봐야 알 수 있습니다.&lt;/p&gt;

&lt;p&gt;결국 쉽게 구현이 가능한 A안으로 구현하고 사용해보다 불편하면 좀 어려운 구현인 B안으로 변경하는게 가장 좋은 방안으로 생각됩니다.&lt;/p&gt;

&lt;h2 id=&quot;일단-해보고-결정합니다&quot;&gt;일단 해보고 결정합니다.&lt;/h2&gt;</content><category term="단상" /><summary type="html">나에게 가치 있는 일이란 무엇인가?</summary></entry><entry><title type="html">Docker image로 vue build 시 오류 원인</title><link href="https://lahuman.github.io/docker_image_vue_error/" rel="alternate" type="text/html" title="Docker image로 vue build 시 오류 원인" /><published>2020-10-19T00:00:00+09:00</published><updated>2020-10-19T00:00:00+09:00</updated><id>https://lahuman.github.io/docker_image_vue_error</id><content type="html" xml:base="https://lahuman.github.io/docker_image_vue_error/">&lt;h1 id=&quot;docker-image로-vue-build-시-오류-원인&quot;&gt;Docker image로 vue build 시 오류 원인&lt;/h1&gt;

&lt;p&gt;갑자기 빌드시 아래와 같은 오류가 발생했습니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/post_img/vue-cli-service_not_found.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;원인은 yarn 설치시 NODE_ENV 를 &lt;code class=&quot;highlighter-rouge&quot;&gt;production&lt;/code&gt;으로 설정되어 발생합니다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;a href=&quot;https://github.com/vuejs/vue-cli/issues/5107?fbclid=IwAR1PUFDqZZFcsWymlBTqqV-V_wOkYm_OydqAddZHnXxvDSfG14Q8x_QrpyM#issuecomment-586701382&quot;&gt;I found my problem. I was inadvertently setting NODE_ENV to production in my docker-compose so all NPM dev dependencies (including vue-cli-service) were not being installed.&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;를 보면, &lt;code class=&quot;highlighter-rouge&quot;&gt;yarn install&lt;/code&gt; 시 &lt;code class=&quot;highlighter-rouge&quot;&gt;vue-cli-servie&lt;/code&gt;를 설치 하지 않아서 발생합니다.&lt;/p&gt;

&lt;p&gt;해결 방법으로는 ENV (환경변수)를 yarn install 후 build 하기 전에 설정하세요&lt;/p&gt;

&lt;h2 id=&quot;해결-된-dockerfile&quot;&gt;해결 된 Dockerfile&lt;/h2&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;RUN npm install -g yarn
RUN yarn install

ENV NODE_ENV production
RUN yarn build
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;참고-자료&quot;&gt;참고 자료&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/vuejs/vue-cli/issues/5107?fbclid=IwAR1PUFDqZZFcsWymlBTqqV-V_wOkYm_OydqAddZHnXxvDSfG14Q8x_QrpyM#issuecomment-586701382&quot;&gt;I found my problem. I was inadvertently setting NODE_ENV to production in my docker-compose so all NPM dev dependencies (including vue-cli-service) were not being installed.&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="vue" /><category term="docker" /><category term="build" /><summary type="html">/bin/sh: vue-cli-service: not found</summary></entry><entry><title type="html">하루종일 짜증이 나는 날입니다.</title><link href="https://lahuman.github.io/20201011/" rel="alternate" type="text/html" title="하루종일 짜증이 나는 날입니다." /><published>2020-10-11T00:00:00+09:00</published><updated>2020-10-11T00:00:00+09:00</updated><id>https://lahuman.github.io/20201011</id><content type="html" xml:base="https://lahuman.github.io/20201011/">&lt;h1 id=&quot;날씨가-꾸릿해서인지-기분이-안좋다&quot;&gt;날씨가 꾸릿해서인지, 기분이 안좋다.&lt;/h1&gt;

&lt;p&gt;안 좋은 기분이 가족에게도 영향을 끼친다.&lt;/p&gt;

&lt;p&gt;아내도 기분이 안좋아서 아침부터 나가버렸다.&lt;/p&gt;

&lt;p&gt;아이들은 엄마가 없으니 나에게 많은 것을 요구한다.&lt;/p&gt;

&lt;p&gt;어제는 갑자기 늙은 개발자의 가치가 무엇인가에 대한 고민을 했다.&lt;/p&gt;

&lt;p&gt;왜? 갑자기? 이런 생각이 들었는지 모르겠다.&lt;/p&gt;

&lt;p&gt;그냥 젊은 개발자(?)들이 부러워서? 또는 내 가치를 모르겠어서?&lt;/p&gt;

&lt;p&gt;근데 꼭 나의 가치를 회사를 통해서만 알아내는게 아니라는 이야기들 듣고 마음이 편해졌다.&lt;/p&gt;

&lt;h2 id=&quot;기분-좋게-변하도록-노력해야겠다&quot;&gt;기분 좋게 변하도록 노력해야겠다.&lt;/h2&gt;</content><category term="단상" /><summary type="html">기분이 내려가서 올라오지 않는 날...</summary></entry></feed>

<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.6.2">Jekyll</generator><link href="https://lahuman.github.io/feed.xml" rel="self" type="application/atom+xml" /><link href="https://lahuman.github.io/" rel="alternate" type="text/html" /><updated>2018-02-20T13:35:50+09:00</updated><id>https://lahuman.github.io/</id><title type="html">lahuman</title><subtitle>열심히 사는 아저씨</subtitle><entry><title type="html">Python의 LIST 형식을 DICTIONARY 형식으로 변경 하는 방법</title><link href="https://lahuman.github.io/python_list2dict/" rel="alternate" type="text/html" title="Python의 LIST 형식을  DICTIONARY 형식으로 변경 하는 방법" /><published>2018-02-20T00:00:00+09:00</published><updated>2018-02-20T00:00:00+09:00</updated><id>https://lahuman.github.io/python_list2dict</id><content type="html" xml:base="https://lahuman.github.io/python_list2dict/">&lt;h1 id=&quot;python의-list-형식을--dictionary-형식으로-변경-하는-방법&quot;&gt;Python의 LIST 형식을  DICTIONARY 형식으로 변경 하는 방법&lt;/h1&gt;

&lt;p&gt;리스트의 데이터를 중복을 제거하고 나중에 해당 값이 있는지 확인하기 위한 dict형식으로 변경하는 간단한 코드&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;import collections
 
mset = collections.Counter(['a', 'b', 'c', 'a', 'b', 'b'])
print(mset)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;결과는 다음과 같다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Counter({'b': 3, 'a': 2, 'c': 1})
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;중복도 쉽게 제거하고 값에 대한 고민을 하지 않아도 된다.&lt;/p&gt;

&lt;h2 id=&quot;출처&quot;&gt;출처&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;[How do I convert a list into a dictionary in python?](https://www.quora.com/How-do-I-convert-a-list-into-a-dictionary-in-python]&lt;/li&gt;
&lt;/ul&gt;</content><author><name></name></author><category term="Python" /><category term="TIP" /><summary type="html">쉽고 값에 대한 고민 할 필요 없어 좋다.</summary></entry><entry><title type="html">귀가 너무 팔랑된다.</title><link href="https://lahuman.github.io/20180219-phase/" rel="alternate" type="text/html" title="귀가 너무 팔랑된다." /><published>2018-02-19T00:00:00+09:00</published><updated>2018-02-19T00:00:00+09:00</updated><id>https://lahuman.github.io/20180219-phase</id><content type="html" xml:base="https://lahuman.github.io/20180219-phase/">&lt;h1 id=&quot;남의-이야기를-들으면-그-이야기를-믿는다&quot;&gt;남의 이야기를 들으면 그 이야기를 믿는다.&lt;/h1&gt;

&lt;p&gt;남의 이야기를 들으면 그사람 이야기에 나를 대입하게 된다.&lt;/p&gt;

&lt;p&gt;차라리 듣지 말자.&lt;/p&gt;</content><author><name></name></author><category term="단상" /><summary type="html">내 귀가 너무 팔랑되서 문제야...</summary></entry><entry><title type="html">딸 아이와 일상 에피소드 몇가지</title><link href="https://lahuman.github.io/20180214-phase/" rel="alternate" type="text/html" title="딸 아이와 일상 에피소드 몇가지" /><published>2018-02-14T00:00:00+09:00</published><updated>2018-02-14T00:00:00+09:00</updated><id>https://lahuman.github.io/20180214-phase</id><content type="html" xml:base="https://lahuman.github.io/20180214-phase/">&lt;h1 id=&quot;딸-아이와-일상-에피소드-몇가지&quot;&gt;딸 아이와 일상 에피소드 몇가지&lt;/h1&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;큰 응가를 싸면 꼭 엄마 아빠에게 보여준다.
너무 자랑스러운지 가끔은 사진을 찍으라고 시킨다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;유치원에서 집으로 오는 길에 편의점에서 발을 멈추고 큰 츄파츕스 모양의 사탕을 얻었을때, 행복한 미소를 지으며 즐거워 하는 모습이 너무 좋다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;잠을 잘때 엄마만 안고 자면서 내가 둘째의 옆에 누우면 자기 옆으로 오라고 끌고 간다.
그러며 자기전에 물어본다.
“아빠, 이불속에 발쏙 넣었어?”
얼마전 티비에서 방송한 요괴워치(만화)에서 발을 내놓고 자면 잡아가는 에피소드를 보고 많이 놀랬나보다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;둘째는 맛있는건 절대로 누나에게 양보안하고 그자리에서 다 먹는데, 채윤이는 아껴 먹는다고 자기의 보물상자에 넣어 두었다가 먹는다.
그러면 둘째가가 누나에게 가서
“나두! 나두!” 라고 하며 달라고 조른다.
그럼 착하게도 나눠 먹는다.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;보고만 있어도 웃음 짓게 만들어주는 아이인 채윤이가 늘 건강하고 행복했으면 좋겠다.&lt;/strong&gt;&lt;/p&gt;

&lt;h2 id=&quot;건강하고-행복하게-자라다오&quot;&gt;건강하고 행복하게 자라다오&lt;/h2&gt;</content><author><name></name></author><category term="단상" /><summary type="html">일상 에피소드</summary></entry><entry><title type="html">신기한 Elasticsearch의 세계</title><link href="https://lahuman.github.io/20180213-phase/" rel="alternate" type="text/html" title="신기한 Elasticsearch의 세계" /><published>2018-02-13T00:00:00+09:00</published><updated>2018-02-13T00:00:00+09:00</updated><id>https://lahuman.github.io/20180213-phase</id><content type="html" xml:base="https://lahuman.github.io/20180213-phase/">&lt;h1 id=&quot;아주-핫한-elasticsearch를-쓰고-있다&quot;&gt;아주 핫한 Elasticsearch를 쓰고 있다.&lt;/h1&gt;

&lt;p&gt;특정 IP의 range에 대하여 조회를 하려고 할때 사용하는 것은 &lt;strong&gt;wildcard&lt;/strong&gt;를 이용하면 SQL의 LIKE 검색과 같은 효과를 볼수 있다.&lt;/p&gt;

&lt;p&gt;결과에 대하여 기타 작업을 하기 위해서는 추가 작업이 필요하다.&lt;/p&gt;

&lt;p&gt;다음 예제는 /32를 제외하고 가져온 후, 겨로가를 distinct하는 Query이다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;curl -XGET 'localhost:9200/iprange/_search?pretty' -H 'Content-Type: application/json' -d'
{
   &quot;query&quot;:{
      &quot;bool&quot;:{
         &quot;must_not&quot;:[
            {
               &quot;wildcard&quot;:{
                  &quot;range&quot;:{
                     &quot;value&quot;:&quot;*/32&quot;
                  }
               }
            }
         ]
      }
   },
   &quot;aggs&quot;:{
      &quot;uniq_gender&quot;:{
         &quot;terms&quot;:{
            &quot;field&quot;:&quot;range&quot;,
            &quot;size&quot;:10000
         }
      }
   }
}
'
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;참고-자료&quot;&gt;참고 자료&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://iju707.gitbooks.io/elasticsearch/content/_executing_searches.html&quot;&gt;ES 번역 문서&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name></name></author><category term="단상" /><summary type="html">Query를 짜는게 쉽지 않아.</summary></entry><entry><title type="html">신기한 정규식의 세계</title><link href="https://lahuman.github.io/20180212-phase/" rel="alternate" type="text/html" title="신기한 정규식의 세계" /><published>2018-02-12T00:00:00+09:00</published><updated>2018-02-12T00:00:00+09:00</updated><id>https://lahuman.github.io/20180212-phase</id><content type="html" xml:base="https://lahuman.github.io/20180212-phase/">&lt;h1 id=&quot;정규식을-안써본-사람은-있어도-한번만-써본-사람은-없을-듯&quot;&gt;정규식을 안써본 사람은 있어도, 한번만 써본 사람은 없을 듯…&lt;/h1&gt;

&lt;p&gt;어떤 작업의 결과가 특정한 패턴(방화벽 로그 같은)을 지닌다면 해당 패턴을 가지고 결과를 저장하는 프로그램을 보통은 파서 또는 정규화라는 명명을 가진다.&lt;/p&gt;

&lt;p&gt;이때 많이 사용하는 것중 하나가 정규식이다. 정규식의 장점으로는 대부분의 개발 언어를 지원한다.&lt;/p&gt;

&lt;p&gt;정규식은 그룹 묶기, 양의 지정, 매칭 여부 리턴 등 다양한 결과를 받을수 있다.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://regex101.com&quot;&gt;정규식 테스트 추천 사이트&lt;/a&gt;에서 테스트를 하면 쉽게 처리 할 수 있다.&lt;/p&gt;

&lt;h2 id=&quot;참고-자료&quot;&gt;참고 자료&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://ko.wikipedia.org/wiki/%EC%A0%95%EA%B7%9C_%ED%91%9C%ED%98%84%EC%8B%9D&quot;&gt;정규 표현식&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://regex101.com&quot;&gt;정규식 테스트 추천 사이트&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name></name></author><category term="단상" /><summary type="html">정규식 자체도 하나의 언어 같다.</summary></entry><entry><title type="html">이번주 토요일이 시험이다.</title><link href="https://lahuman.github.io/20180208-phase/" rel="alternate" type="text/html" title="이번주 토요일이 시험이다." /><published>2018-02-08T00:00:00+09:00</published><updated>2018-02-08T00:00:00+09:00</updated><id>https://lahuman.github.io/20180208-phase</id><content type="html" xml:base="https://lahuman.github.io/20180208-phase/">&lt;h1 id=&quot;시험은-정말-싫다&quot;&gt;시험은 정말 싫다.&lt;/h1&gt;
&lt;p&gt;내가 아는 것을 명확하게 서술하고 다른 사람에게 설명할 수 있어야 한다.&lt;/p&gt;

&lt;p&gt;사실 그게 생각보다 많이 어렵다.&lt;/p&gt;

&lt;p&gt;시험은 특히 서술형 시험은 그래서 어렵다.&lt;/p&gt;

&lt;p&gt;이번 주 토요일은 시험이다. 시험공부를 많이 못하기도 하였고… 집중이 안된다.&lt;/p&gt;

&lt;p&gt;큰일이다.&lt;/p&gt;

&lt;h2 id=&quot;이미-한번-떨어진건-안비밀&quot;&gt;이미 한번 떨어진건 안비밀..&lt;/h2&gt;</content><author><name></name></author><category term="단상" /><summary type="html">시험은 늘 싫다.</summary></entry><entry><title type="html">Python] File Random access</title><link href="https://lahuman.github.io/python_file_seek/" rel="alternate" type="text/html" title="Python] File Random access" /><published>2018-02-06T00:00:00+09:00</published><updated>2018-02-06T00:00:00+09:00</updated><id>https://lahuman.github.io/python_file_seek</id><content type="html" xml:base="https://lahuman.github.io/python_file_seek/">&lt;h1 id=&quot;python-대용량-파일-처리&quot;&gt;Python] 대용량 파일 처리&lt;/h1&gt;

&lt;p&gt;파이썬에서 큰 파일(200MB)에 대하여 3가지 정규식을 기준으로 데이터를 추출 할 경우 다음과 같은 코드를 작성 할 수 있다.&lt;/p&gt;

&lt;h3 id=&quot;코드-1&quot;&gt;코드 1&lt;/h3&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# -*-coding:utf-8-*-
import re
import time


def get_result(pattern, content):
    return pattern.findall(content)


def append_data(name, pattern, content):
    result = get_result(pattern, content)
    if result:
        dic[name] = result


if name == 'main':
    start = time.time()
    patterns = dict() 
    patterns['patternA'] = re.compile(
        r'SESSION: (\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}):(\d+)-:angry:\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}):(\d+)\((.+?)\),\s',
        re.I)
    patterns['patternB'] = re.compile(r&quot;(?:\d\`){4}\w{6}\`\d{4}\`\d{8}\`(?:\d{2}\:){2}\d{2}\`&quot;, re.I)
    patterns['patternC'] = re.compile(r&quot;devname\=\S+\s(?:device_id|devid)\=\S+\s(?:log_id|logid)\=\S+\stype\=\S+\s&quot;,
                                       re.I)

    dic = dict() # RESULT DATA

    with open('log-sample/500000.log', 'r') as log:
        for content in log:
            for name, pattern in patterns.iteritems():
                append_data(name, pattern, content)

    end = time.time() - start  # end에 코드가 구동된 시간 저장

    print (dic[&quot;patternA&quot;][0][0])
    print (&quot; END TIME : [&quot; + str(end) + &quot;]&quot;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;결과는 각 정규식 별로 다르게 나온다.
1번 정규식은 4초, 2번 정규식은 6초, 3번 정규식은 8초 정도로 3개를 한번에 위의 코드같이 처리 할 경우 &lt;strong&gt;평균 16초&lt;/strong&gt;의 시간이 걸린다.&lt;/p&gt;

&lt;h3 id=&quot;코드-2&quot;&gt;코드 2&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# -*-coding:utf-8-*-
import re
import time
from multiprocessing import Pool


def get_result(pattern, content):
    return pattern.findall(content)


def append_data(dic, pattern, content):
    result = get_result(pattern, content)
    if result:
        dic.append(result)


def processing(pattern):
    dic = []
    with open('log-sample/500000.log', 'r') as log:
        for content in log:
            append_data(dic, pattern, content)
    print (len(dic))


if name == '__main__':
    start = time.time()
    patterns = [] 
    patterns.append(re.compile(
        r'SESSION: (\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}):(\d+)-&amp;gt;(\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}):(\d+)\((.+?)\),\s',
        re.I))
    patterns.append(re.compile(r&quot;(?:\d\`){4}\w{6}\`\d{4}\`\d{8}\`(?:\d{2}\:){2}\d{2}\`&quot;, re.I))
    patterns.append(re.compile(r&quot;devname\=\S+\s(?:device_id|devid)\=\S+\s(?:log_id|logid)\=\S+\stype\=\S+\s&quot;,
                                       re.I))

    pool = Pool(processes=4)
    pool.map(processing, patterns)

    end = time.time() - start  # end에 코드가 구동된 시간 저장
    print (&quot;END TIME : [&quot; + str(end) + &quot;]&quot;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;두번째 코드는 각 패턴별로 multiprocessing을 이용하여 실행하는 코드 이다.&lt;/p&gt;

&lt;p&gt;이 경우 결과시간은 &lt;strong&gt;평균 10초&lt;/strong&gt;의 시간이 걸린다.&lt;/p&gt;

&lt;h3 id=&quot;코드-3&quot;&gt;코드 3&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# -*-coding:utf-8-*-
import re
import time
import os
from multiprocessing import Pool


def get_result(pattern, content):
    return pattern.findall(content)


def append_data(dic, pattern, content):
    result = get_result(pattern, content)
    if result:
        dic.append(result)


filename = 'log-sample/500000.log'


def processing(args):

    pattern = args[0]
    position = args[1]
    reple_dic = args[2]
    start_offset = args[3]
    end_line = args[4]

    dic = []
    line_cnt = 0
    with open(filename, 'r') as log:
        log.seek(start_offset)
        for content in log:
            append_data(dic, pattern, content)
            line_cnt += 1
            if line_cnt == end_line:
                break;

    # TODO use Dic

    print (len(dic))

def to_list(*args):
    return list(args)

if name == '__main__':
    start = time.time()

    # Read in the file once and build a list of line offsets
    line_offset = []
    offset = 0
    with open(filename, 'r') as file:
        for line in file:
            line_offset.append(offset)
            offset += len(line)

    print &quot;file Line Count : &quot;+ str(len(line_offset))

    patterns = [] 
 
    patterns.append(to_list(re.compile(
        r'SESSION: (\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}):(\d+)-&amp;gt;(\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}):(\d+)\((.+?)\),\s',
        re.I), &quot;0,1,2,3,4&quot;, dict(), 0, 250000))
    patterns.append(to_list(re.compile(
        r'SESSION: (\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}):(\d+)-&amp;gt;(\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}):(\d+)\((.+?)\),\s',
        re.I), &quot;0,1,2,3,4&quot;, dict(), line_offset[250000], 250000))

    patterns.append(to_list(re.compile(r&quot;(?:\d\`){4}\w{6}\`\d{4}\`\d{8}\`(?:\d{2}\:){2}\d{2}\`&quot;, re.I), &quot;0,1,2,3,4&quot;, dict(), 0, 250000))
    patterns.append(to_list(re.compile(r&quot;(?:\d\`){4}\w{6}\`\d{4}\`\d{8}\`(?:\d{2}\:){2}\d{2}\`&quot;, re.I), &quot;0,1,2,3,4&quot;, dict(), line_offset[250000], 250000))

    patterns.append(to_list(re.compile(r&quot;devname\=\S+\s(?:device_id|devid)\=\S+\s(?:log_id|logid)\=\S+\stype\=\S+\s&quot;, re.I), &quot;0,1,2,3,4&quot;, dict(), 0, 250000))
    patterns.append(to_list(re.compile(r&quot;devname\=\S+\s(?:device_id|devid)\=\S+\s(?:log_id|logid)\=\S+\stype\=\S+\s&quot;, re.I), &quot;0,1,2,3,4&quot;, dict(), line_offset[250000], 250000))

    pool = Pool(processes=8)
    pool.map(processing, patterns)

    end = time.time() - start  # end에 코드가 구동된 시간 저장
    print (&quot;END TIME : [&quot; + str(end) + &quot;]&quot;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;파일에 대하여 특정 ROW 부터 처리 하도록 병령 처리를 하면 3번 코드와 같은 형식으로 나온다.&lt;/p&gt;

&lt;p&gt;이 경우 실행시간은 &lt;strong&gt;평균 5초&lt;/strong&gt; 가 된다.&lt;/p&gt;

&lt;p&gt;큰 파일에 대한 처리는 결국 file.seek를 이용하여 파일을 쪼개어 병렬로 처리 하는게 가장 빠른 방식 같다.&lt;/p&gt;

&lt;h2 id=&quot;참고-문서&quot;&gt;참고 문서&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://stackoverflow.com/questions/620367/how-to-jump-to-a-particular-line-in-a-huge-text-file&quot;&gt;File Line Offset save&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.regexprn.com/2008/11/read-random-line-in-large-file-in.html&quot;&gt;File random line Read&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://python.omics.wiki/multiprocessing_map/multiprocessing_partial_function_multiple_arguments&quot;&gt;Pool.map - Multiple arguments&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://stackoverflow.com/questions/15489091/python-converting-args-to-list&quot;&gt;Python converting args to list&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name></name></author><category term="python" /><summary type="html">대용량 파일 처리시 병령 &amp; 랜덤 접근을 이용한 빠른 처리</summary></entry><entry><title type="html">게을러 지고 있다.</title><link href="https://lahuman.github.io/20180205-phase/" rel="alternate" type="text/html" title="게을러 지고 있다." /><published>2018-02-05T00:00:00+09:00</published><updated>2018-02-05T00:00:00+09:00</updated><id>https://lahuman.github.io/20180205-phase</id><content type="html" xml:base="https://lahuman.github.io/20180205-phase/">&lt;h1 id=&quot;게으르다-게으르다-게으르다&quot;&gt;게으르다 게으르다 게으르다.&lt;/h1&gt;

&lt;p&gt;아묵것도 하고 싶지 않다. 한 1년만 어디에 짱박혀서 아무것도 안하고 쉬고 싶다.&lt;/p&gt;

&lt;p&gt;갑자기 팽팽하던 실이 끊어진듯, 모든게 의미 없게 느껴진다.&lt;/p&gt;

&lt;h2 id=&quot;잠잠하던-지랄병이-도졌나&quot;&gt;잠잠하던 지랄병이 도졌나.&lt;/h2&gt;</content><author><name></name></author><category term="단상" /><summary type="html">해야 할 일이 있는데 하기가 싫다.</summary></entry><entry><title type="html">Linux에서 디스크의 사용량(%) 기준으로 체크 하는 명령어</title><link href="https://lahuman.github.io/linux_disk_check/" rel="alternate" type="text/html" title="Linux에서 디스크의 사용량(%) 기준으로 체크 하는 명령어" /><published>2018-02-02T00:00:00+09:00</published><updated>2018-02-02T00:00:00+09:00</updated><id>https://lahuman.github.io/linux_disk_check</id><content type="html" xml:base="https://lahuman.github.io/linux_disk_check/">&lt;h1 id=&quot;linux에서-디스크의-사용량-기준으로-체크-하는-명령어&quot;&gt;Linux에서 디스크의 사용량(%) 기준으로 체크 하는 명령어&lt;/h1&gt;

&lt;p&gt;df 명령어로 사용중인 디스크 양을 체크 하는 명령어를 간단하게 작성하였다.&lt;/p&gt;

&lt;p&gt;t 옵션의 의미는 File System Type이며 ext4 파일 시스템일 경우 결과를 출력 하도록 하였다.&lt;/p&gt;

&lt;p&gt;결과에서는 해더와 % 기호를 제외하고 표출한다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;df -ht ext4 | awk '{ if (NR!=1) {print $1, substr($5, 1, length($5)-1)} }'
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;결과 :&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;/dev/sda1 52
/dev/sdb1 37
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name></name></author><category term="linux" /><summary type="html">df + awk 명령어로 처리</summary></entry><entry><title type="html">JPA에서 Entity에서 Enum을 사용할 경우 getInt 에러 발생시</title><link href="https://lahuman.github.io/jpa_enum_getInt_error/" rel="alternate" type="text/html" title="JPA에서 Entity에서 Enum을 사용할 경우 getInt 에러 발생시" /><published>2018-02-01T00:00:00+09:00</published><updated>2018-02-01T00:00:00+09:00</updated><id>https://lahuman.github.io/jpa_enum_getInt_error</id><content type="html" xml:base="https://lahuman.github.io/jpa_enum_getInt_error/">&lt;h1 id=&quot;jpa에서-entity에서-enum을-사용할-경우-getint-에러-발생시&quot;&gt;JPA에서 Entity에서 Enum을 사용할 경우 getInt 에러 발생시&lt;/h1&gt;

&lt;p&gt;JPA Entity에서 Enum 타입을 사용할 경우 다음 어노테이션을 처리해야 String 타입으로 받을수 있다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;@Entity
@Getter
@Setter
public class Person{
    @Enumerated(EnumType.STRING) // 없을 경우 INT 형식으로 Return
    private Yn useYn;
}

public enum Yn {
    Y,N
} 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name></name></author><category term="JPA" /><category term="ENUM" /><summary type="html">Enum의 실제 데이터는 INT 다.</summary></entry></feed>
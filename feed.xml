<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.6.3">Jekyll</generator><link href="https://lahuman.github.io/feed.xml" rel="self" type="application/atom+xml" /><link href="https://lahuman.github.io/" rel="alternate" type="text/html" /><updated>2025-10-20T13:59:01+00:00</updated><id>https://lahuman.github.io/feed.xml</id><title type="html">lahuman</title><subtitle>열심히 사는 아저씨</subtitle><entry><title type="html">Docker에서 curl은 되는데 Node.js fetch만 실패할 때 (feat. undici)</title><link href="https://lahuman.github.io/fetch-undici-docker-error/" rel="alternate" type="text/html" title="Docker에서 curl은 되는데 Node.js fetch만 실패할 때 (feat. undici)" /><published>2025-10-20T00:00:00+00:00</published><updated>2025-10-20T00:00:00+00:00</updated><id>https://lahuman.github.io/fetch-undici-docker-error</id><content type="html" xml:base="https://lahuman.github.io/fetch-undici-docker-error/">&lt;p&gt;개발을 하다 보면 Docker 컨테이너 내부에서 호스트 머신(PC)의 API를 호출해야 하는 경우가 종종 있습니다.&lt;/p&gt;

&lt;p&gt;일반적으로 Docker for Mac/Windows에서는 &lt;code class=&quot;highlighter-rouge&quot;&gt;host.docker.internal&lt;/code&gt;을 사용하지만, Linux 환경에서는 Docker 브리지의 기본 게이트웨이 주소인 &lt;code class=&quot;highlighter-rouge&quot;&gt;172.17.0.1&lt;/code&gt;을 사용하는 경우가 많습니다.&lt;/p&gt;

&lt;p&gt;그런데 이 주소로 API를 호출하는 과정에서 매우 이상한 문제를 겪게 되어 트러블슈팅 과정을 공유해보고자 합니다.&lt;/p&gt;

&lt;h2 id=&quot;증상-curl은-되는데-fetch는-실패&quot;&gt;증상: curl은 되는데 fetch는 실패&lt;/h2&gt;

&lt;p&gt;먼저, 컨테이너 내부에서 호스트(&lt;code class=&quot;highlighter-rouge&quot;&gt;172.17.0.1&lt;/code&gt;)로 네트워크 연결이 되는지 확인하기 위해 &lt;code class=&quot;highlighter-rouge&quot;&gt;curl&lt;/code&gt; 명령어를 사용했습니다.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;eb7b0d89f82b:/app# curl http://172.17.0.1:6000/webhook/.... &lt;span class=&quot;nt&quot;&gt;-v&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt; Trying 172.17.0.1:6000...
&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt; Connected to 172.17.0.1 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;172.17.0.1&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; port 6000
...
&amp;lt; HTTP/1.1 401 Unauthorized
&amp;lt; WWW-Authenticate: Basic &lt;span class=&quot;nv&quot;&gt;realm&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Webhook&quot;&lt;/span&gt;
...
Authorization is required!
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;401 Unauthorized&lt;/code&gt; 응답이 왔습니다. 이는 서버가 인증을 요구한다는 뜻으로, &lt;strong&gt;네트워크 연결 자체는 성공&lt;/strong&gt;했다는 의미입니다.&lt;/p&gt;

&lt;p&gt;그런데 동일한 주소를 Node.js의 &lt;code class=&quot;highlighter-rouge&quot;&gt;fetch&lt;/code&gt; API를 사용하여 호출하면 다른 결과가 나옵니다.&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// test.js&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// (인증 로직은 편의상 생략)&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;url&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'http://172.17.0.1:6000/webhook/....'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;response&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;fetch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;method&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'GET'&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kr&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;());&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'Error calling webhook:'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;eb7b0d89f82b:/app# node test.js

Error calling webhook: fetch failed
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;분명 &lt;code class=&quot;highlighter-rouge&quot;&gt;curl&lt;/code&gt;로는 연결이 되는데, 왜 Node.js의 &lt;code class=&quot;highlighter-rouge&quot;&gt;fetch&lt;/code&gt;만 &lt;code class=&quot;highlighter-rouge&quot;&gt;fetch failed&lt;/code&gt;라는 네트워크 연결 실패 오류를 반환하는 것일까요?&lt;/p&gt;

&lt;h2 id=&quot;원인-curl과-fetch는-다르다&quot;&gt;원인: curl과 fetch는 다르다&lt;/h2&gt;

&lt;p&gt;이 문제의 핵심은 &lt;strong&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;curl&lt;/code&gt;과 Node.js의 &lt;code class=&quot;highlighter-rouge&quot;&gt;fetch&lt;/code&gt;가 동일하게 작동하지 않는다&lt;/strong&gt;는 점입니다.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;strong&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;curl&lt;/code&gt;&lt;/strong&gt;: C언어로 작성된, 매우 표준적이고 검증된 저수준(low-level) HTTP 클라이언트입니다.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Node.js &lt;code class=&quot;highlighter-rouge&quot;&gt;fetch&lt;/code&gt;&lt;/strong&gt;: Node.js 18 버전부터 내장된 &lt;code class=&quot;highlighter-rouge&quot;&gt;fetch&lt;/code&gt; API는 &lt;strong&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;undici&lt;/code&gt;&lt;/strong&gt;라는 이름의 별도 HTTP 클라이언트 라이브러리를 기반으로 합니다.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;즉, &lt;code class=&quot;highlighter-rouge&quot;&gt;curl&lt;/code&gt;이 성공했다는 것은 “네트워크 경로, IP, 포트, 방화벽”은 모두 정상이란 뜻입니다.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;fetch failed&lt;/code&gt;가 발생한 이유는, Node.js의 &lt;code class=&quot;highlighter-rouge&quot;&gt;undici&lt;/code&gt; 구현체가 특정 Docker 네트워크 환경(이 경우 &lt;code class=&quot;highlighter-rouge&quot;&gt;172.17.0.1&lt;/code&gt; 게이트웨이)과 통신하는 과정에서 호환성 문제를 일으켰기 때문입니다. (주로 IPv6/IPv4 처리 방식 차이나 커넥션 풀링 방식의 차이로 인해 발생하곤 합니다)&lt;/p&gt;

&lt;h3 id=&quot;axios는-어떨까요&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;axios&lt;/code&gt;는 어떨까요?&lt;/h3&gt;

&lt;p&gt;흥미롭게도, 이 상황에서 &lt;code class=&quot;highlighter-rouge&quot;&gt;axios&lt;/code&gt; 라이브러리를 사용하면 대부분 성공합니다.&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;axios&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'axios'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// const response = await axios.get(url, { auth: { ... } });&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;axios&lt;/code&gt;가 성공하는 이유는 &lt;code class=&quot;highlighter-rouge&quot;&gt;undici&lt;/code&gt;와 다르게, Node.js의 &lt;strong&gt;내장 &lt;code class=&quot;highlighter-rouge&quot;&gt;http&lt;/code&gt; 모듈&lt;/strong&gt;을 기반으로 작동하기 때문입니다. 이 &lt;code class=&quot;highlighter-rouge&quot;&gt;http&lt;/code&gt; 모듈은 &lt;code class=&quot;highlighter-rouge&quot;&gt;curl&lt;/code&gt;과 유사하게 더 고전적이고 단순한 방식으로 통신하므로 호환성 문제를 피할 수 있었던 것입니다.&lt;/p&gt;

&lt;h2 id=&quot;해결-undici를-우회하기&quot;&gt;해결: &lt;code class=&quot;highlighter-rouge&quot;&gt;undici&lt;/code&gt;를 우회하기&lt;/h2&gt;

&lt;p&gt;원인을 알았으니 해결 방법은 명확합니다. &lt;code class=&quot;highlighter-rouge&quot;&gt;undici&lt;/code&gt; 기반의 &lt;code class=&quot;highlighter-rouge&quot;&gt;fetch&lt;/code&gt; 대신, &lt;code class=&quot;highlighter-rouge&quot;&gt;http&lt;/code&gt; 모듈 기반의 클라이언트를 사용하면 됩니다.&lt;/p&gt;

&lt;h3 id=&quot;방법-1-axios-라이브러리-사용-권장&quot;&gt;방법 1. &lt;code class=&quot;highlighter-rouge&quot;&gt;axios&lt;/code&gt; 라이브러리 사용 (권장)&lt;/h3&gt;

&lt;p&gt;가장 간단하고 현대적인 방법입니다. &lt;code class=&quot;highlighter-rouge&quot;&gt;npm&lt;/code&gt;이나 &lt;code class=&quot;highlighter-rouge&quot;&gt;yarn&lt;/code&gt;으로 &lt;code class=&quot;highlighter-rouge&quot;&gt;axios&lt;/code&gt;를 설치하고 코드를 수정합니다.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# ESM 환경에서 require 오류가 났던 것을 기억합니다.&lt;/span&gt;
npm install axios
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// test.js&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;axios&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'axios'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// require 대신 import 사용&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;url&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'http://172.17.0.1:6000/webhook/....'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// 401 오류를 해결하기 위해 인증 정보 추가&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;auth&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;username&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'YOUR_USERNAME'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;password&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'YOUR_PASSWORD'&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// axios는 auth 객체를 Basic 인증 헤더로 자동 변환해 줍니다.&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;response&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;axios&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;auth&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;auth&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
  
  &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'Webhook GET call successful!'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'Status Code:'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;status&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'Server response:'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// ... (Axios 오류 처리) ...&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'Error calling webhook:'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;방법-2-nodejs-내장-http-모듈-사용&quot;&gt;방법 2. Node.js 내장 &lt;code class=&quot;highlighter-rouge&quot;&gt;http&lt;/code&gt; 모듈 사용&lt;/h3&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;axios&lt;/code&gt; 같은 외부 라이브러리를 설치하기 어려운 환경이라면, Node.js에 100% 내장된 &lt;code class=&quot;highlighter-rouge&quot;&gt;http&lt;/code&gt; 모듈을 직접 사용할 수 있습니다. &lt;code class=&quot;highlighter-rouge&quot;&gt;curl&lt;/code&gt;과 거의 동일하게 작동합니다.&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// test.js (Node.js 내장 http 모듈 사용)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;http&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'http'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// ESM 방식&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;URL&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'url'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// URL 파싱을 위해 추가&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;urlString&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'http://172.17.0.1:6000/webhook/....'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// 인증 정보&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;credentials&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'YOUR_USERNAME:YOUR_PASSWORD'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;encodedCredentials&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Buffer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;from&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;credentials&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;toString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'base64'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;hostname&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;port&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;pathname&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;URL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;urlString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;options&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;hostname&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;hostname&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;port&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;port&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;pathname&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;method&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'GET'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;headers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;s1&quot;&gt;'Authorization'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;`Basic &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;encodedCredentials&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;`&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;req&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;http&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;options&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;`Status Code: &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;statusCode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;''&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;on&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'data'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;chunk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;chunk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;on&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'end'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'Server response:'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;req&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;on&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'error'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// 이 오류는 'fetch failed'와 동일한 네트워크 오류입니다.&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'Error calling webhook:'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;req&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;마무리&quot;&gt;마무리&lt;/h2&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;fetch failed&lt;/code&gt;라는 단순한 오류 메시지를 만났을 때, 무조건 네트워크 방화벽이나 IP 주소 문제라고 단정 짓기 쉽습니다.&lt;/p&gt;

&lt;p&gt;하지만 &lt;code class=&quot;highlighter-rouge&quot;&gt;curl&lt;/code&gt;과 같은 기본 도구로 교차 검증을 해보니, 문제는 네트워크가 아니라 &lt;strong&gt;Node.js의 &lt;code class=&quot;highlighter-rouge&quot;&gt;fetch&lt;/code&gt; 구현체인 &lt;code class=&quot;highlighter-rouge&quot;&gt;undici&lt;/code&gt;&lt;/strong&gt;와 특정 Docker 네트워크 환경 간의 호환성 문제임을 알 수 있었습니다.&lt;/p&gt;

&lt;p&gt;비슷한 문제를 겪으신다면, &lt;code class=&quot;highlighter-rouge&quot;&gt;fetch&lt;/code&gt; 대신 &lt;code class=&quot;highlighter-rouge&quot;&gt;axios&lt;/code&gt;나 &lt;code class=&quot;highlighter-rouge&quot;&gt;http&lt;/code&gt; 기본 모듈을 사용해 보시는 것을 추천해 드립니다.&lt;/p&gt;

&lt;h2 id=&quot;레퍼런스-references&quot;&gt;레퍼런스 (References)&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/Mintplex-Labs/anything-llm/issues/585&quot;&gt;GitHub Issue: &lt;code class=&quot;highlighter-rouge&quot;&gt;172.17.0.1&lt;/code&gt; 주소에서 &lt;code class=&quot;highlighter-rouge&quot;&gt;fetch failed&lt;/code&gt; 발생 사례 (Mintplex-Labs/anything-llm)&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://community.n8n.io/t/http-request-node-fails-to-connect-to-host-docker-internal-but-wget-from-inside-the-container-works/151998&quot;&gt;n8n Community: Node.js HTTP 노드는 실패하지만, &lt;code class=&quot;highlighter-rouge&quot;&gt;wget&lt;/code&gt;은 성공하는 사례&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/nodejs/undici/issues/1248&quot;&gt;GitHub Issue: &lt;code class=&quot;highlighter-rouge&quot;&gt;undici&lt;/code&gt;의 &lt;code class=&quot;highlighter-rouge&quot;&gt;TypeError: fetch failed&lt;/code&gt; (nodejs/undici)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name></name></author><category term="fetch" /><category term="curl" /><category term="undici" /><category term="network" /><summary type="html">http 또는 Axios 를 이용하면 간단하게 해결</summary></entry><entry><title type="html">SlideFlow :: 이미지를 영샹으로</title><link href="https://lahuman.github.io/slide/" rel="alternate" type="text/html" title="SlideFlow :: 이미지를 영샹으로" /><published>2025-09-30T00:00:00+00:00</published><updated>2025-09-30T00:00:00+00:00</updated><id>https://lahuman.github.io/slide</id><content type="html" xml:base="https://lahuman.github.io/slide/">&lt;h1 id=&quot;-slideflow&quot;&gt;✨ SlideFlow&lt;/h1&gt;

&lt;h2 id=&quot;바로가기&quot;&gt;&lt;a href=&quot;https://lahuman.github.io/slideshow-editor/dist/&quot;&gt;바로가기&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;SlideFlow는 당신의 흩어진 이미지들을 단 몇 번의 클릭만으로 흐름이 있는 하나의 스토리로 완성합니다.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;웹 기반의 인터랙티브 슬라이드쇼 에디터, SlideFlow를 통해 전문가 수준의 동영상 스토리를 가장 빠르고 직관적으로 만들어보세요. 복잡한 타임라인과 어려운 설정에 얽매이지 않고, 당신의 창의력에만 집중할 수 있습니다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;💡 &lt;strong&gt;Note:&lt;/strong&gt; SlideFlow는 데스크톱 환경에 최적화되어 있습니다. 최상의 경험을 위해 PC에서 접속해주세요.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;-주요-기능&quot;&gt;🚀 주요 기능&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;모던하고 직관적인 UI&lt;/strong&gt;: 전문적인 다크 모드 스튜디오 테마를 적용하여 콘텐츠에 집중할 수 있는 환경을 제공합니다.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;이미지 라이브러리&lt;/strong&gt;: 드래그 앤 드롭 또는 파일 선택으로 이미지를 손쉽게 관리합니다.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;다중 트랙 타임라인&lt;/strong&gt;: 간트 차트 스타일의 타임라인에서 여러 이미지를 동시에, 다른 트랙에 배치하여 복합적인 연출을 할 수 있습니다.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;실시간 캔버스 편집&lt;/strong&gt;: 타임라인에서 슬라이드를 선택하면 중앙 캔버스에 표시되며, 위치, 크기, 회전 등 모든 변경 사항이 실시간으로 반영됩니다.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;다양한 속성 및 전환 효과&lt;/strong&gt;: 각 슬라이드의 재생 시간, 화면 순서(zIndex)는 물론, ‘페이드’, ‘슬라이드’, ‘줌’, ‘플립’ 등 다채로운 전환 효과를 설정할 수 있습니다.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;다중 선택 및 동시 편집&lt;/strong&gt;: Ctrl/Cmd 또는 Shift 키를 조합하여 여러 슬라이드를 동시에 선택하고 속성을 한 번에 편집하여 작업 효율을 높일 수 있습니다.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;반응형 캔버스 및 고품질 미리보기&lt;/strong&gt;:
    &lt;ul&gt;
      &lt;li&gt;&lt;strong&gt;비율 기반 캔버스&lt;/strong&gt;: 16:9, 4:3 등 원하는 종횡비를 설정하면, 캔버스가 브라우저 크기에 맞춰 반응형으로 조절됩니다.&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;몰입형 전체 화면 미리보기&lt;/strong&gt;: 헤더와 컨트롤러가 사라진 실제 영상 캔버스 영역만으로 전체 화면을 채워, 완성된 슬라이드쇼를 온전히 감상할 수 있습니다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;유연한 작업 공간&lt;/strong&gt;: 좌우 패널을 접고 펼 수 있어, 현재 작업에 맞게 공간을 최적화할 수 있습니다.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;프로젝트 가져오기/내보내기&lt;/strong&gt;: 작업 내용을 이미지 데이터가 포함된 JSON 파일로 저장하고, 언제든지 다시 불러와 작업을 이어갈 수 있습니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;-최근-변경-사항-v11&quot;&gt;🔄 최근 변경 사항 (v1.1)&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;캔버스 회전 기능 추가&lt;/strong&gt;: 이제 캔버스 위의 이미지를 직접 선택하고 회전 핸들을 드래그하여 시각적으로 회전시킬 수 있습니다.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;터치 장치 지원 개선&lt;/strong&gt;: 태블릿 및 모바일 장치에서 타임라인 아이템을 드래그 앤 드롭할 수 있도록 수정되었습니다.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;선택 테두리 개선&lt;/strong&gt;: 캔버스에서 크기가 조절되거나 회전된 이미지의 선택 테두리가 이제 이미지와 함께 정확하게 표시됩니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;️-기술-스택&quot;&gt;🛠️ 기술 스택&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;프레임워크&lt;/strong&gt;: React (Vite)&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;언어&lt;/strong&gt;: TypeScript&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;핵심 로직&lt;/strong&gt;: React Hooks&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;드래그 앤 드롭&lt;/strong&gt;: &lt;code class=&quot;highlighter-rouge&quot;&gt;@dnd-kit/core&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;react-draggable&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;스타일링&lt;/strong&gt;: CSS (Creative Studio Dark Theme)&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;아이콘&lt;/strong&gt;: &lt;code class=&quot;highlighter-rouge&quot;&gt;react-icons&lt;/code&gt; (Feather Icons)&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;-설치-및-실행&quot;&gt;📖 설치 및 실행&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;strong&gt;저장소 복제&lt;/strong&gt;:
    &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git clone https://github.com/lahuman/slideshow-editor.git
&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;slideshow-editor
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;의존성 설치&lt;/strong&gt;:
    &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;npm install
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;개발 서버 실행&lt;/strong&gt;:
    &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;npm run dev
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;브라우저에서 &lt;code class=&quot;highlighter-rouge&quot;&gt;http://localhost:5173&lt;/code&gt;으로 접속합니다.&lt;/li&gt;
&lt;/ol&gt;</content><author><name></name></author><category term="SlideFlow" /><summary type="html">이미지를 영상으로 슬라이드 쇼 에디터</summary></entry><entry><title type="html">요즘은 inkPad를 사용해서 손글씨 작성중입니다.</title><link href="https://lahuman.github.io/20250619/" rel="alternate" type="text/html" title="요즘은 inkPad를 사용해서 손글씨 작성중입니다." /><published>2025-06-19T00:00:00+00:00</published><updated>2025-06-19T00:00:00+00:00</updated><id>https://lahuman.github.io/20250619</id><content type="html" xml:base="https://lahuman.github.io/20250619/">&lt;h1 id=&quot;개인-프로젝트로-진행한-inkpad를-계속-고도화-하고-있습니다&quot;&gt;개인 프로젝트로 진행한 InkPad를 계속 고도화 하고 있습니다.&lt;/h1&gt;

&lt;p&gt;&lt;a href=&quot;https://inkpad.giize.com/view.html?publicId=ef7dd407-a536-42c5-84b9-9c187bed59b7&amp;amp;yearMonth=2025.06&amp;amp;displayName=%EC%9E%90%EB%91%90&amp;amp;createdAt=2025-06-18T11%3A00%3A36.794Z&quot;&gt;누군가의 그림&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;첨음 손쉽게 빠르게 한장 그리는 온라인 그림판 이라는 아이디어를 가진건 몇 년이 전이였습니다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;구현을 위해서 몇번의 시도를 했었지만, 당시 능력 부족으로 꾸준하게 진행이 되지 않았습니다.&lt;/p&gt;

&lt;p&gt;최근에 AI와 간략한 아이디어 회의를 진행하면서 함께 만들어 보았습니다.&lt;/p&gt;

&lt;p&gt;내가 부족한 기획력, 디자인, 그리고 코드까지 완벽하지는 않아도 꾸준하게 지원해주는 무언가가 있다는건 큰힘이 된다고 다시 한번 느꼈네요.&lt;/p&gt;

&lt;p&gt;몇년 안에 개발자라는 직군에 큰 변화가 올거라고 생각됩니다.&lt;/p&gt;

&lt;p&gt;빠르게 변화하는 세상에 발맞춰서 나아갈 수 있도록 노력해야겠습니다.&lt;/p&gt;

&lt;h2 id=&quot;inkpad-바로-가기&quot;&gt;&lt;a href=&quot;https://inkpad.giize.com/index.html&quot;&gt;InkPad 바로 가기&lt;/a&gt;&lt;/h2&gt;</content><author><name></name></author><category term="단상" /><category term="inkpad" /><summary type="html">어제도 늦은 밤까지 개발하느라 잠을 못...</summary></entry><entry><title type="html">InkPad :: 웹 기반 그림판</title><link href="https://lahuman.github.io/inkPad/" rel="alternate" type="text/html" title="InkPad :: 웹 기반 그림판" /><published>2025-06-11T00:00:00+00:00</published><updated>2025-06-11T00:00:00+00:00</updated><id>https://lahuman.github.io/inkPad</id><content type="html" xml:base="https://lahuman.github.io/inkPad/">&lt;h1 id=&quot;모바일-그림판-및-갤러리-웹-애플리케이션&quot;&gt;모바일 그림판 및 갤러리 웹 애플리케이션&lt;/h1&gt;

&lt;h2 id=&quot;바로가기&quot;&gt;&lt;a href=&quot;https://inkpad.giize.com&quot;&gt;바로가기&lt;/a&gt;&lt;/h2&gt;

&lt;h2 id=&quot;1-프로젝트-개요&quot;&gt;1. 프로젝트 개요&lt;/h2&gt;

&lt;p&gt;본 프로젝트는 웹 기반의 그림판 애플리케이션으로, 사용자가 그림을 그리고 이를 서버에 저장, 수정, 삭제할 수 있는 기능을 제공합니다. 
또한, 저장된 그림들을 갤러리 형태로 목록을 보고, 특정 그림을 선택하여 크게 볼 수 있는 기능을 포함합니다. 
모바일 친화적인 반응형 디자인과 함께 현대적인 UI/UX를 지향합니다.&lt;/p&gt;

&lt;h2 id=&quot;2-주요-기능&quot;&gt;2. 주요 기능&lt;/h2&gt;

&lt;h3 id=&quot;21-그림판&quot;&gt;2.1. 그림판&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;드로잉 도구&lt;/strong&gt;: 펜, 지우개 기본 도구 제공.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;도구 옵션&lt;/strong&gt;: 선 색상 변경 (컬러 피커), 선 굵기 조절 (슬라이더).&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;캔버스 액션&lt;/strong&gt;: 실행 취소 (Undo), 다시 실행 (Redo), 캔버스 전체 지우기.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;고해상도 지원&lt;/strong&gt;: 내부 캔버스 해상도 1000x1000 픽셀로 설정하여 그림 품질 향상.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;서버 연동&lt;/strong&gt;:
    &lt;ul&gt;
      &lt;li&gt;&lt;strong&gt;새 그림 저장&lt;/strong&gt;: 그림 제목 입력 후 이미지(PNG)와 압축된 그림 데이터(gzipped JSON)를 서버에 &lt;code class=&quot;highlighter-rouge&quot;&gt;POST&lt;/code&gt; 요청으로 저장. 성공 시 &lt;code class=&quot;highlighter-rouge&quot;&gt;mainUuid&lt;/code&gt;를 클립보드에 복사하고 메시지로 ID 안내.&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;기존 그림 수정&lt;/strong&gt;: 로드된 그림 수정 후 &lt;code class=&quot;highlighter-rouge&quot;&gt;PUT&lt;/code&gt; 요청으로 서버에 업데이트.&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;그림 삭제&lt;/strong&gt;: &lt;code class=&quot;highlighter-rouge&quot;&gt;DELETE&lt;/code&gt; 요청으로 서버에서 현재 그림 삭제 후 갤러리 페이지로 이동.&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;ID로 불러오기&lt;/strong&gt;: &lt;code class=&quot;highlighter-rouge&quot;&gt;mainUuid&lt;/code&gt;를 직접 입력하여 특정 그림을 서버에서 불러와 편집.&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;URL 연동&lt;/strong&gt;: URL 파라미터 (&lt;code class=&quot;highlighter-rouge&quot;&gt;?mainUuid=...&lt;/code&gt;)를 통해 특정 그림을 로드하여 편집 가능. 저장/로드 시 URL 업데이트.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;로컬 파일 기능&lt;/strong&gt;:
    &lt;ul&gt;
      &lt;li&gt;현재 그림을 로컬 PNG 이미지 파일로 저장.&lt;/li&gt;
      &lt;li&gt;로컬의 &lt;code class=&quot;highlighter-rouge&quot;&gt;.json&lt;/code&gt; 또는 &lt;code class=&quot;highlighter-rouge&quot;&gt;.drawing.gz&lt;/code&gt; 파일을 불러와 그림판에 로드 (서버 연동 해제).&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;사용자 경험&lt;/strong&gt;:
    &lt;ul&gt;
      &lt;li&gt;터치 인터페이스 지원 및 모바일 반응형 디자인.&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;user-scalable=no&lt;/code&gt; 및 &lt;code class=&quot;highlighter-rouge&quot;&gt;overscroll-behavior: none&lt;/code&gt; 등으로 모바일 드로잉 경험 최적화.&lt;/li&gt;
      &lt;li&gt;키보드 단축키 지원 (Ctrl+Z, Ctrl+Y, Ctrl+S).&lt;/li&gt;
      &lt;li&gt;상태 메시지 시스템 (성공, 오류, 정보 알림).&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;localStorage&lt;/code&gt;를 사용하여 사용자가 관리하는 그림 정보 (ID, 이름 등) 일부 저장.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;22-갤러리&quot;&gt;2.2. 갤러리&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;그림 목록 표시&lt;/strong&gt;: 저장된 그림들을 카드 형태로 표시 (이미지, 제목, 생성 날짜).&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;무한 스크롤&lt;/strong&gt;: 스크롤 시 다음 그림 목록을 10~12개씩 동적으로 로드.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;초기 화면 채우기&lt;/strong&gt;: PC 화면에서는 처음 로드 시 화면 높이를 채울 만큼의 그림을 미리 로드.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;그림 보기 연동&lt;/strong&gt;: 각 그림 카드를 클릭하면 &lt;code class=&quot;highlighter-rouge&quot;&gt;view.html&lt;/code&gt;로 이동하여 해당 그림의 상세 정보(이미지 URL, 제목, 날짜)를 전달.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;ID로 그림 열기&lt;/strong&gt;: 헤더의 “ID로 불러오기” 버튼을 통해 &lt;code class=&quot;highlighter-rouge&quot;&gt;mainUuid&lt;/code&gt;를 입력받아 &lt;code class=&quot;highlighter-rouge&quot;&gt;draw.html&lt;/code&gt;에서 해당 그림을 바로 열 수 있도록 링크.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;새 그림 작성 링크&lt;/strong&gt;: “새 그림” 버튼을 통해 &lt;code class=&quot;highlighter-rouge&quot;&gt;draw.html&lt;/code&gt;로 이동.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;23-그림-상세-보기&quot;&gt;2.3. 그림 상세 보기&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;갤러리에서 선택한 그림을 큰 이미지로 표시.&lt;/li&gt;
  &lt;li&gt;그림 제목 및 생성 날짜 정보 제공.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;URL 공유&lt;/strong&gt;: “공유하기” 버튼 클릭 시 현재 페이지의 URL(이미지 경로에 &lt;code class=&quot;highlighter-rouge&quot;&gt;publicId&lt;/code&gt; 사용, &lt;code class=&quot;highlighter-rouge&quot;&gt;mainUuid&lt;/code&gt; 미노출)을 클립보드에 복사.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;constants.js&lt;/code&gt;를 사용하여 이미지 기본 경로 관리.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;24-서버&quot;&gt;2.4. 서버&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;API 제공&lt;/strong&gt;:
    &lt;ul&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;POST /api/drawings&lt;/code&gt;: 새 그림 저장 (이미지 + 압축된 JSON 데이터). &lt;code class=&quot;highlighter-rouge&quot;&gt;mainUuid&lt;/code&gt; 및 &lt;code class=&quot;highlighter-rouge&quot;&gt;publicId&lt;/code&gt; 생성.&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;GET /api/drawings&lt;/code&gt;: 그림 목록 조회 (페이지네이션 지원: &lt;code class=&quot;highlighter-rouge&quot;&gt;page&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;limit&lt;/code&gt; 파라미터). 각 항목에 &lt;code class=&quot;highlighter-rouge&quot;&gt;publicId&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;yearMonth&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;displayName&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;imageUrl&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;createdAt&lt;/code&gt; 포함.&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;GET /api/drawings/:mainUuid/json&lt;/code&gt;: 특정 그림의 JSON 데이터 조회.&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;PUT /api/drawings/:mainUuid&lt;/code&gt;: 기존 그림 업데이트.&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;DELETE /api/drawings/:mainUuid&lt;/code&gt;: 특정 그림 삭제.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;데이터 저장&lt;/strong&gt;:
    &lt;ul&gt;
      &lt;li&gt;드로잉 데이터(메타데이터)는 &lt;code class=&quot;highlighter-rouge&quot;&gt;uploads/db.json&lt;/code&gt; 파일에 LowDB를 사용하여 관리.&lt;/li&gt;
      &lt;li&gt;실제 파일 저장 구조:
        &lt;ul&gt;
          &lt;li&gt;이미지: &lt;code class=&quot;highlighter-rouge&quot;&gt;uploads/images/YYYY.MM/publicId.png&lt;/code&gt;&lt;/li&gt;
          &lt;li&gt;그림 데이터: &lt;code class=&quot;highlighter-rouge&quot;&gt;uploads/json/YYYY.MM/mainUuid.drawing.gz&lt;/code&gt; (또는 &lt;code class=&quot;highlighter-rouge&quot;&gt;.json&lt;/code&gt;)&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;정적 파일 서비스&lt;/strong&gt;: 업로드된 이미지 및 &lt;code class=&quot;highlighter-rouge&quot;&gt;public&lt;/code&gt; 폴더 내 정적 에셋(HTML, JS, CSS) 제공.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;3-기술-스택&quot;&gt;3. 기술 스택&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;프론트엔드&lt;/strong&gt;:
    &lt;ul&gt;
      &lt;li&gt;HTML5, CSS3, JavaScript (ES6+)&lt;/li&gt;
      &lt;li&gt;Tailwind CSS (CDN 및 &lt;code class=&quot;highlighter-rouge&quot;&gt;custom-styles.css&lt;/code&gt; 사용)&lt;/li&gt;
      &lt;li&gt;Pako.js (데이터 압축/해제)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;백엔드&lt;/strong&gt;:
    &lt;ul&gt;
      &lt;li&gt;Node.js&lt;/li&gt;
      &lt;li&gt;Express.js&lt;/li&gt;
      &lt;li&gt;LowDB (JSON 파일 기반 데이터베이스)&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;fs-extra&lt;/code&gt; (파일 시스템 작업)&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;uuid&lt;/code&gt; (고유 ID 생성)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;폰트&lt;/strong&gt;: Google Fonts (Inter)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;4-프로젝트-파일-구조-주요-파일&quot;&gt;4. 프로젝트 파일 구조 (주요 파일)&lt;/h2&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;├── server.js               # 메인 서버 파일
├── package.json
├── package-lock.json
├── public/                 # 클라이언트 사이드 정적 파일
│   ├── js/          # 메인 페이지
│   │   ├── draw.js             # 그림판 페이지 스크립트
│   │   ├── list.js             # 갤러리 페이지 스크립트
│   │   ├── view.js             # 그림 상세 보기 스크립트
│   │   └── constants.js        # 공통 상수 (예: 이미지 경로)
|   ├── css/         # 메인 페이지
│   │    └── custom-styles.css   # 추가 사용자 정의 CSS
│   ├── draw.html           # 그림판 페이지
│   ├── list.html           # 갤러리 목록 페이지
│   └── view.html           # 그림 상세 보기 페이지
├── uploads/                # 서버 업로드 파일 및 데이터베이스
│    ├── images/             # 이미지 저장 디렉토리
│         └── YYYY.MM/        # 연도.월별 하위 디렉토리
│               └── publicId.png
│    ├── json/               # 그림 데이터(JSON) 저장 디렉토리
│    └── YYYY.MM/        # 연도.월별 하위 디렉토리
│         └── mainUuid.drawing.gz
└── db.json             # LowDB 데이터베이스 파일 (드로잉 메타데이터)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;5-설정-및-실행-방법&quot;&gt;5. 설정 및 실행 방법&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;strong&gt;프로젝트 클론 및 의존성 설치&lt;/strong&gt;:
    &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git clone &amp;lt;repository-url&amp;gt;
&lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; &amp;lt;project-directory&amp;gt;
npm install
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;서버 실행&lt;/strong&gt;:
    &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;node server.js
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;p&gt;서버는 기본적으로 &lt;code class=&quot;highlighter-rouge&quot;&gt;http://localhost:3000&lt;/code&gt; 에서 실행됩니다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;애플리케이션 접속&lt;/strong&gt;:
    &lt;ul&gt;
      &lt;li&gt;그림판: &lt;code class=&quot;highlighter-rouge&quot;&gt;http://localhost:3000/draw.html&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;갤러리: &lt;code class=&quot;highlighter-rouge&quot;&gt;http://localhost:3000/gallery&lt;/code&gt; (또는 &lt;code class=&quot;highlighter-rouge&quot;&gt;list.html&lt;/code&gt; 직접 접근)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;6-주요-api-엔드포인트&quot;&gt;6. 주요 API 엔드포인트&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;POST /api/drawings&lt;/code&gt;: 새 그림 저장.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;GET /api/drawings&lt;/code&gt;: 그림 목록 조회 (페이지네이션: &lt;code class=&quot;highlighter-rouge&quot;&gt;?page=1&amp;amp;limit=10&lt;/code&gt;).&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;GET /api/drawings/:mainUuid/json&lt;/code&gt;: 특정 그림 데이터(JSON) 조회.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;PUT /api/drawings/:mainUuid&lt;/code&gt;: 기존 그림 업데이트.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;DELETE /api/drawings/:mainUuid&lt;/code&gt;: 특정 그림 삭제.&lt;/li&gt;
  &lt;li&gt;정적 이미지 제공: &lt;code class=&quot;highlighter-rouge&quot;&gt;/uploads/images/YYYY.MM/publicId.png&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;7-향후-개선-사항-선택적&quot;&gt;7. 향후 개선 사항 (선택적)&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;그림판 기능 확장 (다양한 브러시, 도형, 텍스트 입력 등).&lt;/li&gt;
  &lt;li&gt;서버 사이드 이미지 리사이징 및 썸네일 생성.&lt;/li&gt;
&lt;/ul&gt;</content><author><name></name></author><category term="inkpad" /><category term="drawing" /><summary type="html">개발은 AI가 하고 기획만 했습니다.</summary></entry><entry><title type="html">Chrome Extentions 개발기</title><link href="https://lahuman.github.io/chrome-extentions/" rel="alternate" type="text/html" title="Chrome Extentions 개발기" /><published>2025-05-21T00:00:00+00:00</published><updated>2025-05-21T00:00:00+00:00</updated><id>https://lahuman.github.io/chrome-extentions</id><content type="html" xml:base="https://lahuman.github.io/chrome-extentions/">&lt;h1 id=&quot;간단-토글-크롬-확장-프로그램&quot;&gt;&lt;a href=&quot;https://github.com/lahuman/chrome-extensions-example&quot;&gt;간단 토글 크롬 확장 프로그램&lt;/a&gt;&lt;/h1&gt;

&lt;h2 id=&quot;설치-및-시연-영상&quot;&gt;설치 및 시연 영상&lt;/h2&gt;

&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/NT-xJ17T7y0&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;

&lt;blockquote&gt;
  &lt;p&gt;이 확장 프로그램은 특정 웹사이트(&lt;code class=&quot;highlighter-rouge&quot;&gt;https://lahuman.github.io/&lt;/code&gt;)에서만 활성화되며, 사용자가 상태를 켜고 끌 수 있는 간단한 기능을 제공합니다. 확장 프로그램이 켜져 있을 때는 해당 웹사이트에서 10초마다 특정 버튼을 클릭하고, 현재 페이지에 상태 표시와 카운트다운을 보여줍니다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;소스코드-바로가기&quot;&gt;&lt;a href=&quot;https://github.com/lahuman/chrome-extensions-example&quot;&gt;소스코드 바로가기&lt;/a&gt;&lt;/h2&gt;

&lt;h2 id=&quot;기능&quot;&gt;기능&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;상태 토글:&lt;/strong&gt; 확장 프로그램 아이콘 클릭 시 나타나는 팝업에서 상태를 ‘켜짐’ 또는 ‘꺼짐’으로 변경할 수 있습니다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;특정 사이트에서만 활성화:&lt;/strong&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;https://lahuman.github.io/&lt;/code&gt; 도메인 및 하위 경로에서만 확장 프로그램이 기능합니다. 다른 사이트에서는 기능이 비활성화됩니다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;아이콘 변화:&lt;/strong&gt; 허용된 사이트와 그 외 사이트에서 확장 프로그램 아이콘이 다르게 표시됩니다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;팝업에 현재 URL 표시:&lt;/strong&gt; 허용된 사이트에서 확장 프로그램이 켜져 있을 때, 팝업에 현재 페이지의 전체 주소를 표시합니다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;자동 버튼 클릭 (허용된 사이트, 켜짐 상태 시):&lt;/strong&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;https://lahuman.github.io/&lt;/code&gt; 사이트에서 확장 프로그램이 ‘켜짐’ 상태일 때, 10초마다 미리 정의된 특정 버튼을 자동으로 클릭합니다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;페이지 내 상태 표시 및 카운트다운:&lt;/strong&gt; 확장 프로그램이 ‘켜짐’ 상태일 때, 현재 보고 있는 웹 페이지의 우측 하단에 상태 표시(“확장 프로그램 켜짐 (X초)”)와 다음 클릭까지 남은 카운트다운을 보여줍니다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;카운트다운 초기화:&lt;/strong&gt; 자동 클릭이 발생하거나, 수동으로 특정 버튼이 클릭될 때 카운트다운이 10초부터 다시 시작됩니다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;상태 유지:&lt;/strong&gt; 확장 프로그램의 켜짐/꺼짐 상태는 브라우저를 닫았다 열어도 유지됩니다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;사이트 이탈 시 자동 꺼짐:&lt;/strong&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;https://lahuman.github.io/&lt;/code&gt; 사이트를 벗어나 다른 페이지로 이동하거나 탭을 닫으면 해당 탭의 확장 프로그램 상태가 자동으로 ‘꺼짐’으로 변경되고 자동 클릭 및 카운트다운이 중지됩니다.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;설치-방법-개발자-모드&quot;&gt;설치 방법 (개발자 모드)&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;이 프로젝트의 모든 파일 (&lt;code class=&quot;highlighter-rouge&quot;&gt;manifest.json&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;popup.html&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;popup.css&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;popup.js&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;content.js&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;background.js&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;constants.js&lt;/code&gt; 및 &lt;code class=&quot;highlighter-rouge&quot;&gt;icons&lt;/code&gt; 폴더 내 이미지 파일)을 하나의 폴더에 다운로드합니다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;크롬 브라우저를 엽니다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;주소창에 &lt;code class=&quot;highlighter-rouge&quot;&gt;chrome://extensions&lt;/code&gt;를 입력하고 이동합니다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;페이지 우측 상단의 &lt;strong&gt;‘개발자 모드’&lt;/strong&gt; 토글 스위치를 M니다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;좌측 상단에 나타나는 &lt;strong&gt;‘압축 해제된 확장 프로그램을 로드합니다.’&lt;/strong&gt; 버튼을 클릭합니다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;파일 탐색기에서 1단계에서 다운로드한 폴더를 선택합니다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;확장 프로그램이 성공적으로 로드되면 목록에 나타납니다.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;사용-방법&quot;&gt;사용 방법&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;https://lahuman.github.io/&lt;/code&gt; 사이트로 이동합니다. 확장 프로그램 아이콘이 활성화된 아이콘으로 변경될 것입니다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;확장 프로그램 아이콘을 클릭하여 팝업을 엽니다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;팝업에서 ‘상태 변경’ 버튼을 클릭하여 확장 프로그램 상태를 ‘켜짐’으로 변경합니다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;상태가 ‘켜짐’으로 바뀌면 웹 페이지 우측 하단에 상태 표시와 카운트다운이 나타나고, 10초마다 특정 버튼이 자동으로 클릭됩니다. 팝업에도 현재 페이지 주소가 표시됩니다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;상태를 ‘꺼짐’으로 변경하거나 다른 사이트로 이동하면 자동 클릭과 페이지 내 표시가 중지됩니다.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;파일-구조&quot;&gt;파일 구조&lt;/h2&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;/ (확장 프로그램 루트 폴더)
├── manifest.json
├── popup.html
├── popup.css
├── popup.js
├── content.js
├── background.js
├── constants.js
└── icons/
    ├── icon16.png
    ├── icon48.png
    ├── icon128.png
    ├── icon16-inactive.png
    └── icon48-inactive.png
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;설정&quot;&gt;설정&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;constants.js&lt;/code&gt;: 확장 프로그램이 활성화될 웹사이트 주소(&lt;code class=&quot;highlighter-rouge&quot;&gt;ALLOWED_URL&lt;/code&gt;)를 설정할 수 있습니다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;content.js&lt;/code&gt;: 자동 클릭할 버튼의 CSS 선택자(&lt;code class=&quot;highlighter-rouge&quot;&gt;BUTTON_SELECTOR&lt;/code&gt;)를 수정해야 합니다.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;라이선스&quot;&gt;라이선스&lt;/h2&gt;

&lt;p&gt;이 프로젝트는 별도의 라이선스 명시가 없는 경우 표준 MIT 라이선스를 따릅니다. (필요시 라이선스 정보를 추가하세요.)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;참고:&lt;/strong&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;content.js&lt;/code&gt; 파일의 &lt;code class=&quot;highlighter-rouge&quot;&gt;BUTTON_SELECTOR&lt;/code&gt; 상수는 &lt;code class=&quot;highlighter-rouge&quot;&gt;https://lahuman.github.io/&lt;/code&gt; 사이트 내에서 실제로 클릭하려는 버튼의 정확한 CSS 선택자로 &lt;strong&gt;반드시 수정&lt;/strong&gt;해야 합니다.&lt;/p&gt;</content><author><name></name></author><category term="chrome" /><category term="extentions" /><summary type="html">자바스크립트 기반으로 이렇게 간단하게 만들 수 있었네요!</summary></entry><entry><title type="html">AWS RDS mysql에 root 권한 처리</title><link href="https://lahuman.github.io/aws_rds_root_role_user/" rel="alternate" type="text/html" title="AWS RDS mysql에 root 권한 처리" /><published>2025-04-28T00:00:00+00:00</published><updated>2025-04-28T00:00:00+00:00</updated><id>https://lahuman.github.io/aws_rds_root_role_user</id><content type="html" xml:base="https://lahuman.github.io/aws_rds_root_role_user/">&lt;h1 id=&quot;mysql을-실행하는-amazon-rds-db-인스턴스에-대해-다른-관리자-사용자를-생성하려면-어떻게-해야-합니까&quot;&gt;MySQL을 실행하는 Amazon RDS DB 인스턴스에 대해 다른 관리자 사용자를 생성하려면 어떻게 해야 합니까?&lt;/h1&gt;

&lt;p&gt;기존에 사용하던 명령어를 이용해서 권한을 줄 경우&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-SQL&quot;&gt;GRANT ALL PRIVILEGES ON `new_master_user`.* TO 'mysql'@'%' WITH GRANT OPTION;
Error Code: 1044. Access denied for user 'root'@'%' to database 'mysql' 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;root&lt;/code&gt; 임에도 오류가 발생합니다.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://repost.aws/ko/knowledge-center/duplicate-master-user-mysql&quot;&gt;MySQL을 실행하는 Amazon RDS DB 인스턴스에 대해 다른 관리자 사용자를 생성하려면 어떻게 해야 합니까?&lt;/a&gt;를 참고해서 확인하면 아래와 같이 명령어를 이용하면 root와 동일한 권한을 가진 계정 생성이 가능합니다.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-SQL&quot;&gt;-- CREATE USER
Create a user: CREATE USER 'new_master_user'@'%' IDENTIFIED BY 'password';

-- GRANT EVERY ROLES
GRANT SELECT, INSERT, UPDATE, DELETE, CREATE, DROP, RELOAD, PROCESS, REFERENCES, INDEX, ALTER, SHOW DATABASES, CREATE TEMPORARY TABLES, LOCK TABLES, EXECUTE, REPLICATION SLAVE, REPLICATION CLIENT, CREATE VIEW, SHOW VIEW, CREATE ROUTINE, ALTER ROUTINE, CREATE USER, EVENT, TRIGGER ON *.* TO 'new_master_user'@'%' WITH GRANT OPTION;

-- 권한 적용
FLUSH PRIVILEGES;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;AI도 잘 모르던 부분이네요 ㅎ&lt;/p&gt;

&lt;h2 id=&quot;참고자료&quot;&gt;참고자료&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://repost.aws/ko/knowledge-center/duplicate-master-user-mysql&quot;&gt;MySQL을 실행하는 Amazon RDS DB 인스턴스에 대해 다른 관리자 사용자를 생성하려면 어떻게 해야 합니까?&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name></name></author><category term="aws" /><category term="mysql" /><category term="root" /><summary type="html">그냥 mysql 디비 권한을 주면 안되고, 일일이 찍어줘야 함</summary></entry><entry><title type="html">단상</title><link href="https://lahuman.github.io/20250413/" rel="alternate" type="text/html" title="단상" /><published>2025-04-13T00:00:00+00:00</published><updated>2025-04-13T00:00:00+00:00</updated><id>https://lahuman.github.io/20250413</id><content type="html" xml:base="https://lahuman.github.io/20250413/">&lt;h1 id=&quot;시간이-지나-어른이-되면-쉬워질-줄-알았다&quot;&gt;시간이 지나, 어른이 되면 쉬워질 줄 알았다.&lt;/h1&gt;

&lt;p&gt;쉽게 얻은게 없다. 항상 어렵게 힘들게 얻어왔다.&lt;/p&gt;

&lt;p&gt;나이가 들면 조금은 쉬워질줄 알았다.&lt;/p&gt;

&lt;p&gt;여전히 어렵다.&lt;/p&gt;

&lt;p&gt;모든 걸 내려 놓지 못하는 나의 욕심이 원인인 줄 알지만,&lt;/p&gt;

&lt;p&gt;욕심을 내려놓기엔 아직 어린거 같다.&lt;/p&gt;

&lt;p&gt;조금 더 시간이 지나면, 쉽게 내려놓지 않을까?&lt;/p&gt;</content><author><name></name></author><category term="단상" /><summary type="html">삶은 시간이 지날수록 왜 어려워 지는가?</summary></entry><entry><title type="html">AWS NLB 에서 Preserved Client IP Address 사용시 Nginx 연계 오류</title><link href="https://lahuman.github.io/aws_nlb_nginx_/" rel="alternate" type="text/html" title="AWS NLB 에서 Preserved Client IP Address 사용시 Nginx 연계 오류" /><published>2025-03-26T00:00:00+00:00</published><updated>2025-03-26T00:00:00+00:00</updated><id>https://lahuman.github.io/aws_nlb_nginx_</id><content type="html" xml:base="https://lahuman.github.io/aws_nlb_nginx_/">&lt;h1 id=&quot;aws-nlb-preserve-client-ip와-nginx-연동-삽질기-feat-proxy-protocol&quot;&gt;AWS NLB Preserve Client IP와 Nginx 연동 삽질기 (feat. Proxy Protocol)&lt;/h1&gt;

&lt;p&gt;오늘은 AWS 환경에서 애플리케이션을 운영하며 흔히 만날 수 있는 로드밸런서, 그중에서도 Network Load Balancer(NLB)와 Nginx를 함께 사용할 때 겪었던 &lt;code class=&quot;highlighter-rouge&quot;&gt;Preserve Client IP&lt;/code&gt; 옵션 관련 삽질기를 공유해볼까 합니다. 저와 비슷한 문제로 골머리를 앓았던 분들께 조금이나마 도움이 되기를 바랍니다.&lt;/p&gt;

&lt;h2 id=&quot;문제-상황-nlb--preserve-client-ip-addresses-옵션&quot;&gt;문제 상황: NLB  &lt;code class=&quot;highlighter-rouge&quot;&gt;Preserve client IP addresses&lt;/code&gt; 옵션&lt;/h2&gt;

&lt;p&gt;일반적인 웹 서비스 구성이었습니다.&lt;/p&gt;

&lt;div class=&quot;mermaid&quot;&gt; 
  graph LR;
    A[Client] --&amp;gt;|호출| B(NLB);
    B --&amp;gt; C(Nginx);
    C --&amp;gt; D(Tomcat);
&lt;/div&gt;

&lt;p&gt;Nginx는 리버스 프록시 역할을 수행합니다. Nginx 로그나 애플리케이션 단에서 &lt;strong&gt;실제 클라이언트의 IP 주소&lt;/strong&gt;를 확인해야 할 필요성이 생겼습니다. 가장 먼저 떠오른 것은 NLB의 &lt;code class=&quot;highlighter-rouge&quot;&gt;Preserve client IP addresses&lt;/code&gt; 옵션입니다. 이 옵션은 실제 클라이언트 IP로 호출 된것 같이 Nginx로 요청을 보내 줍니다.&lt;/p&gt;

&lt;p&gt;하지만 결과는 참담했습니다. NLB의 모니터링 지표에서 해당 타겟 그룹(Nginx 인스턴스들)으로 가는 &lt;strong&gt;Request / Response Byte Size가 0/0&lt;/strong&gt; 으로 찍히며 통신이 완전히 두절된 것입니다. 옵션을 끄면 다시 정상으로 돌아왔고요. 대체 왜 이런 일이 발생했을까요?&lt;/p&gt;

&lt;h2 id=&quot;원인-분석-비대칭-라우팅&quot;&gt;원인 분석: 비대칭 라우팅&lt;/h2&gt;

&lt;p&gt;결론부터 말하자면, &lt;code class=&quot;highlighter-rouge&quot;&gt;Preserve Client IP&lt;/code&gt; 옵션을 켰을 때 발생하는 &lt;strong&gt;비대칭 라우팅(Asymmetric Routing)&lt;/strong&gt; 때문이었습니다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Preserve Client IP&lt;/code&gt; = OFF (기본값, 정상 작동 시):&lt;/strong&gt;
    &lt;ol&gt;
      &lt;li&gt;Client -&amp;gt; NLB 로 요청이 옵니다.&lt;/li&gt;
      &lt;li&gt;NLB는 &lt;strong&gt;자신의 Private IP&lt;/strong&gt;를 Source IP로 사용하여 Nginx에 요청을 전달합니다 (Source NAT 발생).&lt;/li&gt;
      &lt;li&gt;Nginx는 NLB IP로부터 요청을 받았으므로, 응답도 &lt;strong&gt;NLB IP&lt;/strong&gt;로 보냅니다.&lt;/li&gt;
      &lt;li&gt;NLB는 응답을 받아 Client에게 전달합니다.&lt;/li&gt;
      &lt;li&gt;요청과 응답이 NLB를 통해 대칭적으로 이루어집니다. Nginx는 같은 VPC 내의 NLB IP와 통신하므로 문제가 없습니다. 이를 &lt;strong&gt;대칭 라우팅(Symmetric Routing)&lt;/strong&gt;이라고 합니다. 즉, 요청(Request) 패킷이 지나간 경로와 응답(Response) 패킷이 돌아오는 경로가 동일한 네트워크 장비(여기서는 NLB)를 거치는 상태입니다.&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Preserve Client IP&lt;/code&gt; = ON (문제 발생 시):&lt;/strong&gt;
    &lt;ol&gt;
      &lt;li&gt;Client -&amp;gt; NLB 로 요청이 옵니다.&lt;/li&gt;
      &lt;li&gt;NLB는 Source IP를 변경하지 않고 &lt;strong&gt;원본 Client IP&lt;/strong&gt;를 Source IP로 사용하여 Nginx에 요청을 전달합니다.&lt;/li&gt;
      &lt;li&gt;Nginx는 &lt;strong&gt;원본 Client IP&lt;/strong&gt;로부터 요청을 받은 것으로 인지합니다.&lt;/li&gt;
      &lt;li&gt;Nginx는 응답을 &lt;strong&gt;원본 Client IP&lt;/strong&gt;로 직접 보내려고 시도합니다!&lt;/li&gt;
      &lt;li&gt;이때, EC2 인스턴스(Nginx)의 기본 라우팅 경로는 보통 인터넷 게이트웨이(IGW)나 NAT 게이트웨이를 향합니다. 따라서 응답 패킷은 &lt;strong&gt;NLB를 거치지 않고&lt;/strong&gt; 바로 인터넷으로 나가버립니다.&lt;/li&gt;
      &lt;li&gt;바로 이 지점에서 &lt;strong&gt;비대칭 라우팅(Asymmetric Routing)&lt;/strong&gt;이 발생합니다. 요청 패킷은 &lt;code class=&quot;highlighter-rouge&quot;&gt;Client -&amp;gt; NLB -&amp;gt; Nginx&lt;/code&gt; 경로로 왔지만, 응답 패킷은 &lt;code class=&quot;highlighter-rouge&quot;&gt;Nginx -&amp;gt; IGW -&amp;gt; Client&lt;/code&gt; 경로로 돌아가게 됩니다. 요청 경로와 응답 경로가 달라진 것입니다.&lt;/li&gt;
      &lt;li&gt;NLB와 같은 상태 기반(Stateful) 네트워크 장비는 자신이 전달한 요청에 대한 응답이 &lt;strong&gt;자신을 통해&lt;/strong&gt; 돌아오는 것을 기대하며 연결 상태를 추적합니다. 하지만 비대칭 라우팅 상황에서는 NLB가 Nginx로 보낸 요청에 대한 응답을 볼 수 없으므로, 연결이 비정상적으로 종료되었거나 실패한 것으로 간주합니다. 이것이 0/0 카운트의 원인이었습니다.&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;결국, 이 옵션을 켜려면 Nginx 인스턴스의 운영체제 레벨에서 라우팅 테이블을 수정하여 &lt;strong&gt;클라이언트 IP로 가는 응답 트래픽이 NLB를 거치도록&lt;/strong&gt; 매우 복잡한 설정을 해줘야 했습니다. 이건 너무 번거로웠죠.&lt;/p&gt;

&lt;h2 id=&quot;대안-1-그냥-preserve-client-ip--off-쓰고-xff-헤더-확인하기&quot;&gt;대안 1: 그냥 &lt;code class=&quot;highlighter-rouge&quot;&gt;Preserve Client IP&lt;/code&gt; = OFF 쓰고 XFF 헤더 확인하기&lt;/h2&gt;

&lt;p&gt;가장 간단한 방법입니다. &lt;code class=&quot;highlighter-rouge&quot;&gt;Preserve Client IP&lt;/code&gt; 옵션을 끄면, NLB는 자동으로 &lt;code class=&quot;highlighter-rouge&quot;&gt;X-Forwarded-For&lt;/code&gt; (XFF) HTTP 헤더에 원본 클라이언트 IP를 담아서 Nginx로 전달해줍니다. Nginx에서는 이 헤더 값을 읽으면 됩니다.&lt;/p&gt;

&lt;p&gt;Nginx에서 XFF 헤더를 신뢰하고 실제 클라이언트 IP로 인식하게 하려면 &lt;code class=&quot;highlighter-rouge&quot;&gt;nginx.conf&lt;/code&gt; 등에 다음과 같이 설정합니다.&lt;/p&gt;

&lt;div class=&quot;language-nginx highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;http&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# ... 다른 설정들 ...
&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# NLB의 IP 대역을 신뢰하도록 설정 (VPC CIDR 사용 권장)
&lt;/span&gt;    &lt;span class=&quot;kn&quot;&gt;set_real_ip_from&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;.0.0.0/16&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# 예시: VPC CIDR
&lt;/span&gt;    &lt;span class=&quot;c1&quot;&gt;# 어떤 헤더를 실제 IP로 사용할지 지정
&lt;/span&gt;    &lt;span class=&quot;kn&quot;&gt;real_ip_header&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;X-Forwarded-For&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# XFF 헤더가 여러 IP를 포함할 경우, 가장 오른쪽 IP를 사용 (가장 마지막 프록시 IP 제외)
&lt;/span&gt;    &lt;span class=&quot;c1&quot;&gt;# real_ip_recursive on; # 필요에 따라 설정
&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# ... 다른 설정들 ...
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;이 방법은 OS 라우팅 수정 없이 Nginx 설정만으로 해결 가능해서 매우 편리합니다. 대부분의 경우 이 방법으로 충분할 것입니다.&lt;/p&gt;

&lt;h2 id=&quot;대안-2-proxy-protocol-v2-사용하기&quot;&gt;대안 2: Proxy Protocol v2 사용하기&lt;/h2&gt;

&lt;p&gt;하지만 어떤 이유로든 &lt;code class=&quot;highlighter-rouge&quot;&gt;Preserve Client IP = ON&lt;/code&gt;과 유사한 효과 (TCP 레벨에서 클라이언트 IP 확인 등)가 필요하거나, 혹은 다른 이유로 &lt;code class=&quot;highlighter-rouge&quot;&gt;Preserve Client IP = OFF&lt;/code&gt; 상태에서 &lt;strong&gt;Proxy Protocol v2&lt;/strong&gt;를 사용해야 하는 상황이 있을 수 있습니다. (예: &lt;code class=&quot;highlighter-rouge&quot;&gt;NLB -&amp;gt; ALB&lt;/code&gt; 구성에서 Client IP 전달 등)&lt;/p&gt;

&lt;p&gt;그래서 다음 시도를 해봤습니다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;NLB 설정: &lt;code class=&quot;highlighter-rouge&quot;&gt;Preserve Client IP&lt;/code&gt; = &lt;strong&gt;OFF&lt;/strong&gt;, Target Group의 &lt;code class=&quot;highlighter-rouge&quot;&gt;Proxy Protocol v2&lt;/code&gt; = &lt;strong&gt;ON&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;Nginx 설정: 원본 IP를 받도록 설정&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;이론적으로는 &lt;code class=&quot;highlighter-rouge&quot;&gt;Preserve Client IP = OFF&lt;/code&gt; 이므로 라우팅은 해결되고, Proxy Protocol v2 헤더를 통해 원본 IP 정보가 TCP 스트림 내에 포함되어 Nginx로 전달될 것으로 기대했습니다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;결과:&lt;/strong&gt; 또다시 0/0 !!&lt;/p&gt;

&lt;p&gt;이번엔 또 무슨 문제일까요? 원인은 &lt;strong&gt;Nginx가 Proxy Protocol 헤더를 이해하도록 설정되지 않았기 때문&lt;/strong&gt;이었습니다.&lt;/p&gt;

&lt;p&gt;NLB가 Proxy Protocol v2 헤더를 보내면, Nginx는 기본적으로 이를 해석하지 못하고 비정상적인 요청으로 간주하여 연결을 끊어버립니다. NLB는 Nginx와의 통신(Health Check 포함)이 실패하니 타겟이 비정상이라고 판단하는 것이죠.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;해결책:&lt;/strong&gt; Nginx의 &lt;code class=&quot;highlighter-rouge&quot;&gt;listen&lt;/code&gt; 지시어에 &lt;code class=&quot;highlighter-rouge&quot;&gt;proxy_protocol&lt;/code&gt; 파라미터를 추가해야 합니다.&lt;/p&gt;

&lt;div class=&quot;language-nginx highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;server&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# HTTP (80번 포트) + Proxy Protocol
&lt;/span&gt;    &lt;span class=&quot;kn&quot;&gt;listen&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;80&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;proxy_protocol&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;# HTTPS (443번 포트) + Proxy Protocol
&lt;/span&gt;    &lt;span class=&quot;c1&quot;&gt;# listen 443 ssl proxy_protocol;
&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# Proxy Protocol 헤더를 보내는 주체(NLB)를 신뢰하도록 설정
&lt;/span&gt;    &lt;span class=&quot;kn&quot;&gt;set_real_ip_from&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;.0.0.0/16&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# 예시: VPC CIDR
&lt;/span&gt;    &lt;span class=&quot;c1&quot;&gt;# 실제 IP를 Proxy Protocol 헤더에서 가져오도록 설정
&lt;/span&gt;    &lt;span class=&quot;kn&quot;&gt;real_ip_header&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;proxy_protocol&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;# ... 나머지 설정 ...
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;여기서 중요한 점! &lt;code class=&quot;highlighter-rouge&quot;&gt;set_real_ip_from&lt;/code&gt; 지시어는 여전히 필요합니다. 왜냐하면 &lt;code class=&quot;highlighter-rouge&quot;&gt;real_ip_header proxy_protocol;&lt;/code&gt; 설정이 동작하려면, &lt;strong&gt;직접 연결을 시도한 IP 주소(&lt;code class=&quot;highlighter-rouge&quot;&gt;Preserve Client IP = OFF&lt;/code&gt;이므로 NLB의 Private IP)가 신뢰할 수 있는 프록시 목록(&lt;code class=&quot;highlighter-rouge&quot;&gt;set_real_ip_from&lt;/code&gt;)에 포함되어 있어야&lt;/strong&gt; Nginx가 Proxy Protocol 헤더의 내용을 신뢰하기 때문입니다.&lt;/p&gt;

&lt;p&gt;이 설정을 적용하고 Nginx를 재시작하니 드디어 NLB &amp;lt;-&amp;gt; Nginx 통신이 정상화되고, Nginx 로그에도 실제 클라이언트 IP가 찍히는 것을 확인할 수 있었습니다!&lt;/p&gt;

&lt;h2 id=&quot;결론&quot;&gt;결론&lt;/h2&gt;

&lt;p&gt;AWS NLB의 &lt;code class=&quot;highlighter-rouge&quot;&gt;Preserve Client IP&lt;/code&gt; 옵션은 편리해 보이지만, &lt;strong&gt;비대칭 라우팅&lt;/strong&gt;이라는 숨겨진 복병을 만날 수 있습니다. 요청 경로와 응답 경로가 달라지면서 NLB와 같은 상태 기반 장비의 연결 추적을 방해하는 이 현상은 예상치 못한 통신 장애를 유발합니다.&lt;/p&gt;

&lt;p&gt;대부분의 경우, 이 옵션을 &lt;strong&gt;끄고&lt;/strong&gt; NLB가 자동으로 추가해주는 &lt;strong&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;X-Forwarded-For&lt;/code&gt; 헤더를 Nginx에서 활용&lt;/strong&gt;하는 것이 가장 간단하고 권장되는 방법입니다.&lt;/p&gt;

&lt;p&gt;만약 Proxy Protocol v2를 사용해야 한다면, NLB 타겟 그룹 설정뿐만 아니라 &lt;strong&gt;Nginx의 &lt;code class=&quot;highlighter-rouge&quot;&gt;listen&lt;/code&gt; 지시어에도 &lt;code class=&quot;highlighter-rouge&quot;&gt;proxy_protocol&lt;/code&gt; 파라미터를 반드시 추가&lt;/strong&gt;해야 한다는 점, 그리고 &lt;strong&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;set_real_ip_from&lt;/code&gt; 설정으로 NLB를 신뢰&lt;/strong&gt;하도록 지정해야 한다는 점을 잊지 마시기 바랍니다.&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;참고-자료&quot;&gt;참고 자료&lt;/h2&gt;

&lt;p&gt;이 글의 내용은 AWS NLB 및 Nginx 설정과 관련된 일반적인 기술 개념과 문제 해결 과정을 바탕으로 작성되었습니다. 더 자세한 기술 정보는 아래 공식 문서를 참고하시면 좋습니다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;AWS Network Load Balancer - 대상 그룹:&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;‘Preserve client IP addresses’ 설명: &lt;a href=&quot;https://docs.aws.amazon.com/ko_kr/elasticloadbalancing/latest/network/load-balancer-target-groups.html#preserve-client-ip&quot;&gt;https://docs.aws.amazon.com/ko_kr/elasticloadbalancing/latest/network/load-balancer-target-groups.html#preserve-client-ip&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;‘Proxy Protocol’ 설명: &lt;a href=&quot;https://docs.aws.amazon.com/ko_kr/elasticloadbalancing/latest/network/load-balancer-target-groups.html#proxy-protocol&quot;&gt;https://docs.aws.amazon.com/ko_kr/elasticloadbalancing/latest/network/load-balancer-target-groups.html#proxy-protocol&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Nginx Documentation:&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;‘ngx_http_realip_module’ (‘set_real_ip_from’, ‘real_ip_header’): &lt;a href=&quot;http://nginx.org/en/docs/http/ngx_http_realip_module.html&quot;&gt;http://nginx.org/en/docs/http/ngx_http_realip_module.html&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;‘listen’ 지시어 (‘proxy_protocol’ 파라미터): &lt;a href=&quot;http://nginx.org/en/docs/http/ngx_http_core_module.html#listen&quot;&gt;http://nginx.org/en/docs/http/ngx_http_core_module.html#listen&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;</content><author><name></name></author><category term="aws" /><category term="nlb" /><category term="nginx" /><summary type="html">Proxy Protocol 설정으로 client ip 가져오기</summary></entry><entry><title type="html">로또 번호 추천 시스템 개발</title><link href="https://lahuman.github.io/lotto_app/" rel="alternate" type="text/html" title="로또 번호 추천 시스템 개발" /><published>2025-03-10T00:00:00+00:00</published><updated>2025-03-10T00:00:00+00:00</updated><id>https://lahuman.github.io/lotto_app</id><content type="html" xml:base="https://lahuman.github.io/lotto_app/">&lt;h1 id=&quot;로또-예측-웹사이트-소개-sveltekit-firebase-그리고-gemini&quot;&gt;로또 예측 웹사이트 소개: SvelteKit, Firebase, 그리고 Gemini&lt;/h1&gt;

&lt;p&gt;로또 예측 웹사이트를 만들어 보았습니다. 개인 플젝으로 진행하는거라 sveltekit을 활용해서 빠르고 쉽게 구축해보았습니다.&lt;/p&gt;

&lt;h3 id=&quot;주요-특징&quot;&gt;주요 특징&lt;/h3&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;특징&lt;/th&gt;
      &lt;th&gt;설명&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;프론트엔드 및 백엔드&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;&lt;strong&gt;SvelteKit&lt;/strong&gt;을 사용하여 빠르고 현대적인 사용자 인터페이스와 안정적인 서버 측 기능을 제공합니다.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;로그인 및 데이터베이스&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;&lt;strong&gt;Firebase&lt;/strong&gt;를 통해 간편한 사용자 인증과 실시간 데이터 관리를 구현했습니다.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;로또 번호 예측&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;&lt;strong&gt;Google의 Gemini&lt;/strong&gt; 모델을 활용하여 로또 번호를 예측하는 기능을 제공합니다. 최첨단 AI 기술을 통해 사용자는 예측 번호에 대한 새로운 관점을 얻을 수 있습니다.&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://lotto.freeddns.org/&quot;&gt;웹사이트 주소: https://lotto.freeddns.org/&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;재미로 한번씩 사용해보셔요!&lt;/p&gt;</content><author><name></name></author><category term="lotto" /><category term="svelte" /><category term="web" /><summary type="html">로또 번호를 추천 합니다.</summary></entry><entry><title type="html">김프봇 제작하기</title><link href="https://lahuman.github.io/kimpbot/" rel="alternate" type="text/html" title="김프봇 제작하기" /><published>2025-01-30T00:00:00+00:00</published><updated>2025-01-30T00:00:00+00:00</updated><id>https://lahuman.github.io/kimpbot</id><content type="html" xml:base="https://lahuman.github.io/kimpbot/">&lt;h1 id=&quot;김치-프리미엄-알리미-봇--웹-서비스&quot;&gt;김치 프리미엄 알리미 봇 &amp;amp; 웹 서비스&lt;/h1&gt;

&lt;h1 id=&quot;바로가기&quot;&gt;&lt;a href=&quot;https://kimpbot.duckdns.org/&quot;&gt;바로가기&lt;/a&gt;&lt;/h1&gt;

&lt;h2 id=&quot;소개&quot;&gt;소개&lt;/h2&gt;

&lt;p&gt;이 프로젝트는 실시간으로 USDT, USD 가격 정보를 가져와 김치 프리미엄을 계산하고, 이를 사용자에게 보여주는 텔레그램 봇 및 웹 서비스입니다. 사용자는 봇을 통해 실시간 가격 정보를 확인하고, 특정 가격 변동에 대한 알림을 설정할 수 있습니다. 웹 서비스는 현재 가격 정보와 함께 시각적인 인터페이스를 제공합니다.&lt;/p&gt;

&lt;h2 id=&quot;기능&quot;&gt;기능&lt;/h2&gt;

&lt;h3 id=&quot;텔레그램-봇-기능&quot;&gt;텔레그램 봇 기능&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;/start&lt;/code&gt;&lt;/strong&gt;: 봇 시작 및 사용 안내 메시지 출력&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;/show&lt;/code&gt;&lt;/strong&gt;: 실시간 USDT, USD 가격 정보 및 김치 프리미엄 표시&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;/event&lt;/code&gt;&lt;/strong&gt;: USDT, USD, 김프(김치 프리미엄) 알림 설정 메뉴 제공
    &lt;ul&gt;
      &lt;li&gt;&lt;strong&gt;USDT 알림&lt;/strong&gt;: 특정 USDT 가격 이상/이하 시 알림 설정&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;USD 알림&lt;/strong&gt;: 특정 USD 가격 이상/이하 시 알림 설정&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;김프 알림&lt;/strong&gt;: 특정 김프 이상/이하 시 알림 설정&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;/list&lt;/code&gt;&lt;/strong&gt;: 설정된 알림 목록 표시 및 삭제 기능 제공&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;/web&lt;/code&gt;&lt;/strong&gt;: 웹 서비스 링크 제공 및 버튼 생성&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;실시간 알림&lt;/strong&gt;: 설정된 가격 조건에 부합하는 경우 3시간 간격으로 텔레그램 메시지 발송&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;웹-서비스-기능&quot;&gt;웹 서비스 기능&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;실시간 USDT/USD 가격 정보 및 김치 프리미엄 표시&lt;/li&gt;
  &lt;li&gt;전일 최고/최저 가격 정보 제공&lt;/li&gt;
  &lt;li&gt;5초마다 자동으로 최신 정보 갱신&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;기술-스택&quot;&gt;기술 스택&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Backend&lt;/strong&gt;: Kotlin, Spring Boot&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Database&lt;/strong&gt;: SQLite&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Telegram Bot&lt;/strong&gt;: KT-GRAM (Kotlin Telegram Bot Framework)&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Frontend&lt;/strong&gt;: HTML, CSS, Tailwind CSS&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;REST Client&lt;/strong&gt;: Spring RestClient&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Scheduling&lt;/strong&gt;: Spring Scheduling&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;프로젝트-구조&quot;&gt;프로젝트 구조&lt;/h2&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;├── src
│ ├── main
│ │ ├── kotlin
│ │ │ └── lahuman
│ │ │ └── kimpre
│ │ │ ├── bot
│ │ │ │ └── BotComponent.kt (텔레그램 봇 로직)
│ │ │ ├── config
│ │ │ │ ├── BotConfig.kt (텔레그램 봇 설정)
│ │ │ │ └── RestClientConfig.kt (Rest Client 설정)
│ │ │ ├── controller
│ │ │ │ └── PriceController.kt (가격 정보 API)
│ │ │ ├── dto
│ │ │ │ ├── BithumbMarketResponse.kt (빗썸 API 응답 DTO)
│ │ │ │ ├── NaverExchangeRate4USDResponse.kt (네이버 환율 API 응답 DTO)
│ │ │ │ ├── RequestPriceHistory.kt (가격 이력 저장 요청 DTO)
│ │ │ │ ├── RequestPriceInfo.kt (가격 정보 요청 DTO)
│ │ │ │ └── ResponsePriceInfo.kt (가격 정보 응답 DTO)
│ │ │ ├── entity
│ │ │ │ ├── BaseTimeEntity.kt (생성/수정 시간 추상 엔티티)
│ │ │ │ ├── HistoryPk.kt (가격 이력 복합 키)
│ │ │ │ ├── PriceHistory.kt (가격 이력 엔티티)
│ │ │ │ ├── PriceInfo.kt (가격 정보 엔티티)
│ │ │ │ ├── PricePk.kt (가격 정보 복합 키)
│ │ │ │ └── TelegramAlarm.kt (텔레그램 알림 엔티티)
│ │ │ ├── repository
│ │ │ │ ├── PriceHistoryRepository.kt (가격 이력 레포지토리)
│ │ │ │ ├── PriceInfoRepository.kt (가격 정보 레포지토리)
│ │ │ │ └── TelegramAlarmRepository.kt (텔레그램 알림 레포지토리)
│ │ │ ├── schedule
│ │ │ │ └── PriceCrawling.kt (가격 정보 크롤링 및 알림 스케줄러)
│ │ │ ├── service
│ │ │ │ ├── PriceService.kt (가격 정보 서비스)
│ │ │ │ └── TelegramAlarmService.kt (텔레그램 알림 서비스)
│ │ │ └── utils
│ │ │ ├── DateUtils.kt (날짜 유틸리티)
│ │ │ └── UseYn.kt (사용 여부 Enum)
│ │ ├── resources
│ │ │ ├── application.yaml (Spring Boot 설정 파일)
│ │ │ └── static
│ │ │ ├── index.html (웹 서비스 HTML 파일)
│ │ │ └── tm.png (텔레그램 봇 QR 코드 이미지)
│ ├── test
│ │ └── kotlin
│ │ └── lahuman
│ │ └── kimpre
│ │ └── KimchiPremiumApplicationTests.kt (테스트 클래스)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;실행-방법&quot;&gt;실행 방법&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;프로젝트를 로컬로 클론합니다.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;src/main/resources/application.yaml&lt;/code&gt; 파일에서 데이터베이스 설정 및 텔레그램 봇 토큰을 확인합니다.&lt;/li&gt;
  &lt;li&gt;IntelliJ IDEA와 같은 IDE를 사용하여 프로젝트를 실행하거나, Gradle을 사용하여 빌드하고 실행합니다.
    &lt;ul&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;./gradlew bootRun&lt;/code&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;텔레그램 봇을 시작하고 &lt;code class=&quot;highlighter-rouge&quot;&gt;/start&lt;/code&gt; 명령어를 입력하여 봇을 사용할 수 있습니다.&lt;/li&gt;
  &lt;li&gt;웹 브라우저에서 &lt;code class=&quot;highlighter-rouge&quot;&gt;http://localhost:8080&lt;/code&gt; 주소를 입력하여 웹 서비스에 접속합니다.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;추가-정보&quot;&gt;추가 정보&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;외부 API&lt;/strong&gt;:
    &lt;ul&gt;
      &lt;li&gt;&lt;strong&gt;Bithumb API&lt;/strong&gt;: 실시간 USDT 가격 정보 제공&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;Naver API&lt;/strong&gt;: 실시간 USD 환율 정보 제공&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;데이터베이스&lt;/strong&gt;: SQLite를 사용하여 가격 정보 및 알림 설정 저장&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;스케줄링&lt;/strong&gt;: Spring Scheduling을 사용하여 5초마다 가격 정보 크롤링 및 알림 전송&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;테스트&lt;/strong&gt;: JUnit을 사용하여 기본적인 테스트 코드 작성&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;개선-사항&quot;&gt;개선 사항&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;데이터베이스에 사용자 알림 저장 및 관리&lt;/li&gt;
  &lt;li&gt;다양한 코인 가격 지원&lt;/li&gt;
  &lt;li&gt;웹 서비스 디자인 개선&lt;/li&gt;
  &lt;li&gt;테스트 코드 확장&lt;/li&gt;
&lt;/ul&gt;</content><author><name></name></author><category term="usdt" /><category term="usd" /><category term="kimp" /><summary type="html">핫한 코인, 김프봇 제작기</summary></entry></feed>
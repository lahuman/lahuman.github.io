<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.6.3">Jekyll</generator><link href="https://lahuman.github.io/feed.xml" rel="self" type="application/atom+xml" /><link href="https://lahuman.github.io/" rel="alternate" type="text/html" /><updated>2023-07-05T04:38:10+00:00</updated><id>https://lahuman.github.io/feed.xml</id><title type="html">lahuman</title><subtitle>열심히 사는 아저씨</subtitle><entry><title type="html">Module not found: Can’t resolve ‘encoding’</title><link href="https://lahuman.github.io/nestjs13_encoding_error/" rel="alternate" type="text/html" title="Module not found: Can't resolve 'encoding'" /><published>2023-07-05T00:00:00+00:00</published><updated>2023-07-05T00:00:00+00:00</updated><id>https://lahuman.github.io/nestjs13_encoding_error</id><content type="html" xml:base="https://lahuman.github.io/nestjs13_encoding_error/">&lt;h1 id=&quot;nextjs-를-사용한-개인-플젝-중-cant-resolve-encoding-오류를-만나다&quot;&gt;nextjs 를 사용한 개인 플젝 중 Can’t resolve ‘encoding’ 오류를 만나다&lt;/h1&gt;

&lt;h2 id=&quot;오류-내용&quot;&gt;오류 내용&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;node-fetch에서 encoding 모듈을 찾을 수 없다는 오류가 로그에서 확인되었습니다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;...
Module not found: Can&lt;span class=&quot;s1&quot;&gt;'t resolve '&lt;/span&gt;encoding&lt;span class=&quot;s1&quot;&gt;' in '&lt;/span&gt;/Users/lahuman/DEV/routine/web/node_modules/.pnpm/node-fetch@2.6.7/node_modules/node-fetch/lib&lt;span class=&quot;s1&quot;&gt;'
...
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;해결-방법&quot;&gt;해결 방법&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;네, 찾을 수 없는 모듈은 설치해주면 되죠!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;pnpm add &lt;span class=&quot;nt&quot;&gt;-D&lt;/span&gt; encoding
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;마치며&quot;&gt;마치며&lt;/h2&gt;

&lt;p&gt;사실 위에 오류로그를 무시해도 동작에는 문제가 없습니다. 
찝찝함을 없애기 위해서 방안을 찾아보니 너무나도 단순하게 모듈을 설치하라는 가이드가 나오네요.&lt;/p&gt;

&lt;h2 id=&quot;참고-자료&quot;&gt;참고 자료&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/supabase/supabase-js/issues/612&quot;&gt;Can’t resolve ‘encoding’ #612&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name></name></author><category term="nextjs" /><category term="error" /><summary type="html">Nextjs13을 사용 중 이상한 오류가 난다.</summary></entry><entry><title type="html">01. 루틴 만들기</title><link href="https://lahuman.github.io/routine_01/" rel="alternate" type="text/html" title="01. 루틴 만들기" /><published>2023-06-22T00:00:00+00:00</published><updated>2023-06-22T00:00:00+00:00</updated><id>https://lahuman.github.io/routine_01</id><content type="html" xml:base="https://lahuman.github.io/routine_01/">&lt;h1 id=&quot;나날이-게을러-지는-나를-반성하는-프로그램을-만들어-보자&quot;&gt;나날이 게을러 지는 나를 반성하는 프로그램을 만들어 보자!&lt;/h1&gt;

&lt;blockquote&gt;
  &lt;p&gt;요즘 많이 게을러 졌다. 공부도 재미 없고 일도 재미 없다. 이를 극복하기 위한 방안으로 루틴을 만들어 보려고 한다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;루틴이란&quot;&gt;루틴이란?&lt;/h2&gt;

&lt;p&gt;“루틴”은 주로 일상적인 일련의 활동이나 행동 패턴을 의미합니다. 이는 개인이나 조직이 정기적으로 반복하거나 예측 가능한 일정에 따라 수행하는 활동들을 포함합니다. 루틴은 주로 생활의 일부로서 자동적으로 이루어지는 것들을 의미하며, 특정한 목적을 가지고 이루어지는 경우도 있습니다.&lt;/p&gt;

&lt;p&gt;예를 들어, 개인의 루틴은 아침에 일어나서 세면하고 식사를 하고 출근하는 것일 수 있습니다. 이는 매일 반복되며 예상 가능한 일정에 따라 수행되는 활동입니다. 또한, 운동하는 습관이나 공부하는 시간을 정해두는 것도 루틴의 예입니다.&lt;/p&gt;

&lt;p&gt;조직이나 기업에서도 루틴은 중요한 역할을 합니다. 회의 일정, 업무 프로세스, 일일 업무 등은 루틴에 속할 수 있습니다. 이를 통해 조직은 일상적인 활동을 체계적으로 관리하고 효율적으로 운영할 수 있습니다.&lt;/p&gt;

&lt;p&gt;루틴은 안정감과 예측 가능성을 제공하여 개인이나 조직이 목표를 달성하고 생산적인 활동을 수행하는 데 도움을 줍니다. 그러나 일상적인 루틴에 갇혀 창의성이나 유연성이 부족해질 수도 있으므로 적절한 균형을 유지하는 것이 중요합니다.&lt;/p&gt;

&lt;h2 id=&quot;주요-기능&quot;&gt;주요 기능&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;TODO : 루틴을 만들기 위해서 해야 할 일&lt;/li&gt;
  &lt;li&gt;알람 기능 : 루틴 시작 시간을 알려 줌&lt;/li&gt;
  &lt;li&gt;이력 확인 : 주, 월 기준으로 TODO 성공/실패 표기&lt;/li&gt;
  &lt;li&gt;회원 가입 / 로그인 : 회원 별 관리를 위한 기본 기능&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;todo-등록-항목&quot;&gt;TODO 등록 항목&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;*반복 : 매일 / 업무일 / 주말 / 한번만 선택 가능&lt;/li&gt;
  &lt;li&gt;알람 : HH:MM 형식으로 알람 시간&lt;/li&gt;
  &lt;li&gt;할일 : 해야 할 일을 TEXT 형식으로 작성&lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&quot;마지막으로&quot;&gt;마지막으로&lt;/h1&gt;

&lt;p&gt;요즘 많이 게을러져서 일을 벌리고 마무리를 못하고 있네요. 
조금씩 천천히 진행 예정입니다.&lt;/p&gt;</content><author><name></name></author><category term="routine" /><category term="todo" /><summary type="html">간단한 TODO 리스트와 알람 기능으로 루틴을 만들자!</summary></entry><entry><title type="html">REDIS 접속 관리를 위한 Connection pool이 필요할까요?</title><link href="https://lahuman.github.io/redis_single_thread_pool/" rel="alternate" type="text/html" title="REDIS 접속 관리를 위한 Connection pool이 필요할까요? " /><published>2023-06-13T00:00:00+00:00</published><updated>2023-06-13T00:00:00+00:00</updated><id>https://lahuman.github.io/redis_single_thread_pool</id><content type="html" xml:base="https://lahuman.github.io/redis_single_thread_pool/">&lt;h1 id=&quot;redis-접속-관리를-위한-connection-pool이-필요할까요&quot;&gt;REDIS 접속 관리를 위한 Connection pool이 필요할까요?&lt;/h1&gt;

&lt;p&gt;Redis는 기본적으로 싱글 스레드로 동작하는 인메모리 데이터베이스입니다. 이는 Redis가 단일 스레드로 모든 요청을 처리하고, 이벤트 루프를 사용하여 비동기 입출력(IO) 작업을 처리한다는 것을 의미합니다.&lt;/p&gt;

&lt;p&gt;싱글 스레드 모델의 장점은 구현이 간단하고, 동시성 문제를 처리하기 위해 별도의 동기화 메커니즘을 사용할 필요가 없다는 것입니다. 그러나 이 모델은 요청을 처리하는 동안 다른 요청이 블로킹될 수 있다는 단점도 있습니다.&lt;/p&gt;

&lt;p&gt;Connection pool은 여러 클라이언트가 동시에 Redis 서버에 연결할 수 있는 기능을 제공하는 것이며, 주로 애플리케이션의 성능과 확장성을 향상시키기 위해 사용됩니다. 일반적으로 싱글 스레드로 동작하는 Redis는 여러 클라이언트가 동시에 요청을 보내는 경우에도 충분한 처리량을 제공할 수 있습니다. 따라서 일반적으로 Redis를 사용하는 경우에는 connection pool을 사용할 필요가 없습니다.&lt;/p&gt;

&lt;p&gt;Redis 6.0부터는 threadIO라는 새로운 모드가 도입되었습니다. 이 모드에서는 입출력(IO) 작업을 다중 스레드로 처리하여 높은 처리량을 달성할 수 있습니다. 그러나 여전히 Redis의 코어 로직은 싱글 스레드로 동작하며, 다중 스레드는 주로 IO 작업을 처리하는 데 사용됩니다. 따라서 threadIO를 사용하는 경우에도 connection pool은 Redis의 코어 로직에는 영향을 미치지 않으며, 싱글 스레드 처리 모델이 유지됩니다.&lt;/p&gt;

&lt;p&gt;요약하자면, Redis는 싱글 스레드로 동작하는 인메모리 데이터베이스이기 때문에 일반적으로 connection pool을 사용할 필요는 없습니다. Redis 6.0의 threadIO 모드를 사용하는 경우에도 connection pool은 Redis의 코어 동작에는 영향을 주지 않습니다.&lt;/p&gt;

&lt;h2 id=&quot;참고자료&quot;&gt;참고자료&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.alibabacloud.com/tech-news/redis/1hq-is-redis-cluster-single-threaded&quot;&gt;Is Redis Cluster Single Threaded&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://lettuce.io/core/release/reference/index.html#connection-pooling.is-connection-pooling-necessary&quot;&gt;connection-pooling.is-connection-pooling-necessary&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name></name></author><category term="redis" /><category term="connection" /><category term="pool" /><summary type="html">결론만 알려드리면, 필요하지 않습니다.</summary></entry><entry><title type="html">Swagger JSON 파일을 html로 변환 하기</title><link href="https://lahuman.github.io/swagger_json_to_html/" rel="alternate" type="text/html" title="Swagger JSON 파일을 html로 변환 하기" /><published>2023-05-19T00:00:00+00:00</published><updated>2023-05-19T00:00:00+00:00</updated><id>https://lahuman.github.io/swagger_json_to_html</id><content type="html" xml:base="https://lahuman.github.io/swagger_json_to_html/">&lt;h1 id=&quot;swagger-json-파일을-html로-변환-하기&quot;&gt;Swagger JSON 파일을 html로 변환 하기&lt;/h1&gt;

&lt;blockquote&gt;
  &lt;p&gt;Nestjs와 swagger를 함께 사용하고 있는 상황에서 swagger ui를 산출물로 제출해달라는 요청을 받았습니다. &lt;a href=&quot;https://www.npmjs.com/package/@redocly/cli&quot;&gt;@redocly/cli&lt;/a&gt; 모듈을 이용하면 쉽게 html로 산출물을 생성 할 수 있습니다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;redoclycli-설치&quot;&gt;&lt;a href=&quot;https://www.npmjs.com/package/@redocly/cli&quot;&gt;@redocly/cli&lt;/a&gt; 설치&lt;/h2&gt;

&lt;p&gt;다음 명령어로 쉽게 설치 할 수 있습니다.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;npm install @redocly/cli &lt;span class=&quot;nt&quot;&gt;-g&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;nestjs-설정-확인&quot;&gt;Nestjs 설정 확인&lt;/h2&gt;

&lt;p&gt;Nestjs의 swagger 설정이 아래와 같이 되어 있다고 가정합니다.&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// main.ts&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;....&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;config&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;DocumentBuilder&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;setTitle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'Petaverse API SERVER'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;setDescription&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'The Petaverse API description'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;setVersion&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'1.0'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;addBearerAuth&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;build&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;SwaggerModule&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;createDocument&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;SwaggerModule&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;setup&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'docs'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// docs 를 주소로 사용&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;....&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;api-server/&lt;code class=&quot;highlighter-rouge&quot;&gt;docs-json&lt;/code&gt; 로 접근하면 swagger의 json 형식의 output을 확인 할 수 있습니다.&lt;/p&gt;

&lt;h2 id=&quot;swagger-html-결과문-생성-명령어&quot;&gt;swagger HTML 결과문 생성 명령어&lt;/h2&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# 1. 주소 직접 접근&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;redocly build-docs https://api-server/docs-json &lt;span class=&quot;nt&quot;&gt;-o&lt;/span&gt; swagger.html

&lt;span class=&quot;c&quot;&gt;# 2. 파일로 접근&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ $ &lt;/span&gt;redocly build-docs test.json &lt;span class=&quot;nt&quot;&gt;-o&lt;/span&gt; swagger.html
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;-o 는 OUTPUT 옵션으로 저장될 파일 명을 설정 합니다&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;build-docs&lt;/code&gt; 옵션 외에도 &lt;code class=&quot;highlighter-rouge&quot;&gt;lint&lt;/code&gt; 옵션으로 swagger 설정이 잘 되었는지 확인도 가능합니다 .&lt;/p&gt;

&lt;h2 id=&quot;참고자료&quot;&gt;참고자료&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://stackoverflow.com/questions/25800493/converting-swagger-specification-json-to-html-documentation&quot;&gt;Converting Swagger specification JSON to HTML documentation&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.npmjs.com/package/@redocly/cli&quot;&gt;@redocly/cli&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name></name></author><category term="swagger" /><category term="html" /><summary type="html">swagger UI HTML 파일 한개로 만들기!</summary></entry><entry><title type="html">속이 좁아 속이…</title><link href="https://lahuman.github.io/20230426/" rel="alternate" type="text/html" title="속이 좁아 속이..." /><published>2023-04-26T00:00:00+00:00</published><updated>2023-04-26T00:00:00+00:00</updated><id>https://lahuman.github.io/20230426</id><content type="html" xml:base="https://lahuman.github.io/20230426/">&lt;h1 id=&quot;나란-사람은-속이-좁다&quot;&gt;나란 사람은 속이 좁다&lt;/h1&gt;

&lt;p&gt;원래 간장종지 만한 속마음이었는데, 지금은 밥그릇 정도로 커졌다.&lt;/p&gt;

&lt;p&gt;그나마, 커졌는데 여전히 좁다.&lt;/p&gt;

&lt;p&gt;태생이 좁게 태어난건지, 욕심이 많아서 그런건지 잘 바뀌지 않는다.&lt;/p&gt;</content><author><name></name></author><category term="단상" /><summary type="html">나는 속이 좁다.</summary></entry><entry><title type="html">01. 데이터베이스 용어 사전 구축 필요성</title><link href="https://lahuman.github.io/meta_system_01/" rel="alternate" type="text/html" title="01. 데이터베이스 용어 사전 구축 필요성" /><published>2023-04-25T00:00:00+00:00</published><updated>2023-04-25T00:00:00+00:00</updated><id>https://lahuman.github.io/meta_system_01</id><content type="html" xml:base="https://lahuman.github.io/meta_system_01/">&lt;h1 id=&quot;01-데이터베이스-용어-사전-구축-필요성&quot;&gt;01. 데이터베이스 용어 사전 구축 필요성&lt;/h1&gt;

&lt;blockquote&gt;
  &lt;p&gt;데이터베이스 단어 표준은 데이터베이스 관련 용어와 용어 사용을 표준화하는 시스템입니다. 데이터베이스 단어 표준은 데이터베이스 관련 문서, 코드, 메타데이터 등에서 사용되는 용어의 일관성과 품질을 향상시켜 데이터베이스 개발, 관리, 운영 등의 업무를 원활하게 수행할 수 있도록 도와줍니다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;왜-단어용어-표준이-필요-할까&quot;&gt;왜 단어(용어) 표준이 필요 할까?&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;일관성 있는 용어 사용: 설계 과정에서 사용되는 용어는 다양한 이해관계자들이 이해할 수 있는 공통 용어를 사용해야 합니다. 만약 이해관계자들이 서로 다른 용어를 사용하게 된다면, 의사소통이 원활하지 않아서 설계 결과물의 품질이 떨어질 수 있습니다. 따라서 단어 표준을 사용하여 일관성 있는 용어 사용을 유지하면, 설계 결과물의 품질을 높일 수 있습니다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;설계 문서의 가독성 개선: 설계 문서는 다양한 이해관계자들이 함께 사용하는 문서입니다. 이러한 이유로 설계 문서는 읽기 쉽고 이해하기 쉬운 문서여야 합니다. 만약 설계 문서에서 서로 다른 용어가 사용된다면, 문서의 가독성이 떨어져 이해관계자들이 설계 결과물을 이해하는 데 어려움을 겪을 수 있습니다. 따라서 단어 표준을 사용하여 설계 문서의 가독성을 개선할 수 있습니다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;데이터 모델링 일관성 유지: 데이터 모델링은 설계 과정에서 가장 중요한 부분입니다. 데이터 모델링에서는 다양한 개체와 속성, 관계 등이 정의되며, 이러한 요소들은 후속적인 개발 과정에서 매우 중요한 역할을 합니다. 만약 데이터 모델링에서 일관성 없는 용어가 사용된다면, 후속적인 개발 과정에서 데이터 모델링과 관련된 문제가 발생할 가능성이 높아집니다. 따라서 단어 표준을 사용하여 데이터 모델링의 일관성을 유지할 수 있습니다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;유지보수성 향상: 설계는 소프트웨어 개발의 초기 단계이며, 이후에는 유지보수가 필요합니다. 만약 설계에서 일관성 없는 용어가 사용된다면, 유지보수 단계에서 문제가 발생할 가능성이 높아집니다. 따라서 단어 표준을 사용하여 유지보수성을 향상시킬 수 있습니다.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;표준-규칙&quot;&gt;표준 규칙&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;한글/영문은 가능하면 &lt;code class=&quot;highlighter-rouge&quot;&gt;명사&lt;/code&gt;를 사용
    &lt;ul&gt;
      &lt;li&gt;상품, 금액, 갯수, 여부&lt;/li&gt;
      &lt;li&gt;product, price, count, yn&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;영문명은 &lt;code class=&quot;highlighter-rouge&quot;&gt;Full 단어&lt;/code&gt;로 표시&lt;/li&gt;
  &lt;li&gt;테이블의 경우 도메인_역할_타입
    &lt;ul&gt;
      &lt;li&gt;타입(접미사) : m : main, d : data, h : history&lt;/li&gt;
      &lt;li&gt;상품 도메인의 아이템 역할의 메인의 경우 : 상품_아이템_메인 =&amp;gt; product_item_m&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;표준 테이블 기본 항목
    &lt;ul&gt;
      &lt;li&gt;등록자, 등록일, 등록시스템, 수정자, 수정일, 수정시스템, 사용여부&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;</content><author><name></name></author><category term="meta" /><category term="system" /><summary type="html">단어, 도메인, 용어 관리 시스템 구축</summary></entry><entry><title type="html">nestjs에서 사용자 정의 validate 구현하기</title><link href="https://lahuman.github.io/nestjs_custom_validate/" rel="alternate" type="text/html" title="nestjs에서 사용자 정의 validate 구현하기" /><published>2023-04-24T00:00:00+00:00</published><updated>2023-04-24T00:00:00+00:00</updated><id>https://lahuman.github.io/nestjs_custom_validate</id><content type="html" xml:base="https://lahuman.github.io/nestjs_custom_validate/">&lt;h1 id=&quot;nestjs에서-사용자-정의-validate-구현하기&quot;&gt;nestjs에서 사용자 정의 validate 구현하기&lt;/h1&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;a href=&quot;https://www.npmjs.com/package/class-validator&quot;&gt;class-validator&lt;/a&gt;에서는 많은 validation 조건을 제공하여 줍니다. 하지만 사용자 정의 옵션이 필요할 때가 있는데, 이때 설정이 생각보다 복잡하네요.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;validatorconstraintinterface-구현-하기&quot;&gt;&lt;a href=&quot;https://github.com/typestack/class-validator#custom-validation-classes&quot;&gt;ValidatorConstraintInterface&lt;/a&gt; 구현 하기&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://www.npmjs.com/package/class-validator&quot;&gt;class-validator&lt;/a&gt;는 &lt;a href=&quot;https://github.com/typestack/class-validator#custom-validation-classes&quot;&gt;ValidatorConstraintInterface&lt;/a&gt; interface를 구현해서 사용자 정의 validation 처리를 합니다.&lt;/p&gt;

&lt;p&gt;아래는 구현된 예제 입니다.&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ValidatorConstraint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ValidatorConstraintInterface&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ValidationArguments&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'class-validator'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;ValidatorConstraint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'customText'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;async&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;CustomTextLength&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ValidatorConstraintInterface&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;validate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ValidationArguments&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;length&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;length&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// for async validations you must return a Promise&amp;lt;boolean&amp;gt; here&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;nx&quot;&gt;defaultMessage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ValidationArguments&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// here you can provide default error message if validation failed&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Text ($value) is too short or too long!'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;사용-예제&quot;&gt;사용 예제&lt;/h2&gt;

&lt;p&gt;아래는 Post 클래스의 사용자 정의 validate를 사용하는 예제입니다.&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Validate&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'class-validator'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;CustomTextLength&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'./CustomTextLength'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Post&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;Validate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;CustomTextLength&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Title is too short or long!'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;nestjs에-적용-하기&quot;&gt;nestjs에 적용 하기&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;위와 같이 설정 후 &lt;code class=&quot;highlighter-rouge&quot;&gt;@Injectable&lt;/code&gt;을 사용하면 오류를 확인 할 수 있습니다. &lt;a href=&quot;https://stackoverflow.com/questions/60062318/how-to-inject-service-to-validator-constraint-interface-in-nestjs-using-class-va&quot;&gt;How to inject service to validator constraint interface in nestjs using class-validator?&lt;/a&gt;를 참고 하면 아래와 같은 컨테이너 처리를 추가 해야 합니다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// Custom Validate&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;ValidatorConstraint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ValidatorConstraintInterface&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'class-validator'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;UsersService&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'./user.service'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Injectable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'@nestjs/common'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;ValidatorConstraint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'isUserAlreadyExist'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;async&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;Injectable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// this is needed in order to the class be injected into the module&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;IsUserAlreadyExist&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ValidatorConstraintInterface&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;constructor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kr&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;readonly&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;usersService&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;UsersService&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;validate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;user&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;usersService&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;findOne&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
            &lt;span class=&quot;na&quot;&gt;email&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;text&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// UserModule &lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Module&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'@nestjs/common'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;UsersController&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'./user.controller'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;UsersService&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'./user.service'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;IsUserAlreadyExist&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'./user.validator'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;Module&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;controllers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;UsersController&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;providers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;IsUserAlreadyExist&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;UsersService&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;imports&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[],&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;exports&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;UserModule&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// main.ts&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;bootstrap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;app&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;NestFactory&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;create&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;AppModule&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;useContainer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;select&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;AppModule&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;fallbackOnErrors&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;...}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;위와 같이 설정하면 inject이 정상적으로 처리 되는 것을 확인 할 수 있습니다.&lt;/p&gt;

&lt;p&gt;약간 복잡해 보이는 설정인데, 한줄씩 코드로 보면 어렵지 않습니다.&lt;/p&gt;

&lt;h2 id=&quot;참고-자료&quot;&gt;참고 자료&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://stackoverflow.com/questions/60062318/how-to-inject-service-to-validator-constraint-interface-in-nestjs-using-class-va&quot;&gt;How to inject service to validator constraint interface in nestjs using class-validator?&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name></name></author><category term="nestjs" /><category term="validate" /><summary type="html">쉬운 듯 어려움</summary></entry><entry><title type="html">nestjs에서 registerAsync 사용시 isGlobal 설정</title><link href="https://lahuman.github.io/nestjs_registerAsync_isGlobal/" rel="alternate" type="text/html" title="nestjs에서 registerAsync 사용시 isGlobal 설정" /><published>2023-04-18T00:00:00+00:00</published><updated>2023-04-18T00:00:00+00:00</updated><id>https://lahuman.github.io/nestjs_registerAsync_isGlobal</id><content type="html" xml:base="https://lahuman.github.io/nestjs_registerAsync_isGlobal/">&lt;h1 id=&quot;nestjs에서-registerasync-사용시-isglobal-설정&quot;&gt;nestjs에서 registerAsync 사용시 isGlobal 설정&lt;/h1&gt;

&lt;blockquote&gt;
  &lt;p&gt;useFactory에 &lt;code class=&quot;highlighter-rouge&quot;&gt;isGlobal&lt;/code&gt;을 설정 했지만, 동작 하지 않아서 테스트 해보다 보니 위치가 아래와 같습니다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;Module&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;imports&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;ConfigModule&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;forRoot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;envFilePath&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'.env.local'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'.env'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;isGlobal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;load&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;database&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;logging&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;redis&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;cache&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;throttler&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}),&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;CacheModule&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;registerAsync&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;isGlobal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// 여기에 들어가야 한다.&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;imports&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;ConfigModule&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;inject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;ConfigService&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;useFactory&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;configService&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ConfigService&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;configService&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'cacheConfig'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 여기에 넣었다가 실패..&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}),&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;controllers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;AppController&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;providers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;AppModule&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;NestModule&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;별것도 아닌데 하루 종일 삽질 했네요.&lt;/p&gt;</content><author><name></name></author><category term="nestjs" /><category term="registerAsync" /><category term="isGlobal" /><summary type="html">isGobal 설정 삽질기</summary></entry><entry><title type="html">한 입 크기로 잘라 먹는 리액트</title><link href="https://lahuman.github.io/react_book_review/" rel="alternate" type="text/html" title="한 입 크기로 잘라 먹는 리액트" /><published>2023-04-16T00:00:00+00:00</published><updated>2023-04-16T00:00:00+00:00</updated><id>https://lahuman.github.io/react_book_review</id><content type="html" xml:base="https://lahuman.github.io/react_book_review/">&lt;h1 id=&quot;도서-서평&quot;&gt;도서 서평&lt;/h1&gt;

&lt;blockquote&gt;
  &lt;p&gt;이벤트로 도서를 받게 되었습니다. 강의로도 유명한 책이라 기대를 하고 읽었습니다. 내용은 초심자를 위한 내용으로 자바스크립트와 리액트를 처음 시작하시는 분이 보시면 좋을 내용입니다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/post_img/react_book.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;책-내용-요약&quot;&gt;책 내용 요약&lt;/h2&gt;

&lt;h3 id=&quot;12장-자바스크립트-기초--실전&quot;&gt;1,2장 자바스크립트 기초 &amp;amp; 실전&lt;/h3&gt;

&lt;p&gt;자바스크립트의 기초부터 시작합니다. 기초부터 시작하기 때문에 이미 알고 있는 내용이라면 빠르게 훑어보기를 추천 합니다.&lt;/p&gt;

&lt;p&gt;자바스크립트 실전에는 많이 사용되는 문법과 팁에 대하여 설명하고 있기 때문에 처음 자바스크립트를 시작하는 분들에게는 읽어 두면 좋은 내용입니다.&lt;/p&gt;

&lt;h3 id=&quot;3장-nodejs&quot;&gt;3장 Node.js&lt;/h3&gt;

&lt;p&gt;Node.js, npm, vscode 설치 방법이 간단하게 정리 되어 있습니다.&lt;/p&gt;

&lt;h3 id=&quot;4-5-6장-리액트&quot;&gt;4, 5, 6장 리액트&lt;/h3&gt;

&lt;p&gt;4장부터는 리액트의 내용이 시작됩니다. 
사실 1~3장을 알고 있는 독자라면 4장부터 읽는 것을 추천 드립니다. 
리액트의 동작 원리와 구조 그리고 컴포넌트와 hook 등을 설명하고 예제를 보여줍니다.&lt;/p&gt;

&lt;h3 id=&quot;7-8-9-10장-프로젝트&quot;&gt;7, 8, 9, 10장 프로젝트&lt;/h3&gt;

&lt;p&gt;4~6장에서 배운 내용을 기반으로 간단한 toy 프로젝트를 진행합니다. 
프로젝트를 진행하면서 최적화에 대하여도 설명을 합니다.&lt;/p&gt;

&lt;h3 id=&quot;11장-배포&quot;&gt;11장 배포&lt;/h3&gt;

&lt;p&gt;파이어 베이스로 빌드 배포 하는 내용을 간략하게 다룹니다.&lt;/p&gt;

&lt;h2 id=&quot;총평&quot;&gt;총평&lt;/h2&gt;

&lt;p&gt;처음 자바스크립트와 리액트를 배우는 사람이 보기 좋은 책으로 추천 합니다. 다른 책들이 리액트에만 집중해서 다루었다면 이 책은 자바스크립트의 기초 부터 프로젝트 배포까지 폭넓게 다루었습니다.&lt;/p&gt;

&lt;p&gt;만약 회사 내에서 신입분들과 리액트 스터디를 하게 된다면 이 책으로 진행하면 좋겠다는 생각을 했습니다.&lt;/p&gt;

&lt;h2 id=&quot;참고자료&quot;&gt;참고자료&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://product.kyobobook.co.kr/detail/S000201352991&quot;&gt;도서-한입 크기로 잘라 먹는 리액트(React.js)&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.udemy.com/course/winterlood-react-basic/&quot;&gt;강의-한입 크기로 잘라 먹는 리액트(React.js)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name></name></author><category term="리액트" /><category term="도서" /><summary type="html">도서 서평</summary></entry><entry><title type="html">이직 1년 5개월만에 작성하는 회고</title><link href="https://lahuman.github.io/20230412/" rel="alternate" type="text/html" title="이직 1년 5개월만에 작성하는 회고" /><published>2023-04-12T00:00:00+00:00</published><updated>2023-04-12T00:00:00+00:00</updated><id>https://lahuman.github.io/20230412</id><content type="html" xml:base="https://lahuman.github.io/20230412/">&lt;h1 id=&quot;이직-1년-후-회고&quot;&gt;이직 1년 후 회고&lt;/h1&gt;

&lt;p&gt;지난 1년 5개월 동안 GSSHOP에서 삼성화재로 이직한 후를 회고해봅니다.&lt;/p&gt;

&lt;p&gt;2021년 12월 1일에 입사하였습니다. 금융사에서 꿈을 키워나가기 위해 선택한 곳이었습니다. 내 팀을 조성하고, 팀원들과 함께 성장할 수 있는 환경을 만들어보고 싶었습니다.&lt;/p&gt;

&lt;p&gt;현재 팀원은 초기 3명에서 12명까지 늘어났고, 이전에는 주로 JAVA 프로젝트만 진행하던 곳에서는 처음으로 Node.js와 React.js를 활용한 프로젝트를 진행하고 있습니다.&lt;/p&gt;

&lt;p&gt;아쉬운 부분도 있었고, 힘든 부분도 있었지만, 적어도 한 걸음씩 나아가고 있다고 생각합니다.&lt;/p&gt;</content><author><name></name></author><category term="단상" /><category term="이직" /><category term="회고" /><summary type="html">1년이 지났을때 작성하려고 했지만, 정신이 없어서 이제 작성하네요.</summary></entry></feed>
<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.6.2">Jekyll</generator><link href="https://lahuman.github.io/feed.xml" rel="self" type="application/atom+xml" /><link href="https://lahuman.github.io/" rel="alternate" type="text/html" /><updated>2017-12-27T13:38:47+09:00</updated><id>https://lahuman.github.io/</id><title type="html">lahuman</title><subtitle>열심히 사는 아저씨</subtitle><entry><title type="html">Spring MVC Controller 에서 @PathVariable에 name을 빼먹으면 오류가 났다.</title><link href="https://lahuman.github.io/20171227-phase/" rel="alternate" type="text/html" title="Spring MVC Controller 에서 @PathVariable에 name을 빼먹으면 오류가 났다." /><published>2017-12-27T00:00:00+09:00</published><updated>2017-12-27T00:00:00+09:00</updated><id>https://lahuman.github.io/20171227-phase</id><content type="html" xml:base="https://lahuman.github.io/20171227-phase/">&lt;h1 id=&quot;이전에-사용하던-방식으로-처리-했는데-uri-템플릿-변수가-누락-되었다는-오류-발생&quot;&gt;이전에 사용하던 방식으로 처리 했는데 URI 템플릿 변수가 누락 되었다는 오류 발생&lt;/h1&gt;

&lt;p&gt;3개월 전만에도 문제 없었던 Spring MVC 코드 인데 무엇을 잘못한 것인지 오류가 났다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;코드&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  @RequestMapping(value = &quot;/{id}&quot;, method = RequestMethod.GET)
    public DknetInfoResDTO view(@NonNull @PathVariable Long seq){
        DknetInfo dknetInfo = dknetService.getDknetInfo(seq);
        return modelMapper.map(dknetInfo, DknetInfoResDTO.class);
    }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;오류 내용&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Whitelabel Error Page

This application has no explicit mapping for /error, so you are seeing this as a fallback.
Wed Dec 27 13:28:56 KST 2017
There was an unexpected error (type=Internal Server Error, status=500).
Missing URI template variable 'seq' for method parameter of type Long
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;원인은 PathVariable에 id 와 파라메터에 변수 값 seq를 혼합해서 사용하였기 때문이다.&lt;/p&gt;

&lt;p&gt;쉬운데 놓치는 일이 너무 많다.&lt;/p&gt;

&lt;h3 id=&quot;영어만-잘해도-반은-먹고-갈텐데&quot;&gt;영어만 잘해도 반은 먹고 갈텐데…&lt;/h3&gt;</content><author><name></name></author><category term="단상" /><summary type="html">Missing URI template variable for method parameter of type</summary></entry><entry><title type="html">크리스마스의 악몽</title><link href="https://lahuman.github.io/20171226-phase/" rel="alternate" type="text/html" title="크리스마스의 악몽" /><published>2017-12-26T00:00:00+09:00</published><updated>2017-12-26T00:00:00+09:00</updated><id>https://lahuman.github.io/20171226-phase</id><content type="html" xml:base="https://lahuman.github.io/20171226-phase/">&lt;h1 id=&quot;올해-동현이는-많이-다친다&quot;&gt;올해 동현이는 많이 다친다.&lt;/h1&gt;

&lt;p&gt;크리스마스 이브에 계단에서 뒤로 넘어저 머리에 상처가 난 동현이를 안고 119 구급차를 타고 응급실로 갔다.&lt;/p&gt;

&lt;p&gt;다행이 큰 이상은 없고 1cm 정도만 찢어졌다.&lt;/p&gt;

&lt;p&gt;너무 놀라고 힘든 크리스마스가 지나고 다시 평소와 같은 하루가 시작 된다.&lt;/p&gt;

&lt;h3 id=&quot;하지만-아직도-놀라고-있다&quot;&gt;하지만 아직도 놀라고 있다.&lt;/h3&gt;</content><author><name></name></author><category term="단상" /><summary type="html">피봤다</summary></entry><entry><title type="html">Intellij에서 JDK 9과 Lombok 1.16.18을 사용하면 이상동작 해결 방법</title><link href="https://lahuman.github.io/lombok_and_jdk9_with_intellij/" rel="alternate" type="text/html" title="Intellij에서 JDK 9과 Lombok 1.16.18을  사용하면 이상동작 해결 방법" /><published>2017-12-21T00:00:00+09:00</published><updated>2017-12-21T00:00:00+09:00</updated><id>https://lahuman.github.io/lombok_and_jdk9_with_intellij</id><content type="html" xml:base="https://lahuman.github.io/lombok_and_jdk9_with_intellij/">&lt;h1 id=&quot;intellij에서-jdk-9과-lombok-11618을--사용하면-이상동작-해결-방법&quot;&gt;Intellij에서 JDK 9과 Lombok 1.16.18을  사용하면 이상동작 해결 방법&lt;/h1&gt;

&lt;p&gt;오늘 나의 시간을 가장 많이 빼앗어간 어이 없는 Lombok 오류였다.&lt;/p&gt;

&lt;p&gt;Lombok을 JDK 9와 문제 없이 이용하려면 일반 버젼의 Lombok을 설치 하면안되고 &lt;a href=&quot;https://projectlombok.org/download-edge&quot;&gt;Lombok Edge&lt;/a&gt; 을 사용해야 한다.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://lahuman.jabsiri.co.kr/124&quot;&gt;Lombok의 기본적인 설치 및 사용법&lt;/a&gt;은 블로그 글을 보면된다.&lt;/p&gt;

&lt;p&gt;오늘은 정말 최신 기술을 한번 써보겠다고 고생하였다.&lt;/p&gt;

&lt;h3 id=&quot;참고-주소&quot;&gt;참고 주소&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/rzwitserloot/lombok/issues/1472#issuecomment-339578781&quot;&gt;Java 9 Annotation Processing Broken &lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://projectlombok.org/download-edge&quot;&gt;Lombok Edge Version Download&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name></name></author><category term="jdk9" /><category term="lombok" /><category term="intellij" /><summary type="html">최신버젼은 해롭다. 정신건강에...</summary></entry><entry><title type="html">한달만에 자바 웹 개발</title><link href="https://lahuman.github.io/20171220-phase/" rel="alternate" type="text/html" title="한달만에 자바 웹 개발" /><published>2017-12-20T00:00:00+09:00</published><updated>2017-12-20T00:00:00+09:00</updated><id>https://lahuman.github.io/20171220-phase</id><content type="html" xml:base="https://lahuman.github.io/20171220-phase/">&lt;h1 id=&quot;수집된-데이터-표출은-자바로&quot;&gt;수집된 데이터 표출은 자바로&lt;/h1&gt;

&lt;p&gt;한동안 파이썬을 이용하여 데이터 수집을 구현 하였다.&lt;/p&gt;

&lt;p&gt;다른 언어를 사용한는 재미도 있고, 생각보다 많은 시간이 투자 되었다.&lt;/p&gt;

&lt;p&gt;오늘부터는 10년 넘게 해오던 자바로 웹 개발을 한다.&lt;/p&gt;

&lt;h2 id=&quot;어떤-기술을-써볼까나&quot;&gt;어떤 기술을 써볼까나?&lt;/h2&gt;</content><author><name></name></author><category term="단상" /><summary type="html">한달동안 파이썬 맛좀 봤다.</summary></entry><entry><title type="html">VMWARE를 이용한 보안 프로그램 회피 방법</title><link href="https://lahuman.github.io/avoid_security_program/" rel="alternate" type="text/html" title="VMWARE를 이용한 보안 프로그램 회피 방법" /><published>2017-12-15T00:00:00+09:00</published><updated>2017-12-15T00:00:00+09:00</updated><id>https://lahuman.github.io/avoid_security_program</id><content type="html" xml:base="https://lahuman.github.io/avoid_security_program/">&lt;h1 id=&quot;vmware를-이용한-보안-프로그램-회피-방법&quot;&gt;VMWARE를 이용한 보안 프로그램 회피 방법&lt;/h1&gt;

&lt;blockquote&gt;
  &lt;p&gt;대부분으 보안 프로그램은 Agent를 설치 하고 해당 프로그램으로 감시를 한다.
Agent 프로그램을 VMWARE에 설치 하고 속이는 방법을 사용해보자&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ol&gt;
  &lt;li&gt;VMWARE 가상환경에 WINDOWS OS와 보안 Agent 프로그램을 설치 한다.&lt;/li&gt;
  &lt;li&gt;가상 환경의 MAC ADDRESS를 호스트 OS와 동일하게 설정 한다.&lt;a href=&quot;https://pubs.vmware.com/workstation-9/index.jsp?topic=%2Fcom.vmware.ws.using.doc%2FGUID-5C55C285-79B0-404F-95A5-87F64C41E3DC.html&quot;&gt;1&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;가상 환경의 IP를 호스트 OS와 동일 하게 설정 한다.&lt;/li&gt;
  &lt;li&gt;가상 환경의 네트워크 설정을 Bridged Adapters 로 설정한다.&lt;a href=&quot;https://www.vmware.com/support/ws5/doc/ws_net_configurations_changing_bridged_windows.html&quot;&gt;2&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;이렇게 하면 외부에서 들어오는 보안 Agent 통신이 가상환경으로 넘어간다.
호스트는 가상환경만 켜두면 감시 없이 인터넷이 된다.&lt;/p&gt;

&lt;h2 id=&quot;참고자료&quot;&gt;참고자료&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;https://pubs.vmware.com/workstation-9/index.jsp?topic=%2Fcom.vmware.ws.using.doc%2FGUID-5C55C285-79B0-404F-95A5-87F64C41E3DC.html&quot;&gt;Change the MAC Address for a Virtual Machine&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.vmware.com/support/ws5/doc/ws_net_configurations_changing_bridged_windows.html&quot;&gt; Configuring Bridged Networking Options on a Windows Host &lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;</content><author><name></name></author><category term="security" /><category term="avoid" /><summary type="html">자세한 이미지는 생략한다.</summary></entry><entry><title type="html">Python 에서 멀티 스레드를 사용하기 보다 멀티 프로세스를 사용하자.</title><link href="https://lahuman.github.io/python_thread_process/" rel="alternate" type="text/html" title="Python 에서 멀티 스레드를 사용하기 보다 멀티 프로세스를 사용하자." /><published>2017-12-14T00:00:00+09:00</published><updated>2017-12-14T00:00:00+09:00</updated><id>https://lahuman.github.io/python_thread_process</id><content type="html" xml:base="https://lahuman.github.io/python_thread_process/">&lt;h1 id=&quot;파이선의-스레드에는-약간의-제약이-있다&quot;&gt;파이선의 스레드에는 약간의 제약이 있다.&lt;/h1&gt;

&lt;p&gt;파이썬은 내부적으로 전역 인터프리터 록(Global Interpreter Lock, GIL)을 사용한다. 이것은 시스템 하나에서 스레드 하나만 실행되도록 제한한다.&lt;/p&gt;

&lt;p&gt;따라서 파이썬 쓰래드는 여러개의 코어를 활용하지 못하고 하나의 코어에서만 실행된다.&lt;/p&gt;

&lt;p&gt;대신에 여러개의 코어를 활용할 수 있는 multiprocessing 모듈을 제공한다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;단 프로세스 객체를 생성하고 실행하는 코드는 반드시 __main__ 만 실행하는 코드 안에 적어야 한다.&lt;/strong&gt;&lt;/p&gt;

&lt;h2 id=&quot;자-지금까지-한거-고치자&quot;&gt;자 지금까지 한거 고치자..&lt;/h2&gt;</content><author><name></name></author><category term="Python" /><category term="Thread" /><summary type="html">Global Interpreter Lock, GIL 로 인한 제한</summary></entry><entry><title type="html">졸리다 넘나</title><link href="https://lahuman.github.io/20171213-phase/" rel="alternate" type="text/html" title="졸리다 넘나" /><published>2017-12-13T00:00:00+09:00</published><updated>2017-12-13T00:00:00+09:00</updated><id>https://lahuman.github.io/20171213-phase</id><content type="html" xml:base="https://lahuman.github.io/20171213-phase/">&lt;h1 id=&quot;새벽-3시까지-뒤척거리며-잠을-잘-못잤다&quot;&gt;새벽 3시까지 뒤척거리며 잠을 잘 못잤다.&lt;/h1&gt;

&lt;p&gt;논문도 써야 하고 회사 일도 이번달까지 Prototype 작성해야 하고…&lt;/p&gt;

&lt;p&gt;뭔가 할 일이 많다.&lt;/p&gt;

&lt;h2 id=&quot;졸리다-넘나&quot;&gt;졸리다 넘나..&lt;/h2&gt;</content><author><name></name></author><category term="단상" /><summary type="html">잠을 잘 못잠</summary></entry><entry><title type="html">tor, phantomJS를 Ubuntu에 설치</title><link href="https://lahuman.github.io/tor_phantomjs_install_on_ubuntu/" rel="alternate" type="text/html" title="tor, phantomJS를 Ubuntu에 설치" /><published>2017-12-12T00:00:00+09:00</published><updated>2017-12-12T00:00:00+09:00</updated><id>https://lahuman.github.io/tor_phantomjs_install_on_ubuntu</id><content type="html" xml:base="https://lahuman.github.io/tor_phantomjs_install_on_ubuntu/">&lt;h1 id=&quot;tor-phantomjs를-ubuntu에-설치&quot;&gt;tor, phantomJS를 Ubuntu에 설치&lt;/h1&gt;

&lt;h2 id=&quot;tor-설치--서비스-기동&quot;&gt;tor 설치 &amp;amp; 서비스 기동&lt;/h2&gt;

&lt;p&gt;tor 설치는 간단하게 apt-get을 이용하면 된다.&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# tor 설치
sudo apt-get install tor
# tor service 기동
sudo service tor start
# 기동 확인 9050 포트가 LISTEN되는지 확인
netstat -anop | grep 9050
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;phantomjs-설치&quot;&gt;phantomJS 설치&lt;/h2&gt;
&lt;p&gt;phantomJS는 pip로 설치가 되지 않는다.&lt;/p&gt;

&lt;p&gt;우선 시스템에서 필요한 프로그램을 다음과 같이 설치 한다.&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# 먼저 시스템을 최신 상태로 업데이트 한다.
sudo apt-get update
sudo apt-get install build-essential chrpath libssl-dev libxft-dev

# PhantomJS 관련 필수 프로그램 설치
sudo apt-get install libfreetype6 libfreetype6-dev
sudo apt-get install libfontconfig1 libfontconfig1-dev
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;이후, PhantomJS를 설치 한다.&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# 특정 버젼 다운로드 &amp;amp; 압축 해제
cd ~
export PHANTOM_JS=&quot;phantomjs-2.1.1-linux-x86_64&quot;
wget https://bitbucket.org/ariya/phantomjs/downloads/$PHANTOM_JS.tar.bz2
sudo tar xvjf $PHANTOM_JS.tar.bz2

# /usr/local/share 이하로 옮기고 실행 가능하도록 symlink 설정
sudo mv $PHANTOM_JS /usr/local/share
sudo ln -sf /usr/local/share/$PHANTOM_JS/bin/phantomjs /usr/local/bin

# 확인
phantomjs --version
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;참고-자료&quot;&gt;참고 자료&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://gist.github.com/julionc/7476620&quot;&gt;How to install PhantomJS on Ubuntu&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name></name></author><category term="tor" /><category term="phantomJS" /><summary type="html">apt-get 과 함께면 참 쉽다!</summary></entry><entry><title type="html">Selenium 과 PhantomJS를 사용하는 환경에서 Close는 중요 하다.</title><link href="https://lahuman.github.io/20171208-phase/" rel="alternate" type="text/html" title="Selenium 과 PhantomJS를 사용하는 환경에서 Close는 중요 하다." /><published>2017-12-08T00:00:00+09:00</published><updated>2017-12-08T00:00:00+09:00</updated><id>https://lahuman.github.io/20171208-phase</id><content type="html" xml:base="https://lahuman.github.io/20171208-phase/">&lt;h1 id=&quot;selenium-과-phantomjs를-사용하는-환경에서-webdriverclose는-중요-하다&quot;&gt;Selenium 과 PhantomJS를 사용하는 환경에서 webdriver.close()는 중요 하다.&lt;/h1&gt;

&lt;p&gt;오류가 발생하면서 종료 되었을때도 PhantomJS 프로세스는 종료 되지 않는다.&lt;/p&gt;

&lt;p&gt;따라서 꼭 finally 처리로 닫아 줘야 한다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;driver = webdriver.PhantomJS()
try:
  driver.get(URL)
  # doing something
finally:
  driver.close()
  try:
    # 오류가 발생해도 넘어가기
    driver.quit()
  except Exception:
    pass
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;시작했다고-늘-함께-하진-않는구나&quot;&gt;시작했다고 늘 함께 하진 않는구나…&lt;/h2&gt;</content><author><name></name></author><category term="단상" /><summary type="html">Python에서 만난 OOM</summary></entry><entry><title type="html">Python 에서 DB Pool 사용하기</title><link href="https://lahuman.github.io/python_use_db_pool/" rel="alternate" type="text/html" title="Python 에서 DB Pool 사용하기" /><published>2017-12-07T00:00:00+09:00</published><updated>2017-12-07T00:00:00+09:00</updated><id>https://lahuman.github.io/python_use_db_pool</id><content type="html" xml:base="https://lahuman.github.io/python_use_db_pool/">&lt;h1 id=&quot;python-에서-db-pool-사용하기&quot;&gt;Python 에서 DB Pool 사용하기&lt;/h1&gt;

&lt;blockquote&gt;
  &lt;p&gt;데이터베이스와 애플리케이션을 효율적으로 연결하는 커넥션 플 라이브러리는 애플리케이션에서 필수 요소 입니다.
일반적인 프로그램에서 데이터베이스에 연결(Connection 객체를 얻는 작업)은 많은 시간이 소요 됩니다.
따라서 Connection을 미리 생성시켜 저장소에 저장 했다가 프로그램에서 요청이 있으면 저장소에서 꺼내 제공하면 시간과 리소스를 절약 할 수 있습니다. 이러한 기법을 Connection Pool이라 합니다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Python 에서 사용할수 있는 MariaDB Connection Pool은 몇가지가 있다.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Oracle Mysql Pool(mysql 5.5 이상 설치시 사용 가능)&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.sqlalchemy.org/&quot;&gt;SQLAlchemy&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/LuciferJack/python-mysql-pool&quot;&gt;python-mysql-pool&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;이중 Oracle 에서 제공되는 Pool을 테스트 진행시 Pool 개수 이상을 요구 시, 대기 없이 다음과 같은 오류가 발생한다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;mysql.connector.errors.PoolError: Failed getting connection; pool exhausted
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;때문에 SQLAlchemy는 Python에 대한 SQL 툴킷과 객체 관계 매퍼를 사용하여 구현 하였다.&lt;/p&gt;

&lt;p&gt;우선 JAVA 7의 try-with-resources과 같은 기능이 Python의 &lt;strong&gt;with&lt;/strong&gt; 로 있다.&lt;/p&gt;

&lt;p&gt;따라서 &lt;strong&gt;with&lt;/strong&gt; 를 이용해서 처리 할수 있는 DB에 대한 connection을 얻고 닫는 것을 다음처럼 자동화 할 수 있다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# _Session
with _Session(config['MARIADB']['MARIADB_CONNECT_INFO']) as s:
    onion_count = s.query(OnionsInfo).count()
return onion_count

#Connection
with Connector(config['MARIADB']['MARIADB_CONNECT_INFO']) as con:
    onion_count = con.execute(&quot;select count(*) from onions_info&quot;).fetchall()[0]
return onion_count
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;session 의 경우 SQLAlchemy와 곂치기 때문에 _를 이용함&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;with 절을 이용해 with 절이 시작 할때 &lt;strong&gt;enter&lt;/strong&gt; 가 호출 되고, 종료 될때 &lt;strong&gt;exit&lt;/strong&gt; 가 호출 되어 connection을 시작 하고 종료 한다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
class _Session(Singleton):
    session = None

    def __init__(self, connect_info=None):
        global engine
        if engine is None:
            engine = sqlalchemy.create_engine(
                connect_info, pool_size=5,
                max_overflow=5, pool_recycle=500)
            Session.configure(bind=engine)

    def __enter__(self):
        self.session = Session()
        print &quot;enter = &quot; + str(self.session)
        return self.session

    def __exit__(self, exc_type, exc_val, exc_tb):
        if exc_type is not None:
            self.session.rollback()
            print &quot;rollback()&quot; + str(self.session)
        else:
            self.session.commit()

        print &quot;close() : &quot; + str(self.session)
        self.session.close_all()


class Connector(Singleton):
    con = None

    def __init__(self, connect_info=None):
        global engine
        if engine is None:
            engine = sqlalchemy.create_engine(
                connect_info, pool_size=5,
                max_overflow=5, pool_recycle=500)

    def __enter__(self):
        self.conn = engine.connect()
        return self.conn

    def __exit__(self, exc_type, exc_val, exc_tb):
        self.conn.close();
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;참고-자료&quot;&gt;참고 자료&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;http://www.haruair.com/blog/1682&quot;&gt;SQLAlchemy 시작하기 – Part 1&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://preshing.com/20110920/the-python-with-statement-by-example/&quot;&gt;The Python “with” Statement by Example&lt;/a&gt;&lt;/p&gt;</content><author><name></name></author><category term="SQLAlchemy" /><category term="db pool" /><summary type="html">SQLAlchemy의 DB Pool 이용</summary></entry></feed>
<?xml version="1.0" encoding="utf-8"?><?xml-stylesheet type="text/xml" href="https://lahuman.github.io/feed.xslt.xml"?><feed xmlns="http://www.w3.org/2005/Atom"><generator uri="http://jekyllrb.com" version="3.8.4">Jekyll</generator><link href="https://lahuman.github.io/feed.xml" rel="self" type="application/atom+xml" /><link href="https://lahuman.github.io/" rel="alternate" type="text/html" /><updated>2021-01-18T20:11:17+09:00</updated><id>https://lahuman.github.io/</id><title type="html">lahuman</title><subtitle>열심히 사는 아저씨</subtitle><entry><title type="html">md5-lite 모듈 제작 과정</title><link href="https://lahuman.github.io/md5-lite/" rel="alternate" type="text/html" title="md5-lite 모듈 제작 과정" /><published>2021-01-18T00:00:00+09:00</published><updated>2021-01-18T00:00:00+09:00</updated><id>https://lahuman.github.io/md5-lite</id><content type="html" xml:base="https://lahuman.github.io/md5-lite/">&lt;h1 id=&quot;md5-lite&quot;&gt;&lt;a href=&quot;https://www.npmjs.com/package/md5-lite&quot;&gt;md5-lite&lt;/a&gt;&lt;/h1&gt;

&lt;h2 id=&quot;프로젝트-바로가기&quot;&gt;&lt;a href=&quot;https://github.com/lahuman/md5-lite&quot;&gt;프로젝트 바로가기&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;파일을 청크(Chunk) 사이즈 처리를 해서 성능 향상을 목적으로 만들어진 모듈입니다.
파일 크기가 200000byte(0.2MB) 이상일 경우 초기 100000byte (0.1MB)와 마지막 100000byte을 이용하여 md5 hash 처리 합니다.
그보다 크기가 작을 경우 전체 데이터의 전체를 md5 hash 처리 합니다.&lt;/p&gt;

&lt;p&gt;사용법은 다음과 같습니다.&lt;/p&gt;

&lt;h2 id=&quot;installation&quot;&gt;Installation&lt;/h2&gt;
&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;npm &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;md5-lite &lt;span class=&quot;nt&quot;&gt;--save&lt;/span&gt;
yarn add md5-lite
bower &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;md5-lite &lt;span class=&quot;nt&quot;&gt;--save&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h2 id=&quot;usage&quot;&gt;Usage&lt;/h2&gt;

&lt;h3 id=&quot;javascript&quot;&gt;Javascript&lt;/h3&gt;
&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;md5Lite&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'md5-lite'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;md5Lite&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'./filepath'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;0486c21a4d40d0f3b0bdad3925db439e
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;typescript&quot;&gt;TypeScript&lt;/h3&gt;
&lt;div class=&quot;language-typescript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;md5Lite&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'md5-lite'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;md5Lite&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'./filepath'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;0486c21a4d40d0f3b0bdad3925db439e
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;license&quot;&gt;License&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;http://badges.mit-license.org&quot;&gt;&lt;img src=&quot;http://img.shields.io/:license-mit-blue.svg?style=flat-square&quot; alt=&quot;License&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;&lt;a href=&quot;http://opensource.org/licenses/mit-license.php&quot;&gt;MIT license&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;Copyright 2020 © &lt;a href=&quot;https://lahuman.github.io&quot; target=&quot;_blank&quot;&gt;lahuman&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;</content><category term="duplication" /><category term="file" /><category term="md5" /><summary type="html">중복 파일 검색에서 나온 아이디어를 npm 모듈로 제작해서 배포해보았다.</summary></entry><entry><title type="html">라즈베리파이에 ubuntu에 k3S 설치 하기</title><link href="https://lahuman.github.io/raspberrypi_ubuntu_k3s/" rel="alternate" type="text/html" title="라즈베리파이에 ubuntu에 k3S 설치 하기" /><published>2021-01-16T00:00:00+09:00</published><updated>2021-01-16T00:00:00+09:00</updated><id>https://lahuman.github.io/raspberrypi_ubuntu_k3s</id><content type="html" xml:base="https://lahuman.github.io/raspberrypi_ubuntu_k3s/">&lt;h1 id=&quot;라즈베리파이에-ubuntu에-k3s-설치-하기&quot;&gt;라즈베리파이에 ubuntu에 k3S 설치 하기&lt;/h1&gt;

&lt;blockquote&gt;
  &lt;p&gt;이 글을 읽기 전에 &lt;a href=&quot;https://lahuman.github.io/raspberrypi_k3s/&quot;&gt;라즈베리파이에 k3s 설치 하기 - 실패기&lt;/a&gt; 와 &lt;a href=&quot;https://lahuman.github.io/raspberrypi_ubuntu/&quot;&gt;라즈베리파이에 ubuntu 설치 하기&lt;/a&gt; 를 읽어 보시기를 추천 드립니다.
또한 &lt;a href=&quot;https://lahuman.github.io/raspberrypi_ubuntu/&quot;&gt;라즈베리파이에 ubuntu 설치 하기&lt;/a&gt;의 설정 이후 진행 하셔야 합니다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;hostsname-설정하기&quot;&gt;hostsname 설정하기&lt;/h2&gt;

&lt;p&gt;저는 2대의 라즈베리 파이를 가지고 main(라즈베리4)과 node1(라즈베리3+)으로 구성을 하려고 합니다.
먼저 구분을 하기 위해서 사용하려는 라즈베리파이의 hostname을 변경합니다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo vi /etc/hosts

# mian / node1 으로 수정
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;그리고 다른 모듈에서 hostsname을 변경하지 못하도록 &lt;code class=&quot;highlighter-rouge&quot;&gt;/etc/cloud/cloud.cfg&lt;/code&gt; 파일의 &lt;code class=&quot;highlighter-rouge&quot;&gt;preserve_hostname&lt;/code&gt; 옵션을 &lt;code class=&quot;highlighter-rouge&quot;&gt;true&lt;/code&gt;로 변경합니다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# The top level settings are used as module
# and system configuration.

# A set of users which may be applied and/or used by various modules
# when a 'default' entry is found it will reference the 'default_user'
# from the distro configuration specified below
users:
   - default

# If this is set, 'root' will not be able to ssh in and they
# will get a message to login instead as the default $user
disable_root: true

# This will cause the set+update hostname module to not operate (if true)
# 여기를 true로 변경
preserve_hostname: true
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;linux-컨테이너-기능-활성화&quot;&gt;Linux 컨테이너 기능 활성화&lt;/h2&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;/boot/firmware/cmdline.txt&lt;/code&gt; 파일의 마지막에 라인에 &lt;code class=&quot;highlighter-rouge&quot;&gt;cgroup_enable=cpuset cgroup_memory=1 cgroup_enable=memory&lt;/code&gt; 을 이어서 작성합니다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo vi /boot/firmware/cmdline.txt

# 라인 마지막에 추가 처리 
net.ifnames=0 dwc_otg.lpm_enable=0 console=serial0,115200 console=tty1 root=LABEL=writable rootfstype=ext4 elevator=deadline rootwait fixrtc cgroup_enable=cpuset cgroup_memory=1 cgroup_enable=memory
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;그리고 재부팅을 해야 합니다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo reboot
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;docker-설치&quot;&gt;docker 설치&lt;/h2&gt;

&lt;p&gt;k3s 설치 이전에 docker를 설치 합니다.
docker 설치와 활성화는 다음의 명령어로 쉽게 할 수 있습니다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# docker 설치
sudo apt install docker.io 

# docker 서비스 시작
sudo systemctl start docker

# 부팅시 docker 서비스 시작
sudo systemctl enable docker
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;k3s-설치&quot;&gt;k3s 설치&lt;/h2&gt;

&lt;p&gt;k3s 설치도 다음 스크립트로 쉽게 설치 할 수 있습니다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# 설치 스크립트
curl -sfL https://get.k3s.io | sh -s - --docker

# 서비스 확인
sudo systemctl status k3s
● k3s.service - Lightweight Kubernetes
     Loaded: loaded (/etc/systemd/system/k3s.service; enabled; vendor preset: enabled)
     Active: active (running) since Sat 2021-01-16 13:26:34 UTC; 14min ago
       Docs: https://k3s.io
    Process: 1697 ExecStartPre=/sbin/modprobe br_netfilter (code=exited, status=0/SUCCESS)
    Process: 1733 ExecStartPre=/sbin/modprobe overlay (code=exited, status=0/SUCCESS)
   Main PID: 1734 (k3s-server)
      Tasks: 29
     Memory: 571.3M
     CGroup: /system.slice/k3s.service
             └─1734 /usr/local/bin/k3s server

Jan 16 13:36:39 main k3s[1734]: W0116 13:36:39.184245    1734 machine.go:253] Cannot determine CPU /sys/bus/cpu/devices&amp;gt;
Jan 16 13:36:39 main k3s[1734]: W0116 13:36:39.184308    1734 machine.go:253] Cannot determine CPU /sys/bus/cpu/devices&amp;gt;
Jan 16 13:36:39 main k3s[1734]: W0116 13:36:39.184360    1734 machine.go:253] Cannot determine CPU /sys/bus/cpu/devices&amp;gt;
Jan 16 13:36:39 main k3s[1734]: W0116 13:36:39.184412    1734 machine.go:253] Cannot determine CPU /sys/bus/cpu/devices&amp;gt;
Jan 16 13:36:39 main k3s[1734]: E0116 13:36:39.184432    1734 machine.go:72] Cannot read number of physical cores corre&amp;gt;
Jan 16 13:36:39 main k3s[1734]: W0116 13:36:39.184669    1734 machine.go:253] Cannot determine CPU /sys/bus/cpu/devices&amp;gt;
Jan 16 13:36:39 main k3s[1734]: W0116 13:36:39.184720    1734 machine.go:253] Cannot determine CPU /sys/bus/cpu/devices&amp;gt;
Jan 16 13:36:39 main k3s[1734]: W0116 13:36:39.184768    1734 machine.go:253] Cannot determine CPU /sys/bus/cpu/devices&amp;gt;
Jan 16 13:36:39 main k3s[1734]: W0116 13:36:39.184816    1734 machine.go:253] Cannot determine CPU /sys/bus/cpu/devices&amp;gt;
Jan 16 13:36:39 main k3s[1734]: E0116 13:36:39.184836    1734 machine.go:86] Cannot read number of sockets correctly, n&amp;gt;
lines 1-22/22 (END)

# k3s node 상태 확인
sudo kubectl get ndoes
sudo kubectl get nodes
NAME    STATUS     ROLES                  AGE   VERSION
main    Ready      control-plane,master   24h   v1.20.0+k3s2
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;방화벽-비활성화&quot;&gt;방화벽 비활성화&lt;/h2&gt;

&lt;p&gt;이제 main node의 설정이 끝났습니다.&lt;/p&gt;

&lt;p&gt;worker node와 통신을 위해서 방화벽을 내려둡니다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# 방화벽 비활성화
sudo ufw disable
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;“축하합니다!” 여기까지 진행이 되었다면, main node의 설치가 완료 한 것입니다. 이제 worker node 설치를 진행합니다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;woker node를 설치하기 위해서는 main node의 token이 필요 합니다.&lt;/p&gt;

&lt;p&gt;token은 다음의 명령어로 확인이 가능합니다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo cat /var/lib/rancher/k3s/server/node-token
K10db4cc46dfccb627942c905744dce8ee3099f1153d85c741f21b8c9420febc9db::server:58054e0acd0a3508bc4381e43e74b2ef
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;worker-node-설치-하기&quot;&gt;worker node 설치 하기&lt;/h2&gt;

&lt;p&gt;우선 main node에서 진행했던, &lt;code class=&quot;highlighter-rouge&quot;&gt;linux 컨테이너 활성화&lt;/code&gt;와 &lt;code class=&quot;highlighter-rouge&quot;&gt;docker&lt;/code&gt;를 설치해줍니다. 그리고 &lt;code class=&quot;highlighter-rouge&quot;&gt;방화벽 비활성화&lt;/code&gt;처리 합니다.&lt;/p&gt;

&lt;p&gt;위의 단계가 끝났다면, worker node를 다음의 명령어로 설치합니다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# curl -sfL http://get.k3s.io | K3S_URL=https://&amp;lt;master_IP&amp;gt;:6443 K3S_TOKEN=&amp;lt;join_token&amp;gt; sh -s - --docker
curl -sfL http://get.k3s.io | K3S_URL=https://192.168.0.30:6443 K3S_TOKEN=K10db4cc46dfccb627942c905744dce8ee3099f1153d85c741f21b8c9420febc9db::server:58054e0acd0a3508bc4381e43e74b2ef sh -s - --docker
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;설치가 완료되었다면, 다음 명령어로 상태를 확인하세요.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo systemctl status k3s-agent
● k3s-agent.service - Lightweight Kubernetes
     Loaded: loaded (/etc/systemd/system/k3s-agent.service; enabled; vendor preset: enabled)
     Active: active (running) since Fri 2021-01-15 13:35:53 UTC; 24h ago
       Docs: https://k3s.io
    Process: 1674 ExecStartPre=/sbin/modprobe br_netfilter (code=exited, status=0/SUCCESS)
    Process: 1706 ExecStartPre=/sbin/modprobe overlay (code=exited, status=0/SUCCESS)
   Main PID: 1707 (k3s-agent)
      Tasks: 16
     Memory: 143.6M
     CGroup: /system.slice/k3s-agent.service
             └─1707 /usr/local/bin/k3s agent

Jan 16 13:54:00 node1 k3s[1707]: I0116 13:54:00.243366    1707 policy_none.go:43] [cpumanager] none policy: Start
Jan 16 13:54:00 node1 k3s[1707]: E0116 13:54:00.265387    1707 kubelet.go:1823] skipping pod synchronization - containe&amp;gt;
Jan 16 13:54:00 node1 k3s[1707]: W0116 13:54:00.322546    1707 manager.go:594] Failed to retrieve checkpoint for &quot;kubel&amp;gt;
Jan 16 13:54:00 node1 k3s[1707]: I0116 13:54:00.340881    1707 plugin_manager.go:114] Starting Kubelet Plugin Manager
Jan 16 13:54:01 node1 k3s[1707]: I0116 13:54:01.066655    1707 topology_manager.go:187] [topologymanager] Topology Admi&amp;gt;
Jan 16 13:54:01 node1 k3s[1707]: W0116 13:54:01.067797    1707 pod_container_deletor.go:79] Container &quot;3d18023da3813e1c&amp;gt;
Jan 16 13:54:01 node1 k3s[1707]: I0116 13:54:01.253297    1707 reconciler.go:224] operationExecutor.VerifyControllerAtt&amp;gt;
Jan 16 13:54:01 node1 k3s[1707]: I0116 13:54:01.253506    1707 reconciler.go:157] Reconciler: start to sync state
Jan 16 13:54:01 node1 k3s[1707]: W0116 13:54:01.718236    1707 cni.go:333] CNI failed to retrieve network namespace pat&amp;gt;
Jan 16 13:54:04 node1 k3s[1707]: W0116 13:54:04.529789    1707 pod_container_deletor.go:79] Container &quot;5124f74a4a45f4e
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;main node에서 worker node가 연결되었는지 확인합니다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# node1 이 연결되어 있는 것을 확인합니다.
sudo kubectl get nodes
NAME    STATUS   ROLES                  AGE   VERSION
node1   Ready    &amp;lt;none&amp;gt;                 24h   v1.20.0+k3s2
main    Ready    control-plane,master   24h   v1.20.0+k3s2
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;서비스-올려-보기&quot;&gt;서비스 올려 보기&lt;/h2&gt;

&lt;p&gt;먼저 서비스 yaml 파일을 생성합니다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# k3s-demo.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: k3s-demo
  namespace: default
spec:
  replicas: 1
  selector:
    matchLabels:
      app: k3s-demo
  template:
    metadata:
      labels:
        app: k3s-demo
    spec:
      containers:
      - name: k3s-demo
        image: ruanbekker/rpi-hostname:latest
---
apiVersion: v1
kind: Service
metadata:
  name: k3s-demo
  namespace: default
spec:
  ports:
  - name: http
    targetPort: 8000
    port: 80
  selector:
    app: k3s-demo
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: k3s-demo
  annotations:
    kubernetes.io/ingress.class: &quot;traefik&quot;

spec:
  rules:
  - host: k3s-demo.192.168.0.30.xip.io
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service: 
            name: k3s-demo
            port: 
              number: 80
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;k3s-demo.192.168.0.30.xip.io&lt;/code&gt;에서 사용한 xip.io는 서브 도메인에 설정된 IP로 루프백 해주는 서비스입니다.
도메인기반으로 동작하는 Ingress에서 활용하면 하나의 서비스에 여러 서브 도메인을 테스트 할때 좋습니다.
&lt;code class=&quot;highlighter-rouge&quot;&gt;k3s-demo.192.168.0.30.xip.io&lt;/code&gt; 을 호출하면 192.168.0.30으로 전달합니다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# 서비스 배포
sudo kubectl apply -f k3s-demo.yaml

# 배포된 서비스 확인 (웹 브라우저에서도 확인이 가능합니다.)
curl http://k3s-demo.192.168.0.30.xip.io/
Hostname: k3s-demo-65c8cf57c-2s2tr
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;여기까지-k3s-설치를-마칩니다&quot;&gt;여기까지 k3s 설치를 마칩니다.&lt;/h2&gt;

&lt;h2 id=&quot;참고자료&quot;&gt;참고자료&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://medium.com/@amadmalik/installing-kubernetes-on-raspberry-pi-k3s-and-docker-on-ubuntu-20-04-ef51e5e56&quot;&gt;Installing Kubernetes on Raspberry Pi, K3s and Docker on Ubuntu 20.04&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://sysadmins.co.za/develop-build-and-deploy-a-golang-app-to-k3s/&quot;&gt;Develop Build and Deploy a Golang App to K3S&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="raspberrypi" /><category term="ubuntu" /><category term="k3s" /><summary type="html">'라즈베리파이에 ubuntu 설치하기'에 이어서 진행됩니다.</summary></entry><entry><title type="html">라즈베리파이에 ubuntu 설치 하기</title><link href="https://lahuman.github.io/raspberrypi_ubuntu/" rel="alternate" type="text/html" title="라즈베리파이에 ubuntu 설치 하기" /><published>2021-01-15T00:00:00+09:00</published><updated>2021-01-15T00:00:00+09:00</updated><id>https://lahuman.github.io/raspberrypi_ubuntu</id><content type="html" xml:base="https://lahuman.github.io/raspberrypi_ubuntu/">&lt;h1 id=&quot;라즈베리파이에-ubuntu-설치하기&quot;&gt;라즈베리파이에 ubuntu 설치하기&lt;/h1&gt;

&lt;h2 id=&quot;ubuntu-2004-다운로드&quot;&gt;Ubuntu 20.04 다운로드&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://ubuntu.com/download/raspberry-pi&quot;&gt;Install Ubuntu on a Raspberry Pi 2, 3 or 4&lt;/a&gt;에서 본인의 라즈베리파이에 맞는 이미지를 다운로드 받습니다.&lt;/p&gt;

&lt;p&gt;제 경우는 라즈베리파이 3+ 와 4를 가지고 있어서, Ubuntu Server 20.04.1 LTS 64bit로 다운받았습니다.&lt;/p&gt;

&lt;p&gt;이전 포스트와 마찬가지오 SD카드에 다운 받은 이미지를 굽습니다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;초기 아이디 / 비밀번호는 ubuntu / ubuntu 를 입력하면 됩니다. 설정 후 해당 계정을 삭제 하시는 것을 추천 드려요.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;wifi-연결&quot;&gt;WIFI 연결&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;설정은 root 권한으로 진행해야 하기에 sudo를 사용합니다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;라즈베리파이에서 wif로 연결을 하기 위해서는 먼저 wifi 국가를 JP로 설정해야 됩니다.
JP로 설정하면 대부분의 공유기 wifi를 지원합니다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# 영구적으로 wifi 국가 정보를 변경합니다.
sudo vi  /etc/default/crda 

REGDOMAIN=JP
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;wifi-설정&quot;&gt;wifi 설정&lt;/h3&gt;

&lt;p&gt;netplan을 이용해서 wifi의 정보를 설정하고 반영합니다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo vi /etc/netplan/50-cloud-init.yaml

network:
    ethernets:
        eth0:
            dhcp4: true
            optional: true
# wifi 설정            
    wifis:
        wlan0:
            dhcp4: no
            optional: true
# static ip 설정
            addresses: [192.168.0.31/24]
            gateway4: 192.168.0.1
            nameservers:
                addresses: [8.8.8.8,8.8.4.4]
# wifi access point 정보 
            access-points:
                &quot;DL2&quot;:
                    password: &quot;99876543@!q&quot;
    version: 2
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;위의 내용을 저장하고 netplan 정보를 생성하고 반영합니다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# 정보 생성
sudo netplan generate
# 정보 반영
sudo netplan apply
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;설정중 오류가 발생하면 &lt;a href=&quot;https://linuxhint.com/wi-fi_connecting_issues_raspberry_pi/&quot;&gt;Raspberry Pi Not Connecting to Wi-Fi&lt;/a&gt; 여기에서 정보를 확인 해보셔요.&lt;/p&gt;

&lt;h2 id=&quot;sshd-설치--설정&quot;&gt;sshd 설치 &amp;amp; 설정&lt;/h2&gt;

&lt;p&gt;마지막으로 sshd로 다른 PC에서 접근하기 위해서 sshd 설치하고 설정합니다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# sshd 설치
sudo apt install openssh-server
# 설정 변경
sudo vi /etc/ssh/sshd_config
# 부팅시 sshd 실행
sudo  systemctl enable sshd
# 변경된 설정 반영
sudo  systemctl restart sshd
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;여기까지 ubuntu의 기본 설정을 마무리합니다.&lt;/p&gt;

&lt;p&gt;다음으로 k3s 를 재설치 해보고 테스트 해볼 예정입니다.&lt;/p&gt;

&lt;h2 id=&quot;참고자료&quot;&gt;참고자료&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://ubuntu.com/download/raspberry-pi&quot;&gt;Install Ubuntu on a Raspberry Pi 2, 3 or 4&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://linuxhint.com/wi-fi_connecting_issues_raspberry_pi/&quot;&gt;Raspberry Pi Not Connecting to Wi-Fi&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.lesstif.com/lpt/sshd-server-24445601.html&quot;&gt;우분투 데스크탑 sshd server 활성화&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="raspberrypi" /><category term="ubuntu" /><summary type="html">k3s 재설치를 위한 1보 후퇴</summary></entry><entry><title type="html">회사를 나가는 분이 감사하다고 이야기 했다.</title><link href="https://lahuman.github.io/20210115/" rel="alternate" type="text/html" title="회사를 나가는 분이 감사하다고 이야기 했다." /><published>2021-01-15T00:00:00+09:00</published><updated>2021-01-15T00:00:00+09:00</updated><id>https://lahuman.github.io/20210115</id><content type="html" xml:base="https://lahuman.github.io/20210115/">&lt;h1 id=&quot;선임으로-많은-것을-해주지-못해서-미안하고-좋은-곳으로-가게-되어서-축하드려요&quot;&gt;선임으로 많은 것을 해주지 못해서 미안하고, 좋은 곳으로 가게 되어서 축하드려요.&lt;/h1&gt;

&lt;p&gt;작년에는 같은 팀이 었지만, 다른 팀으로 전배를 하게된 분이 있습니다.&lt;/p&gt;

&lt;p&gt;저와 친하게 지냈고, 성격도 활발해서 즐겁게 일했던 기억을 가지고 있는 분입니다.&lt;/p&gt;

&lt;p&gt;조용히 저에게 와서 그동안 고마웠다고 이야기 하시네요.&lt;/p&gt;

&lt;p&gt;전배이후 좀 힘들어 했는데, 잘된거 같습니다.&lt;/p&gt;

&lt;p&gt;좋은 사람들이 떠나는 건 늘 아쉬운 마음이 드네요.&lt;/p&gt;

&lt;h2 id=&quot;잘가요-고생했어요&quot;&gt;잘가요 고생했어요.&lt;/h2&gt;</content><category term="단상" /><summary type="html">그동안 고마웠다고, 그리고 계속 연락하자고</summary></entry><entry><title type="html">라즈베리파이에 k3s 설치 하기 - 실패기</title><link href="https://lahuman.github.io/raspberrypi_k3s/" rel="alternate" type="text/html" title="라즈베리파이에 k3s 설치 하기 - 실패기" /><published>2021-01-13T00:00:00+09:00</published><updated>2021-01-13T00:00:00+09:00</updated><id>https://lahuman.github.io/raspberrypi_k3s</id><content type="html" xml:base="https://lahuman.github.io/raspberrypi_k3s/">&lt;h1 id=&quot;라즈베리파이에-k3s-설치-하기---실패기&quot;&gt;라즈베리파이에 k3s 설치 하기 - 실패기&lt;/h1&gt;

&lt;blockquote&gt;
  &lt;p&gt;이 포스팅은 실패를 적은 것입니다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;1-라즈베리파이에-os-설치하기&quot;&gt;1. 라즈베리파이에 OS 설치하기&lt;/h2&gt;

&lt;p&gt;그림과 같이 &lt;a href=&quot;https://www.raspberrypi.org/software/operating-systems/#raspberry-pi-os-32-bit&quot;&gt;Raspberry Pi OS 다운로드&lt;/a&gt;페이지에서 &lt;code class=&quot;highlighter-rouge&quot;&gt;Raspberry Pi OS Lite&lt;/code&gt; 버젼을 받습니다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;다른 버젼을 사용해도 되지만, 서버용으로 GUI 없이 사용하기 위해서는 Lite 버젼이면 충분합니다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/post_img/raspberry_os_download.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;그리고 SD 카드에 해당 이미지를 구워줍니다.&lt;/p&gt;

&lt;p&gt;그리고 부팅을 하고 몇가지 설정을 합니다.&lt;/p&gt;

&lt;p&gt;대부분의 설정은 부팅 후 &lt;code class=&quot;highlighter-rouge&quot;&gt;raspi-config&lt;/code&gt; 명령어를 이용하면 쉽게 할 수 있습니다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;인터넷 연결(WIFI)&lt;/li&gt;
  &lt;li&gt;GPU Memory 64M =&amp;gt; 16M&lt;/li&gt;
  &lt;li&gt;hostname 변경(main, worker1, worker2 등)&lt;/li&gt;
  &lt;li&gt;SSH 활성화&lt;/li&gt;
  &lt;li&gt;iptables 사용하도록 설정(k3s는 네트워킹 기능은 내부적으로 iptables 를 사용합니다)&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo iptables -F
sudo update-alternatives --set iptables /usr/sbin/iptables-legacy
sudo update-alternatives --set ip6tables /usr/sbin/ip6tables-legacy
sudo reboot
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;IP 고정&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;vi /etc/dhcpcd.conf

# 본인 환경에 맞게 수정
interface wlan0
static ip_address=192.168.0.30
static routers=192.168.0.1
static domain_name_servers=8.8.8.8 1.1.1.1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;ulimit 설정&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;vi /etc/security/limits.conf

*       -       nofile  32768
*       -       nproc   65536
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;새로운 계정 생성 &amp;amp; pi 계정 삭제&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# root 로 로그인
sudo -i

# lahuman 계정 생성
adduser lahuman
# lahuman 계정에 sudo 권한 부여
adduser lahuman sudo

# 재부팅 후 lahuman 계정으로 로그인하고 pi 계정을 삭제 합니다.
deluser pi
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;여기까지 진행했다면, 라즈베리파이의 설정은 완료 되었습니다.&lt;/p&gt;

&lt;h2 id=&quot;k3s-설치&quot;&gt;k3s 설치&lt;/h2&gt;

&lt;h3 id=&quot;mian-node-설치&quot;&gt;mian node 설치&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;Standard Raspbian Buster installations do not start with cgroups enabled.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Raspbian Buster(Lite 포함)은 cgroups 가 활성화 되어 있지 않아서 다음 설정을 해야 합니다.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;/boot/cmdline.txt&lt;/code&gt; 에 다음을 추가 합니다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;vi /boot/cmdline.txt

# 기존 값이 console=serial0,115200 console=tty1 root=PARTUUID=afe9a4ef-02 rootfstype=ext4 elevator=deadline fsck.repair=yes rootwait  입니다. 
# cgroup_enable=cpuset cgroup_memory=1 cgroup_enable=memory 을 뒤에 추가 하면 됩니다.

console=serial0,115200 console=tty1 root=PARTUUID=afe9a4ef-02 rootfstype=ext4 elevator=deadline fsck.repair=yes rootwait cgroup_enable=cpuset cgroup_memory=1 cgroup_enable=memory
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;이제 main node에 k3s를 스크립트를 이용해서 설치 합니다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# 홈페이지에는 sudo 옵션이 없지만, 해당 옵션이 없으면 설치가 안됩니다.
curl -sfL https://get.k3s.io | sudo sh -
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;설치가 완료되었다면, node를 다음 명령어로 확인해 볼 수 있습니다&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo kubectl get nodes
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/post_img/k3s_install.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;worker-node-설치&quot;&gt;worker node 설치&lt;/h3&gt;

&lt;p&gt;먼저, &lt;code class=&quot;highlighter-rouge&quot;&gt;main node의 k3s설치 스크립트 실행 전까지&lt;/code&gt;와 동일한 작업을 진행합니다.
그리고 설치 main node의 토큰 값을 준비합니다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# main 노드에서 실행
sudo cat /var/lib/rancher/k3s/server/node-token
K10098666be0809d3fe6d02354bd433fb84b67dcb747c73efacc4c2ca12cac38961::server:1f4bfcbf8cf3985a4554a706c9ad704f
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;worker node에 k3s 설치를 진행합니다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;curl -sfL http://get.k3s.io | K3S_URL=https://192.168.0.30:6443 K3S_TOKEN=K10098666be0809d3fe6d02354bd433fb84b67dcb747c73efacc4c2ca12cac38961::server:1f4bfcbf8cf3985a4554a706c9ad704f  sudo sh -
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;k3s-삭제&quot;&gt;k3s 삭제&lt;/h3&gt;

&lt;p&gt;삭제는 다음 명령어로 쉽게 삭제가 가능합니다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# main node
sudo /usr/local/bin/k3s-uninstall.sh

# worker node
sudo /usr/local/bin/k3s-agent-uninstall.sh
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;k3s의-cpu-점유율이-장시간-동안-50-이상을-넘기고-있을-경우-처리-방안&quot;&gt;k3s의 CPU 점유율이 장시간 동안 50% 이상을 넘기고 있을 경우 처리 방안&lt;/h3&gt;

&lt;p&gt;원인을 모르겠지만, 계속 켜놓을 경우 CPU의 점유율이 50%를 넘기면서 nodes 조회가 안되는 현상이 있었습니다.&lt;/p&gt;

&lt;p&gt;검색을 통해서 알아보니, cpu 사용에 limit을 설정 할 수 있다고 하네요.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;vi /etc/systemd/system/k3s.service

CPUQuota=30%
CPUQuotaPeriodSec=50ms
AllowedCPUs=0
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;하지만, 이렇게 설정해도 동일한 오류가 발생했습니다.&lt;/p&gt;

&lt;p&gt;다른 이유로는 &lt;a href=&quot;https://blog.codybunch.com/2020/07/31/Fixing-cgroup-memory-on-Raspbian-Buster-for-Kernel-54x/&quot;&gt;Fixing cgroup memory on Raspbian Buster for Kernel 5.4.x&lt;/a&gt;의 내용과 같이 커널 버그라고 합니다.&lt;/p&gt;

&lt;p&gt;이를 해결하기 위해서는 커널을 업데이트 해야 하는데요.&lt;/p&gt;

&lt;p&gt;/boot/cmdline.txt 내용으 다음과 같이 수정하고,&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;cat /boot/cmdline.txt
console=serial0,115200 console=tty1 root=PARTUUID=dd5ac5d2-02 rootfstype=ext4 elevator=deadline fsck.repair=yes rootwait cgroup_enable=1 cgroup_memory=1 swapaccount=1 cgroup_enable=memory dwc_otg.lpm_enable=0
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;다음의 명령어로 커널을 업데이트 합니다&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo PRUNE_MODULES=1 RPI_REBOOT=1 SKIP_WARNING=1 rpi-update
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;하지만-아무리-해봐도-동일한-현상도-나오며-worker-node를-추가-할-수-없었습니다-대부분의-이야기에서는-ubuntu를-이용하라는-내용이-많이-있네요&quot;&gt;하지만… 아무리 해봐도 동일한 현상도 나오며, worker node를 추가 할 수 없었습니다. 대부분의 이야기에서는 ubuntu를 이용하라는 내용이 많이 있네요.&lt;/h2&gt;

&lt;h2 id=&quot;참고자료&quot;&gt;참고자료&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://rancher.com/docs/k3s/latest/en/installation/installation-requirements/&quot;&gt;Installation Requirements&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://opensource.com/article/20/3/kubernetes-raspberry-pi-k3s&quot;&gt;Run Kubernetes on a Raspberry Pi with k3s&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/k3s-io/k3s/issues/294&quot;&gt;k3s causes a high load average&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://blog.codybunch.com/2020/07/31/Fixing-cgroup-memory-on-Raspbian-Buster-for-Kernel-54x/&quot;&gt;Fixing cgroup memory on Raspbian Buster for Kernel 5.4.x&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="raspberrypi" /><category term="k3s" /><summary type="html">망한 k3s 설치 괴담입니다. 설치했으나.. 제대로 동작하지 않아요.</summary></entry><entry><title type="html">MSSQL POOL을 Express 환경에서 사용하기</title><link href="https://lahuman.github.io/mssql_pool_express/" rel="alternate" type="text/html" title="MSSQL POOL을 Express 환경에서 사용하기" /><published>2020-12-24T00:00:00+09:00</published><updated>2020-12-24T00:00:00+09:00</updated><id>https://lahuman.github.io/mssql_pool_express</id><content type="html" xml:base="https://lahuman.github.io/mssql_pool_express/">&lt;h1 id=&quot;mssql-pool을-express-환경에서-사용하기&quot;&gt;MSSQL POOL을 Express 환경에서 사용하기&lt;/h1&gt;

&lt;p&gt;&lt;a href=&quot;https://www.npmjs.com/package/mssql&quot;&gt;node-mssql&lt;/a&gt;의 예제를 참고로 다음과 같이 사용하고 있었습니다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;sql&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'mssql'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// async/await style:&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;pool1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;sql&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;ConnectionPool&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;pool1Connect&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;pool1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;connect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;pool1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;on&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'error'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;err&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// ... error handler&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;messageHandler&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;pool1Connect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// ensures that the pool has been created&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;request&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;pool1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// or: new sql.Request(pool1)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;query&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'select 1 as number'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;dir&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;err&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'SQL error'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;err&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;문제는 간간히 - &lt;a href=&quot;https://github.com/tediousjs/node-mssql/issues/895&quot;&gt;Error: Already connecting to database&lt;/a&gt; 와 같은 오류가 발생했습니다.&lt;/p&gt;

&lt;p&gt;이유로 매번 요청시마다, connect를 연결하려고 하였기 때문이었습니다.&lt;/p&gt;

&lt;p&gt;해결 방법으로는 &lt;a href=&quot;https://stackoverflow.com/questions/30356148/how-can-i-use-a-single-mssql-connection-pool-across-several-routes-in-an-express&quot;&gt;How can I use a single mssql connection pool across several routes in an Express 4 web application?&lt;/a&gt;에서 제공하는 &lt;code class=&quot;highlighter-rouge&quot;&gt;db.js&lt;/code&gt;를 만들어서 사용하면 됩니다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;const sql = require(&quot;mssql&quot;);
const config = {
  user: process.env.DB_MSSQL_USER,
  password: process.env.DB_MSSQL_PASSWORD,
  server: process.env.DB_MSSQL_IP, // You can use 'localhost\\instance' to connect to named instance
  database: process.env.DB_MSSQL_DB,
  options: {
    encrypt: true, // Use this if you're on Windows Azure
  },
  pool: {
    max: 5,
    min: 1,
    idleTimeoutMillis: 30000,
  },
};

const poolPromise = new sql.ConnectionPool(config)
  .connect()
  .then((pool) =&amp;gt; {
    console.log(&quot;Connected to MSSQL&quot;);
    return pool;
  })
  .catch((err) =&amp;gt; console.log(&quot;Database Connection Failed! Bad Config: &quot;, err));

module.exports = {
  sql,
  poolPromise,
};

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;오늘의-삽질도-끝&quot;&gt;오늘의 삽질도 끝~&lt;/h2&gt;

&lt;h2 id=&quot;참고자료&quot;&gt;참고자료&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.npmjs.com/package/mssql&quot;&gt;node-mssql&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://stackoverflow.com/questions/30356148/how-can-i-use-a-single-mssql-connection-pool-across-several-routes-in-an-express&quot;&gt;How can I use a single mssql connection pool across several routes in an Express 4 web application?&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/tediousjs/node-mssql/issues/895&quot;&gt;Error: Already connecting to database&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="express" /><category term="mssql" /><category term="pool" /><summary type="html">예제를 잘보고 사용하자</summary></entry><entry><title type="html">NAVER CLOUD PLATFORM API를 Typescript 기반에서 사용하기</title><link href="https://lahuman.github.io/typescript_ncloud_api/" rel="alternate" type="text/html" title="NAVER CLOUD PLATFORM API를 Typescript 기반에서 사용하기" /><published>2020-12-21T00:00:00+09:00</published><updated>2020-12-21T00:00:00+09:00</updated><id>https://lahuman.github.io/typescript_ncloud_api</id><content type="html" xml:base="https://lahuman.github.io/typescript_ncloud_api/">&lt;h1 id=&quot;naver-cloud-platform-api를-typescript-기반에서-사용하기&quot;&gt;NAVER CLOUD PLATFORM API를 Typescript 기반에서 사용하기&lt;/h1&gt;

&lt;p&gt;회사의 메일 발송은 NAVER CLOUD PLATFORM API를 이용하고 있습니다.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://apidocs.ncloud.com/ko/common/ncpapi/&quot;&gt;NAVER CLOUD PLATFORM API&lt;/a&gt;를 참조하면 인증키를 생성해서 API를 호출 해야 합니다.&lt;/p&gt;

&lt;p&gt;자바를 사용할 경우 쉽게 만들수 있는데, javascript 버젼의 경우 &lt;a href=&quot;https://code.google.com/archive/p/crypto-js/&quot;&gt;CryptoJS v3.1.2&lt;/a&gt;를 사용하는 가이드를 주고 있습니다.&lt;/p&gt;

&lt;p&gt;문제는 nodejs기반에선는 &lt;a href=&quot;https://code.google.com/archive/p/crypto-js/&quot;&gt;CryptoJS v3.1.2&lt;/a&gt;보다는 &lt;a href=&quot;https://www.npmjs.com/package/crypto-js&quot;&gt;crypto-js&lt;/a&gt;를 많이 사용합니다.&lt;/p&gt;

&lt;p&gt;다음 코드는 &lt;a href=&quot;https://www.npmjs.com/package/crypto-js&quot;&gt;crypto-js&lt;/a&gt;를 사용해서 &lt;a href=&quot;https://apidocs.ncloud.com/ko/common/ncpapi/&quot;&gt;NAVER CLOUD PLATFORM API&lt;/a&gt;를 연동한 예제 입니다.&lt;/p&gt;

&lt;h2 id=&quot;메일-발송-예제&quot;&gt;메일 발송 예제&lt;/h2&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;import { HttpException, HttpStatus, Injectable, Logger } from '@nestjs/common';
import { SendMailDto } from './dto/sendmail.dto';
import { MailResultDto } from './dto/mailresult.dto';
import CryptoJS = require(&quot;crypto-js&quot;);
import Base64 = require('crypto-js/enc-base64');
import { HttpService } from &quot;@nestjs/common&quot;;

@Injectable()
export class MailService {
  constructor(private httpService: HttpService) { }

  private makeSignature(timestamp: string): string {
    const space = &quot; &quot;;				// one space
    const newLine = &quot;\n&quot;;				// new line
    const method = &quot;POST&quot;;				// method
    const url = &quot;/api/v1/mails&quot;;	// url (include query string)
    // const timestamp = new Date().getTime();			// current timestamp (epoch)
    const accessKey = process.env.MAIL_ACCESS_KEY;			// access key id (from portal or Sub Account)
    const secretKey = process.env.MAIL_SECRET_KEY;			// secret key (from portal or Sub Account)
    let baseSignature = (method);
    baseSignature += (space);
    baseSignature += (url);
    baseSignature += (newLine);
    baseSignature += (timestamp);
    baseSignature += (newLine);
    baseSignature += (accessKey);

    const hmac = CryptoJS.HmacSHA256(baseSignature, secretKey);
    return Base64.stringify(hmac);
  }

  public async sendMail(sendMailDto: SendMailDto): Promise&amp;lt;MailResultDto&amp;gt; {
    const timestamp: string = new Date().getTime().toString();
    return this.httpService.post('https://mail.apigw.ntruss.com/api/v1/mails', sendMailDto, {
      headers: {
        &quot;x-ncp-apigw-timestamp&quot;: timestamp,
        &quot;x-ncp-iam-access-key&quot;: process.env.MAIL_ACCESS_KEY,
        &quot;x-ncp-apigw-signature-v2&quot;: this.makeSignature(timestamp),
        &quot;Content-Type&quot;: &quot;application/json&quot;
      }
    }).toPromise().then(({ data }) =&amp;gt; data)
      .catch(e =&amp;gt; {
        this.logger.error(e);
        throw new HttpException(&quot;Bad Request.&quot;, HttpStatus.BAD_REQUEST);
      });
  }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;a href=&quot;https://www.npmjs.com/package/crypto-js&quot;&gt;crypto-js&lt;/a&gt;를 Typescript 기반에서 사용할때 주의할 것은, import 방식을 다음과 같이 사용하여야 합니다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;import CryptoJS = require(&quot;crypto-js&quot;);
import Base64 = require('crypto-js/enc-base64');
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;어렵고도쉬운문제&quot;&gt;어렵고도쉬운문제&lt;/h2&gt;

&lt;h2 id=&quot;참고자료&quot;&gt;참고자료&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://apidocs.ncloud.com/ko/common/ncpapi/&quot;&gt;NAVER CLOUD PLATFORM API&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.npmjs.com/package/crypto-js&quot;&gt;crypto-js with npm&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://code.google.com/archive/p/crypto-js/&quot;&gt;crypto-js with google&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://stackoverflow.com/questions/52618158/typeerror-sha256-1-default-is-not-a-function&quot;&gt;TypeError: sha256_1.default is not a function&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="naver" /><category term="api" /><category term="typescript" /><summary type="html">Typescript with NAVER CLOUD PLATFORM API</summary></entry><entry><title type="html">욕심 내려놓기 그리고…</title><link href="https://lahuman.github.io/20201219/" rel="alternate" type="text/html" title="욕심 내려놓기 그리고..." /><published>2020-12-19T00:00:00+09:00</published><updated>2020-12-19T00:00:00+09:00</updated><id>https://lahuman.github.io/20201219</id><content type="html" xml:base="https://lahuman.github.io/20201219/">&lt;h1 id=&quot;인생은-b와-d-사이의-c라고-하지-않았는가&quot;&gt;인생은 B와 D 사이의 C라고 하지 않았는가?&lt;/h1&gt;

&lt;blockquote&gt;
  &lt;p&gt;인생은 삶(Birth)과 죽음(Death)사이의 선택(Choice)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;이라고&lt;code class=&quot;highlighter-rouge&quot;&gt;장 폴 사르트르&lt;/code&gt;가 이야기 했다고 합니다.&lt;/p&gt;

&lt;p&gt;40대가 되면서, 욕심을 내려놓고 제가 집중할 수 있는 것에 집중하려고 노력하고 있습니다.&lt;/p&gt;</content><category term="단상" /><summary type="html">능력은 없는데 욕심이 계속 난다.</summary></entry><entry><title type="html">Nestjs 듀토리얼 따라하기</title><link href="https://lahuman.github.io/nestjs_tutorial/" rel="alternate" type="text/html" title="Nestjs 듀토리얼 따라하기" /><published>2020-12-09T00:00:00+09:00</published><updated>2020-12-09T00:00:00+09:00</updated><id>https://lahuman.github.io/nestjs_tutorial</id><content type="html" xml:base="https://lahuman.github.io/nestjs_tutorial/">&lt;h1 id=&quot;nestjs-tutorial&quot;&gt;Nestjs tutorial&lt;/h1&gt;

&lt;h2 id=&quot;1-프로젝트-생성하기&quot;&gt;1. 프로젝트 생성하기&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;a href=&quot;https://docs.nestjs.com/cli/overview&quot;&gt;nestjs cli&lt;/a&gt; 를 이용하면 쉽게 프로젝트를 생성 할수 있습니다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# nestjs cli 설치
$ npm i -g @nestjs/cli
# 프로젝트 생성
$ nest new project-name
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;2-openapi-설정&quot;&gt;2. &lt;a href=&quot;https://swagger.io/specification/&quot;&gt;OpenAPI&lt;/a&gt; 설정&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;다음 라이브러리를 설치합니다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ npm install --save @nestjs/swagger swagger-ui-express
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;이후 &lt;code class=&quot;highlighter-rouge&quot;&gt;main.ts&lt;/code&gt;에 SwaggerModule 설정을 합니다&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# main.ts&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;NestFactory&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'@nestjs/core'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;AppModule&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'./app.module'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;NestExpressApplication&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;@nestjs/platform-express&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;SwaggerModule&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;DocumentBuilder&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'@nestjs/swagger'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;bootstrap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;app&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;NestFactory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;create&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;NestExpressApplication&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;AppModule&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;options&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;DocumentBuilder&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;setTitle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'프로젝트 명'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;setDescription&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'프로젝트 설명'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;setVersion&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'1.0'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;build&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;document&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;SwaggerModule&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;createDocument&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;options&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;SwaggerModule&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;setup&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'docs'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;listen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;process&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;env&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;PORT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;bootstrap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;3-validation&quot;&gt;3. &lt;a href=&quot;https://docs.nestjs.com/techniques/validation&quot;&gt;Validation&lt;/a&gt;&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;request 요청에 대한 Validation(검증) 처리를 위해
다음 라이브러리의 설치가 필요 합니다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ npm install class-validator
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;Global 설정을 main.ts에 추가 합니다.
&lt;a href=&quot;https://docs.nestjs.com/techniques/validation#transform-payload-objects&quot;&gt;Transform payload objects&lt;/a&gt; 설정을 하여 자동 변환 처리를 합니다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# main.ts&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;NestFactory&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'@nestjs/core'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;AppModule&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'./app.module'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;NestExpressApplication&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;@nestjs/platform-express&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;SwaggerModule&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;DocumentBuilder&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'@nestjs/swagger'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ValidationPipe&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'@nestjs/common'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;bootstrap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;app&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;NestFactory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;create&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;NestExpressApplication&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;AppModule&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;useGlobalPipes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ValidationPipe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;transform&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}));&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Validate with 자동 변환 처리&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;options&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;DocumentBuilder&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;setTitle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'프로젝트 명'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;setDescription&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'프로젝트 설명'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;setVersion&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'1.0'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;build&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;document&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;SwaggerModule&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;createDocument&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;options&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;SwaggerModule&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;setup&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'docs'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;listen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;process&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;env&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;PORT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;bootstrap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;이후 예제는 &lt;a href=&quot;https://docs.nestjs.com/techniques/validation#auto-validation&quot;&gt;auto-validation&lt;/a&gt;에서 확인하세요.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;4-configuration&quot;&gt;4. &lt;a href=&quot;https://docs.nestjs.com/techniques/configuration&quot;&gt;Configuration&lt;/a&gt;&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;express에서는 dotenv를 사용하였는데, nestjs에서는 Configuration이 제공 됩니다.
설치는 아래와 같습니다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ npm i --save @nestjs/config
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;사용법은 &lt;code class=&quot;highlighter-rouge&quot;&gt;app.module.ts&lt;/code&gt;에 선언을 하여서 사용합니다. isGlobal 설정을 해두면 다른 모듈에서 imports 하지 않고 사용이 가능합니다.
기본적으로 .env 파일을 읽어서 변수화 하여 사용합니다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;import { Module } from '@nestjs/common';
import { ConfigModule } from '@nestjs/config';

@Module({
  imports: [ConfigModule.forRoot({  isGlobal: true })],
})
export class AppModule {}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;더 자세한 예제는 &lt;a href=&quot;https://docs.nestjs.com/techniques/configuration#using-the-configservice&quot;&gt;Using the ConfigService&lt;/a&gt;를 참조하세요.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;4-logger&quot;&gt;4. &lt;a href=&quot;https://docs.nestjs.com/techniques/logger&quot;&gt;Logger&lt;/a&gt;&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;nestjs에서는 기본적으로 Logger class를 제공합니다.
&lt;code class=&quot;highlighter-rouge&quot;&gt;main.js&lt;/code&gt;에서 ApplicationModule에서 logger 옵션을 이용해서 레벨을 설정할 수 있습니다.
레벨은 ‘log’, ‘error’, ‘warn’, ‘debug’, ‘verbose’ 이 있습니다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;const app = await NestFactory.create(ApplicationModule, {
  logger: ['error', 'warn'],
});
await app.listen(3000);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;사용법은 &lt;a href=&quot;https://docs.nestjs.com/techniques/logger#using-the-logger-for-application-logging&quot;&gt;Using the logger for application logging&lt;/a&gt; 같이 주입하여 사용이 가능합니다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;import { Logger, Injectable } from '@nestjs/common';

@Injectable()
class MyService {
  private readonly logger = new Logger(MyService.name);

  doSomething() {
    this.logger.log('Doing something...');
  }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;5-session&quot;&gt;5. &lt;a href=&quot;https://docs.nestjs.com/techniques/session&quot;&gt;session&lt;/a&gt;&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;세션은 express를 사용할 경우 express-session 모듈을 설치해서 사용합니다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ npm i express-session
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;사용법은 &lt;code class=&quot;highlighter-rouge&quot;&gt;main.ts&lt;/code&gt;에 아래 코드를 추가합니다.(이는 &lt;a href=&quot;https://www.npmjs.com/package/express-session&quot;&gt;express-session&lt;/a&gt; 사용법을 자세히 보세요.)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;import * as session from 'express-session';
// somewhere in your initialization file
app.use(
  session({
    secret: 'my-secret',
    resave: false,
    saveUninitialized: false,
  }),
);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;6-helmet--cors-설정&quot;&gt;6. &lt;a href=&quot;https://docs.nestjs.com/security/helmet&quot;&gt;helmet&lt;/a&gt; &amp;amp; &lt;a href=&quot;https://docs.nestjs.com/security/cors&quot;&gt;cors&lt;/a&gt; 설정&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;helmet 과 cors 설정은 다른 설정 함수 보다 먼저 설정되어야 합니다. 
만약 경로를 정의한 후 helmet과 cors를 설정할 경우 이미 설정된 경로의 미들웨어는 적용되지 않을 수 있습니다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;helmet은 http 해더를 적정하게 설정하여 웹 취약점으로 부터 앱을 보호 합니다.
설치&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ npm i --save helmet
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;사용법&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;import * as helmet from 'helmet';
// somewhere in your initialization file
app.use(helmet());
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;cors는 다른 도메인에서 리소스를 요청 할 수 있도록하는 설정입니다.
설치는 따로 필요 없습니다. 사용법은 아래와 같습니다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;const app = await NestFactory.create(AppModule);
app.enableCors();
await app.listen(3000);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;maints-예제&quot;&gt;main.ts 예제&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;다음은 제가 사용한 예제 입니다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;NestFactory&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'@nestjs/core'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;AppModule&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'./app.module'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;NestExpressApplication&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;@nestjs/platform-express&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;helmet&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'helmet'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;SwaggerModule&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;DocumentBuilder&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'@nestjs/swagger'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ValidationPipe&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'@nestjs/common'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;session&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'express-session'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;passport&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'passport'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;flash&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'connect-flash'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;bootstrap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;app&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;NestFactory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;create&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;NestExpressApplication&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;AppModule&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;setGlobalPrefix&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'api'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// prefix 설정&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;useGlobalPipes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ValidationPipe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;transform&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}));&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// validate 사용 설정&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;use&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;helmet&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;contentSecurityPolicy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}));&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// helmet 설정과 CSP 제외 (google analytics 사용시 제외 해야함)&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;enableCors&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;origin&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;/^&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;methods&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'GET,HEAD,PUT,PATCH,POST,DELETE,OPTIONS'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;preflightContinue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;credentials&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;optionsSuccessStatus&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;204&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;allowedHeaders&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;s1&quot;&gt;'Origin,X-Requested-With,Content-Type,Accept,Authorization,authorization,X-Forwarded-for'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// cors 설정 credentials 설정을 해야 credentials 정보도 함께 전달함&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;options&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;DocumentBuilder&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;setTitle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'프로젝트 명'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;setDescription&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'프로젝트 설명'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;setVersion&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'1.0'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;addBearerAuth&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// openapi 문서에서 권한 처리 추가&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;build&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;document&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;SwaggerModule&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;createDocument&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;options&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;SwaggerModule&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;setup&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'docs'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// openapi 사용&lt;/span&gt;

  &lt;span class=&quot;nx&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;use&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;session&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;secret&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;process&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;env&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;SECCRET&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'keyboard cat'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;resave&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;saveUninitialized&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}));&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// session 사용&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// passport 설정&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;use&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;passport&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;initialize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;());&lt;/span&gt; 
  &lt;span class=&quot;nx&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;use&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;passport&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;session&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;());&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// request에 값을 추가 하는 flash 추가 &lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;use&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;flash&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;());&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;listen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;process&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;env&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;PORT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;bootstrap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;상세한-예제는-다음-2개의-프로젝트를-참고-하세요&quot;&gt;상세한 예제는 다음 2개의 프로젝트를 참고 하세요.&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/lahuman/nestjs-realworld-example-app/tree/swagger-docs&quot;&gt;nestjs-realworld-example-app&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/lahuman/test-auth-chapter-sample&quot;&gt;test-auth-chapter-sample&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;참고자료&quot;&gt;참고자료&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.nestjs.com/first-steps&quot;&gt;First steps&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.nestjs.com/cli/overview&quot;&gt;nestjs cli&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="nestjs" /><category term="tutorial" /><summary type="html">내가 사용하고 있는 초기 설정들 정리</summary></entry><entry><title type="html">typeorm에서 merge 처리 예제</title><link href="https://lahuman.github.io/typeorm_mege/" rel="alternate" type="text/html" title="typeorm에서 merge 처리 예제" /><published>2020-12-02T00:00:00+09:00</published><updated>2020-12-02T00:00:00+09:00</updated><id>https://lahuman.github.io/typeorm_mege</id><content type="html" xml:base="https://lahuman.github.io/typeorm_mege/">&lt;h1 id=&quot;typeorm에서-merge-예제&quot;&gt;typeorm에서 merge 예제&lt;/h1&gt;

&lt;p&gt;데이터가 있을 경우 update, 없을 경우 insert를 처리 하는 코드 예제 입니다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;await this.eventsRepository
      .createQueryBuilder()
      .insert()
      .into(Event)
      .values(event)
      .orUpdate({ conflict_target: ['wp_id'], overwrite: ['cntnt', 'srch_wrd_seq', 'writr_nm', 'writr_id', 'tgtr_nm', 'tgtr_id', 'mod_dtm'] })
      .execute();
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;orUpdate의 conflict_target에 중복 키 값을 넣고 update할 목록을 overwrite에 넣으면 됩니다.&lt;/p&gt;

&lt;p&gt;여기서 주요한건, 모두 &lt;code class=&quot;highlighter-rouge&quot;&gt;DB필드 기준&lt;/code&gt;으로 입력하여야 합니다.&lt;/p&gt;

&lt;h2 id=&quot;참고자료&quot;&gt;참고자료&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://stackoverflow.com/questions/46745688/typeorm-upsert-create-if-not-exist&quot;&gt;TypeORM upsert - create if not exist&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="typeorm" /><category term="nestjs" /><summary type="html">insert or update 처리</summary></entry></feed>

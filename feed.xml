<?xml version="1.0" encoding="utf-8"?><?xml-stylesheet type="text/xml" href="https://lahuman.github.io/feed.xslt.xml"?><feed xmlns="http://www.w3.org/2005/Atom"><generator uri="http://jekyllrb.com" version="3.8.4">Jekyll</generator><link href="https://lahuman.github.io/feed.xml" rel="self" type="application/atom+xml" /><link href="https://lahuman.github.io/" rel="alternate" type="text/html" /><updated>2021-05-25T23:03:27+09:00</updated><id>https://lahuman.github.io/</id><title type="html">lahuman</title><subtitle>열심히 사는 아저씨</subtitle><entry><title type="html">nodejs에서 middleware 처리 방법</title><link href="https://lahuman.github.io/nodejs_middleware/" rel="alternate" type="text/html" title="nodejs에서 middleware 처리 방법" /><published>2021-05-25T00:00:00+09:00</published><updated>2021-05-25T00:00:00+09:00</updated><id>https://lahuman.github.io/nodejs_middleware</id><content type="html" xml:base="https://lahuman.github.io/nodejs_middleware/">&lt;h1 id=&quot;nodejs에서-middleware-처리-방법&quot;&gt;nodejs에서 middleware 처리 방법&lt;/h1&gt;

&lt;p&gt;기존 function에서 오류가 날 경우 봇으로 메시지 발송 기능을 구현 하려고 합니다.&lt;/p&gt;

&lt;p&gt;express에서는 middleware를 활용했었는데, 순수한 javascript에서는 어떻게 해야할지 검색을 해보니 &lt;a href=&quot;https://stackoverflow.com/questions/11742067/is-there-a-way-to-add-try-catch-to-every-function-in-javascript&quot;&gt;Is there a way to add try-catch to every function in Javascript?&lt;/a&gt; 를 확인 할 수 있었습니다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;var tcWrapper = function(f) {
    return function() {
        try {
            f.apply(this, arguments);
        } catch(e) {
            customErrorHandler(e)
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;위 예제의 문제는&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;결과 값 return 처리가 안되었다.&lt;/li&gt;
  &lt;li&gt;async (비동기) 처리에서 오류 발생시 catch가 안됩니다.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;이를 해결하기 위해서 다음과 같이 해결하였습니다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;var wrapper = function (f) {
  return async function () {
    try {
      return await f.apply(this, arguments);
    } catch (err) {
      const { statusCode: status } = JSON.parse(err);
      if (status &amp;gt; 400) {
        await botFailMessageSnd(`연동시 오류가 발생하였습니다. http status code : [${status}]`);
      }
      throw err;
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ol&gt;
  &lt;li&gt;return 구문 추가로 최종 결과값 전달&lt;/li&gt;
  &lt;li&gt;async, await 키워드 추가로 비동기에 오류 누락 문제 해결&lt;/li&gt;
  &lt;li&gt;throw 구문으로 오류 전파&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;사용은 &lt;code class=&quot;highlighter-rouge&quot;&gt;module.export&lt;/code&gt; 시 &lt;code class=&quot;highlighter-rouge&quot;&gt;function을 감싸서 처리&lt;/code&gt; 합니다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;module.exports = {
  getUsers: wrapper(getUsers),
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;참고자료&quot;&gt;참고자료&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://stackoverflow.com/questions/11742067/is-there-a-way-to-add-try-catch-to-every-function-in-javascript&quot;&gt;Is there a way to add try-catch to every function in Javascript?&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="nodejs" /><category term="middleware" /><summary type="html">express 없이 순수 javascript 에서 처리 하는 방법</summary></entry><entry><title type="html">ReactJS composition(합성) 사용하기</title><link href="https://lahuman.github.io/react_composition/" rel="alternate" type="text/html" title="ReactJS composition(합성) 사용하기" /><published>2021-05-24T00:00:00+09:00</published><updated>2021-05-24T00:00:00+09:00</updated><id>https://lahuman.github.io/react_composition</id><content type="html" xml:base="https://lahuman.github.io/react_composition/">&lt;h1 id=&quot;reactjs-합성-사용하기&quot;&gt;reactjs 합성 사용하기&lt;/h1&gt;

&lt;p&gt;Reactjs에서는 상속보다 더 강력한 합성을 제공합니다.
상속 대신 합성을 사용하면 컴포넌트 간에 코드를 재활용하기 펼리합니다.&lt;/p&gt;

&lt;p&gt;합성의 사용 예제는 아래와 같습니다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;function SplitPane(props) {
  return (
    &amp;lt;div className=&quot;SplitPane&quot;&amp;gt;
      &amp;lt;div className=&quot;SplitPane-left&quot;&amp;gt;
        {props.left}
      &amp;lt;/div&amp;gt;
      &amp;lt;div className=&quot;SplitPane-right&quot;&amp;gt;
        {props.right}
      &amp;lt;/div&amp;gt;
    &amp;lt;/div&amp;gt;
  );
}

function App() {
  return (
    &amp;lt;SplitPane
      left={
        &amp;lt;Contacts /&amp;gt;
      }
      right={
        &amp;lt;Chat /&amp;gt;
      } /&amp;gt;
  );
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;Contacts /&gt;
&lt;p&gt;와 &lt;Chat&gt;&lt;/Chat&gt; 동일한 React 엘리먼트는 단지 객체이기 때문에 다른 데이터처럼 props로 전달할 수 있습니다.&lt;/p&gt;

&lt;h2 id=&quot;참고자료&quot;&gt;참고자료&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://ko.reactjs.org/docs/composition-vs-inheritance.html&quot;&gt;합성 (Composition) vs 상속 (Inheritance)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="reactjs" /><category term="composition" /><summary type="html">컴포넌트에서 상속보다 합성 사용하기</summary></entry><entry><title type="html">좋은 문화를 가진 팀의 문화를 다른 팀에 전파를 할 수 있을까?</title><link href="https://lahuman.github.io/20210522/" rel="alternate" type="text/html" title="좋은 문화를 가진 팀의 문화를 다른 팀에 전파를 할 수 있을까?" /><published>2021-05-22T00:00:00+09:00</published><updated>2021-05-22T00:00:00+09:00</updated><id>https://lahuman.github.io/20210522</id><content type="html" xml:base="https://lahuman.github.io/20210522/">&lt;h1 id=&quot;문화를-어떻게-전파-할-수-있을까&quot;&gt;문화를 어떻게 전파 할 수 있을까?&lt;/h1&gt;

&lt;p&gt;특정 팀의 문화를 다른 팀에 전파하려면 어떻게 해야 할까요?&lt;/p&gt;

&lt;p&gt;저희 팀의 문화가 좋다며, 다른 팀에 전파를 하라는 미션이 떨어졌습니다.&lt;/p&gt;

&lt;p&gt;개인적으로는 팀의 문화는 해당 팀의 상황과 환경 그리고 사람에 따라 달라진다고 생각됩니다.&lt;/p&gt;

&lt;p&gt;한명의 사람이 팀을 변화시키지 위해서는 많은 권한을 제공해야 합니다.&lt;/p&gt;

&lt;p&gt;하지만 이는 자발적인 변화가 아닌 강제적인 변화로 기존 팀원들에게 부담감과 변화에 대한 반발이 생기게 됩니다.&lt;/p&gt;

&lt;p&gt;이것들이 변화를 위한 과정일까요? 그리고 변화가 가능한 걸까요?&lt;/p&gt;

&lt;p&gt;마지막으로 특정 특출난 동료가 있다는 건 좋은 일일까요? 나쁜 일일까요?&lt;/p&gt;

&lt;h2 id=&quot;많은-생각이-드는-저녁&quot;&gt;많은 생각이 드는 저녁&lt;/h2&gt;</content><category term="단상" /><category term="문화" /><summary type="html">모종 처럼 좋은 문화를 가진 팀원을 다른 팀에 넣으면 변할까?</summary></entry><entry><title type="html">JAVA 1.5 에서 TLS 1.2 를 사용하는 HTTPS 통신 하는 방법</title><link href="https://lahuman.github.io/jdk5_tls1_2/" rel="alternate" type="text/html" title="JAVA 1.5 에서 TLS 1.2 를 사용하는 HTTPS 통신 하는 방법" /><published>2021-05-19T00:00:00+09:00</published><updated>2021-05-19T00:00:00+09:00</updated><id>https://lahuman.github.io/jdk5_tls1_2</id><content type="html" xml:base="https://lahuman.github.io/jdk5_tls1_2/">&lt;h1 id=&quot;하루-종일-jdk5와-https-tls12-랑-씨름을-하고-있다&quot;&gt;하루 종일 jdk5와 https tls1.2 랑 씨름을 하고 있다.&lt;/h1&gt;

&lt;p&gt;우선 jdk5에서 tls1.2 연결을 위해서 &lt;a href=&quot;https://www.bouncycastle.org/&quot;&gt;bouncy castle&lt;/a&gt;를 사용해보았습니다.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.bouncycastle.org/docs/tlsdocs1.5on/org/bouncycastle/tls/test/TlsClientTest.html&quot;&gt;TlsClientTest&lt;/a&gt; 소스로 테스트를 해보았지만, 결국 아래와 같은 오류를 만나고 말았습니다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;TLS client negotiated TLS 1.2
TLS client received server certificate chain of length 3
    fingerprint:SHA-256 83:9E:08:A5:4F:CC:73:F7:F8:DE:2E:23:89:DB:40:E1:B5:E1:E4:9E:6C:33:4C:A8:EE:30:68:01:76:4F:ED:69 (C=KR,ST=Seoul,L=Yeongdeungpo-gu,O=GS Ho                                                                              me Shopping Inc.,OU=IT Team,CN=*.gsshop.com)
    fingerprint:SHA-256 9A:5E:EC:EE:9C:7D:89:8B:D8:1D:C3:BF:06:6D:AF:6A:EF:B8:DB                                                                              :1C:59:67:62:06:D2:BF:DD:68:23:12:C6:F6 (C=US,O=DigiCert Inc,OU=www.digicert.com                                                                              ,CN=Thawte RSA CA 2018)
    fingerprint:SHA-256 43:48:A0:E9:44:4C:78:CB:26:5E:05:8D:5E:89:44:B4:D8:4F:96                                                                              :62:BD:26:DB:25:7F:89:34:A4:43:C7:01:61 (C=US,O=DigiCert Inc,OU=www.digicert.com                                                                              ,CN=DigiCert Global Root CA)
TLS client raised alert: fatal(2), internal_error(80)
&amp;gt; Failed to read record
java.lang.NullPointerException
        at java.io.Reader.&amp;lt;init&amp;gt;(Reader.java:61)
        at java.io.InputStreamReader.&amp;lt;init&amp;gt;(InputStreamReader.java:55)
        at TlsTestUtils.loadPemResource(TlsTestUtils.java:478)
        at TlsTestUtils.loadCertificateResource(TlsTestUtils.java:368)
        at TlsTestUtils.getTrustedCertPath(TlsTestUtils.java:502)
        at MockTlsClient$1.notifyServerCertificate(MockTlsClient.java:128)
        at org.bouncycastle.tls.TlsUtils.processServerCertificate(Unknown Source                                                                              )
        at org.bouncycastle.tls.TlsClientProtocol.handleServerCertificate(Unknow                                                                              n Source)
        at org.bouncycastle.tls.TlsClientProtocol.handleHandshakeMessage(Unknown                                                                               Source)
        at org.bouncycastle.tls.TlsProtocol.processHandshakeQueue(Unknown Source                                                                              )
        at org.bouncycastle.tls.TlsProtocol.processRecord(Unknown Source)
        at org.bouncycastle.tls.RecordStream.readRecord(Unknown Source)
        at org.bouncycastle.tls.TlsProtocol.safeReadRecord(Unknown Source)
        at org.bouncycastle.tls.TlsProtocol.blockForHandshake(Unknown Source)
        at org.bouncycastle.tls.TlsClientProtocol.connect(Unknown Source)
        at TlsClientTest.openTlsConnection(TlsClientTest.java:62)
        at TlsClientTest.main(TlsClientTest.java:30)
Exception in thread &quot;main&quot; org.bouncycastle.tls.TlsFatalAlert: internal_error(80)
        at org.bouncycastle.tls.TlsProtocol.safeReadRecord(Unknown Source)
        at org.bouncycastle.tls.TlsProtocol.blockForHandshake(Unknown Source)
        at org.bouncycastle.tls.TlsClientProtocol.connect(Unknown Source)
        at TlsClientTest.openTlsConnection(TlsClientTest.java:62)
        at TlsClientTest.main(TlsClientTest.java:30)
Caused by: java.lang.NullPointerException
        at java.io.Reader.&amp;lt;init&amp;gt;(Reader.java:61)
        at java.io.InputStreamReader.&amp;lt;init&amp;gt;(InputStreamReader.java:55)
        at TlsTestUtils.loadPemResource(TlsTestUtils.java:478)
        at TlsTestUtils.loadCertificateResource(TlsTestUtils.java:368)
        at TlsTestUtils.getTrustedCertPath(TlsTestUtils.java:502)
        at MockTlsClient$1.notifyServerCertificate(MockTlsClient.java:128)
        at org.bouncycastle.tls.TlsUtils.processServerCertificate(Unknown Source)
        at org.bouncycastle.tls.TlsClientProtocol.handleServerCertificate(Unknown Source)
        at org.bouncycastle.tls.TlsClientProtocol.handleHandshakeMessage(Unknown Source)
        at org.bouncycastle.tls.TlsProtocol.processHandshakeQueue(Unknown Source)
        at org.bouncycastle.tls.TlsProtocol.processRecord(Unknown Source)
        at org.bouncycastle.tls.RecordStream.readRecord(Unknown Source)
        ... 5 more

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;많은 삽질을 하며 시간을 보내다가, 
다시 원점으로 돌아가서 &lt;strong&gt;왜&lt;/strong&gt;와 &lt;strong&gt;환경&lt;/strong&gt;에 대하여 고민하였습니다.&lt;/p&gt;

&lt;p&gt;꼭 jdk5 에서 접근해야 할까? Linux환경이라면 curl이라는 훌륭한 툴을 이용하면 어떨까?&lt;/p&gt;

&lt;p&gt;결국 Curl을 Java에서 Command Line으로 실행하는 코드를 만들었습니다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;import java.lang.Process;
import java.lang.Runtime;
import java.io.InputStreamReader;
import java.io.BufferedReader;
import java.io.IOException;

public class CurlJavaTest {
    public static void main(String[] args) throws java.lang.InterruptedException {
        String output = &quot;&quot;;
        String command = &quot;curl -k http://gsshop.com&quot;;
        try {
            Process p = Runtime.getRuntime().exec(command);
            p.waitFor();
            BufferedReader reader = new BufferedReader(new InputStreamReader(p.getInputStream()));
            String line = &quot;&quot;;
            while ((line = reader.readLine()) != null) {
                output = output.concat(line + &quot;\n&quot;);
            }
        } catch (IOException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }
        System.out.println(output);
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;생각의-관점을-바꾸어서-시도해보면-좋은-결과가-나오기도-하네요&quot;&gt;생각의 관점을 바꾸어서 시도해보면 좋은 결과가 나오기도 하네요.&lt;/h2&gt;</content><category term="jdk5" /><category term="tls" /><category term="https" /><summary type="html">개똥 손이 많이 간다고 하는 내용이 많습니다.</summary></entry><entry><title type="html">예의를 지키는 사람들이 많았으면 좋겠다.</title><link href="https://lahuman.github.io/20210519/" rel="alternate" type="text/html" title="예의를 지키는 사람들이 많았으면 좋겠다." /><published>2021-05-19T00:00:00+09:00</published><updated>2021-05-19T00:00:00+09:00</updated><id>https://lahuman.github.io/20210519</id><content type="html" xml:base="https://lahuman.github.io/20210519/">&lt;h1 id=&quot;다르다는-것은-틀린-것이-아니다&quot;&gt;다르다는 것은 틀린 것이 아니다.&lt;/h1&gt;

&lt;p&gt;누군가와 불쾌한 경험을 하게 되면 이후 나의 행동은 2가지로 나뉘게 됩니다.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;회피 한다.&lt;/li&gt;
  &lt;li&gt;싸운다.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;가능하면 1번을 선택하고 있습니다. 
싸우고 살기엔 제 인생과 시간은 짧으니까요.
물론 상대방과 싸우기도 하는데,&lt;br /&gt;
싸워서 이기기 보다는 상대방이 나를 회피하게 만드는 것을 목적으로 싸우게 됩니다.
가장 좋은 방법은 서로 지켜야 할 선을 지키고, 예의를 가지고 행동하면 됩니다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;“매너가 사람을 만든다.” - 킹스맨&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;똥은-피해라&quot;&gt;똥은 피해라&lt;/h2&gt;</content><category term="단상" /><summary type="html">다른 관점이 존재한다는 것을 이해하고 받아들여야 한다.</summary></entry><entry><title type="html">성과라는 말의 의미</title><link href="https://lahuman.github.io/20210518/" rel="alternate" type="text/html" title="성과라는 말의 의미" /><published>2021-05-18T00:00:00+09:00</published><updated>2021-05-18T00:00:00+09:00</updated><id>https://lahuman.github.io/20210518</id><content type="html" xml:base="https://lahuman.github.io/20210518/">&lt;h1 id=&quot;성과가-좋다는-이야기를-많이-들었습니다-하지만&quot;&gt;성과가 좋다는 이야기를 많이 들었습니다. 하지만,&lt;/h1&gt;

&lt;p&gt;회사에서 성과가 좋다는 의미가 어떤 뜻일까요?&lt;/p&gt;

&lt;p&gt;해낸 일이 많다는 뜻일까요?&lt;/p&gt;

&lt;p&gt;연봉 상승율 높거나 또는 인센을 많이 준다는 뜻일까요?&lt;/p&gt;

&lt;p&gt;여러 의미를 가지고 있는 성과에 대한 거부감이 생겼습니다.&lt;/p&gt;

&lt;p&gt;그냥 일은 일이고, 일이 되게 하면 된다고 생각하고 있습니다.&lt;/p&gt;

&lt;p&gt;성과가 좋다는 이야기를 많이 듣다보니 주위 시선도 부담스럽게 변합니다.&lt;/p&gt;

&lt;p&gt;정작 제가 실제로 얻은 것은 없는데요.&lt;/p&gt;

&lt;p&gt;괜한 성과이야기로 마음도 몸도 불편해지는 날입니다.&lt;/p&gt;

&lt;h2 id=&quot;어려운-성과-이야기&quot;&gt;어려운 성과 이야기&lt;/h2&gt;</content><category term="단상" /><summary type="html">일이 이루어진 결과. 순화어는 `보람'.</summary></entry><entry><title type="html">Linux] find 명령어를 이용해서 5개가 넘는 디렉토리 중 1개만 지우기</title><link href="https://lahuman.github.io/linux_find_count_remove/" rel="alternate" type="text/html" title="Linux] find 명령어를 이용해서 5개가 넘는 디렉토리 중 1개만 지우기" /><published>2021-05-17T00:00:00+09:00</published><updated>2021-05-17T00:00:00+09:00</updated><id>https://lahuman.github.io/linux_find_count_remove</id><content type="html" xml:base="https://lahuman.github.io/linux_find_count_remove/">&lt;h1 id=&quot;linux-find-명령어를-이용해서-오래된-디렉토리-중-1개만-지우기&quot;&gt;Linux] find 명령어를 이용해서 오래된 디렉토리 중 1개만 지우기&lt;/h1&gt;

&lt;p&gt;오래된 디렉토리을 5개만 남겨놓고 지우고 싶을때 사용합니다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;if [[ $(find /build/${PRJ_NAME}_* -type d | wc -l) -gt 5 ]]
then
  find /build/${PRJ_NAME}_* -type d | head -n 1 | xargs rm -rf
fi
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;command로 넣어도 되고, shell script로 사용해도 됩니다. :)&lt;/p&gt;</content><category term="find" /><category term="linux" /><category term="command" /><summary type="html">디렉토리명에 날짜가 붙어서 정렬이 필요 없는 경우</summary></entry><entry><title type="html">couchDB –&amp;gt; logstash –&amp;gt; kafka</title><link href="https://lahuman.github.io/couchdb_logstash_kafka/" rel="alternate" type="text/html" title="couchDB --&gt; logstash --&gt; kafka" /><published>2021-05-17T00:00:00+09:00</published><updated>2021-05-17T00:00:00+09:00</updated><id>https://lahuman.github.io/couchdb_logstash_kafka</id><content type="html" xml:base="https://lahuman.github.io/couchdb_logstash_kafka/">&lt;h1 id=&quot;logstash가-모든-일을-다합니다&quot;&gt;logstash가 모든 일을 다합니다.&lt;/h1&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/post_img/couchdb_logstash_kafka.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;couchDB의 변경내역이 발생할 경우 kafka로 해당 데이터를 전송해야 하는 연계성 요청이 들어왔습니다.&lt;/p&gt;

&lt;p&gt;여러 가지 방안을 고민하였으나, 확장성과 유연성을 위해서 logstash를 선택하였습니다.&lt;/p&gt;

&lt;p&gt;실제로 가능한지 테스트 하기 위해서 개발 환경을 docker 기반으로 구성하여 테스트 했습니다.&lt;/p&gt;

&lt;h2 id=&quot;시작하기-전에&quot;&gt;시작하기 전에&lt;/h2&gt;

&lt;p&gt;docker 간의 통신을 위해서 docker network를 추가 합니다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;myHome&lt;/strong&gt; 이름으로 네트워크를 생성 합니다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ docker network create myHome
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;자세한 docker network 설명은 &lt;a href=&quot;https://www.daleseo.com/docker-networks/&quot;&gt;Docker 네트워크 사용법&lt;/a&gt;을 참조하셔요.&lt;/p&gt;

&lt;h2 id=&quot;couchdb-설정&quot;&gt;couchdb 설정&lt;/h2&gt;

&lt;p&gt;couchdb는 docker에서 bitnami 에서 제공하는 이미지로 생성하였습니다.&lt;/p&gt;

&lt;p&gt;다음 명령어로 image를 다운받고 실행합니다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ docker run --network myHome  -p 5984:5984 --name  couchdb bitnami/couchdb:latest
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;추후 테스트를 위해서 5984 port를 연결합니다.&lt;/p&gt;

&lt;p&gt;docker가 온전하게 기동되었다면, http://localhost:5984 에 접근하면 아래와 같은 내용을 확인 할 수 있습니다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;{
  &quot;couchdb&quot;: &quot;Welcome&quot;,
  &quot;version&quot;: &quot;3.1.1&quot;,
  &quot;git_sha&quot;: &quot;ce596c65d&quot;,
  &quot;uuid&quot;: &quot;b7449ad8eda14515e4e0782a84c41f5d&quot;,
  &quot;features&quot;: [
    &quot;access-ready&quot;,
    &quot;partitioned&quot;,
    &quot;pluggable-storage-engines&quot;,
    &quot;reshard&quot;,
    &quot;scheduler&quot;
  ],
  &quot;vendor&quot;: {
    &quot;name&quot;: &quot;The Apache Software Foundation&quot;
  }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;kafka-설정&quot;&gt;kafka 설정&lt;/h2&gt;

&lt;p&gt;kafka의 경우 기본적으로 zookeeper가 필요 하게 됩니다. 
이를 쉽게 처리 하기 위해서 docker-compose를 이용합니다.&lt;/p&gt;

&lt;p&gt;docker-compose.yml 파일을 생성합니다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;version: &quot;2&quot;

networks:
  default:
    external: true
    name: myHome

services:
  zookeeper:
    image: docker.io/bitnami/zookeeper:3
    ports:
      - &quot;2181:2181&quot;
    volumes:
      - &quot;zookeeper_data:/bitnami&quot;
    environment:
      - ALLOW_ANONYMOUS_LOGIN=yes
  kafka:
    image: docker.io/bitnami/kafka:2
    ports:
      - &quot;9092:9092&quot;
    volumes:
      - &quot;kafka_data:/bitnami&quot;
    environment:
      - KAFKA_CFG_ZOOKEEPER_CONNECT=zookeeper:2181
      - ALLOW_PLAINTEXT_LISTENER=yes
    depends_on:
      - zookeeper

volumes:
  zookeeper_data:
    driver: local
  kafka_data:
    driver: local
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;해당 파일의 생성이 완료 되었다면, 다음 명령어로 기동 합니다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ docker-compose up
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;기동이 문제 없이 되었다면 아래와 같은 로그가 확인 됩니다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;kafka_1      | [2021-05-17 03:39:13,937] INFO [GroupMetadataManager brokerId=1001] Finished loading offsets and group metadata from __consumer_offsets-48 in 103 milliseconds, of which 102 milliseconds was spent in the scheduler. (kafka.coordinator.group.GroupMetadataManager)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;logstash-설정&quot;&gt;logstash 설정&lt;/h2&gt;

&lt;p&gt;먼저 pipline 디렉토리를 생성한 후 &lt;strong&gt;logstash.conf&lt;/strong&gt; 파일을 생성합니다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ mkdir pipline
$ vi logstash.conf
# logstash.conf 파일 내용
input {
  couchdb_changes {
    id =&amp;gt; &quot;my_plugin_id&quot;
    host =&amp;gt; &quot;couchdb&quot;
    username =&amp;gt; &quot;admin&quot;
    password =&amp;gt; &quot;couchdb&quot;
    port =&amp;gt; &quot;5984&quot;
    db =&amp;gt; &quot;test&quot;
  }
}

output {
	stdout { codec =&amp;gt; &quot;rubydebug&quot; }

     kafka {
       codec =&amp;gt; &quot;json&quot;
       topic_id =&amp;gt; &quot;test_topic&quot;
       bootstrap_servers =&amp;gt; &quot;logstash_kafka_1:9092&quot;
     }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;주요 정보는 input과 output에 대한 정의 이며, 이후 db 종류가 많이 생기면, input에 추가 하면 됩니다.
kafka 나, couchdb의 host는 docker ps 정보에서 이름을 활용하면 됩니다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ docker ps
CONTAINER ID   IMAGE                                            COMMAND                  CREATED          STATUS          PORTS                                                                     NAMES
03bb311bf431   docker.elastic.co/logstash/logstash-oss:7.12.1   &quot;/usr/local/bin/dock…&quot;   50 seconds ago   Up 48 seconds   5044/tcp, 9600/tcp                                                        compassionate_yonath
28a0315d2422   bitnami/kafka:2                                  &quot;/opt/bitnami/script…&quot;   4 days ago       Up 4 minutes    0.0.0.0:9092-&amp;gt;9092/tcp, :::9092-&amp;gt;9092/tcp                                 logstash_kafka_1
fa1b5e62784b   bitnami/zookeeper:3                              &quot;/opt/bitnami/script…&quot;   4 days ago       Up 4 minutes    2888/tcp, 3888/tcp, 0.0.0.0:2181-&amp;gt;2181/tcp, :::2181-&amp;gt;2181/tcp, 8080/tcp   logstash_zookeeper_1
786c603b9ae2   bitnami/couchdb:latest                           &quot;/opt/bitnami/script…&quot;   4 days ago       Up 3 hours      4369/tcp, 9100/tcp, 0.0.0.0:5984-&amp;gt;5984/tcp, :::5984-&amp;gt;5984/tcp             couchdb
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;준비가 다 되었다면, pipeline 디렉토리 주소를 알맞게 설정후 다음 명령어로 docker 를 기동 합니다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ docker run --rm -it -v /Users/admin/DEV/test/logstash/pipeline/:/usr/share/logstash/pipeline/ --network myHome  docker.elastic.co/logstash/logstash-oss:7.12.1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;테스트&quot;&gt;테스트&lt;/h2&gt;

&lt;p&gt;couchdb의 utils를 이용해서 데이터를 적제 할 수 있습니다.&lt;/p&gt;

&lt;p&gt;접근 주소 : http://localhost:5984/_utils/&lt;/p&gt;

&lt;p&gt;해당 주소에 접근하여 &lt;strong&gt;test&lt;/strong&gt; database를 생성하고 documents를 생성합니다.&lt;/p&gt;

&lt;p&gt;데이터를 생성 하였으면, kafka에 제대로 적재 되었는지 확인해봅니다.&lt;/p&gt;

&lt;p&gt;docker exec 명령어를 이용해서 kafka 내부로 접근합니다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ docker exec -it  logstash_kafka_1 /bin/bash
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;첫번째로 topic의 목록을 조회 해봅니다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ kafka-topics.sh --list --bootstrap-server localhost:9092
__consumer_offsets
mytopic
test_topic
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;logstash를 이용하여 생성한 &lt;strong&gt;test_topic&lt;/strong&gt; 이 확인되었다면, 데이터도 console로 확인해봅니다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ kafka-console-consumer.sh --bootstrap-server localhost:9092 --topic test_topic --from-beginning
{&quot;@timestamp&quot;:&quot;2021-05-12T09:22:28.111Z&quot;,&quot;doc_as_upsert&quot;:true,&quot;doc&quot;:{&quot;test&quot;:&quot;test&quot;},&quot;@version&quot;:&quot;1&quot;}
{&quot;@timestamp&quot;:&quot;2021-05-17T00:35:33.135Z&quot;,&quot;doc_as_upsert&quot;:true,&quot;doc&quot;:{&quot;helo&quot;:&quot;kafka&quot;},&quot;@version&quot;:&quot;1&quot;}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;이로서 연동 테스트가 완료 되었습니다.&lt;/p&gt;

&lt;h2 id=&quot;참고-자료&quot;&gt;참고 자료&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.daleseo.com/docker-networks/&quot;&gt;Docker 네트워크 사용법&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/bitnami/bitnami-docker-couchdb&quot;&gt;bitnami-docker-couchdb&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://kimseunghyun76.tistory.com/463&quot;&gt;Kafka 한번 살펴보자… Quickstart&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="kafka" /><category term="logstash" /><category term="couchDB" /><summary type="html">변경 내역을 logstash를 통해서 kafka에 전송하기</summary></entry><entry><title type="html">말을 조심해야 합니다.</title><link href="https://lahuman.github.io/20210515/" rel="alternate" type="text/html" title="말을 조심해야 합니다." /><published>2021-05-15T00:00:00+09:00</published><updated>2021-05-15T00:00:00+09:00</updated><id>https://lahuman.github.io/20210515</id><content type="html" xml:base="https://lahuman.github.io/20210515/">&lt;h1 id=&quot;누군가를-믿고-이야기-하면-소문이-이미-나있다&quot;&gt;누군가를 믿고 이야기 하면… 소문이 이미 나있다.&lt;/h1&gt;

&lt;p&gt;세상에 비밀은 없다. 또 말 조심을 해야 한다.&lt;/p&gt;

&lt;p&gt;내 속마음을 누군가에게 털어 놓는다는 건 그 속마음이 다른 사람에게 퍼질 수 있다는 걸 다시 깨달았다.&lt;/p&gt;

&lt;p&gt;꼭 속마음을 이야기 해야 한다면, 부모님 또는 배우자에게만 털어 놓자.&lt;/p&gt;

&lt;h2 id=&quot;화가-나기-보다는-당황스럽다&quot;&gt;화가 나기 보다는 당황스럽다.&lt;/h2&gt;</content><category term="단상" /><summary type="html">발 없는 말이 천리 간다.</summary></entry><entry><title type="html">KOOFA 교육 후기</title><link href="https://lahuman.github.io/koofa/" rel="alternate" type="text/html" title="KOOFA 교육 후기" /><published>2021-05-14T00:00:00+09:00</published><updated>2021-05-14T00:00:00+09:00</updated><id>https://lahuman.github.io/koofa</id><content type="html" xml:base="https://lahuman.github.io/koofa/">&lt;h1 id=&quot;모든-의견은-동등하게-귀중하다&quot;&gt;모든 의견은 동등하게 귀중하다.&lt;/h1&gt;

&lt;p&gt;5/13 ~ 5/14 2일간 KOOFA에서 퍼실리테이터 교육을 받았습니다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;모든 의견은 동등하게 귀중하다&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;라는 그라운드 룰로 시작하는 교육입니다.&lt;/p&gt;

&lt;h2 id=&quot;퍼실리테이션&quot;&gt;퍼실리테이션&lt;/h2&gt;

&lt;p&gt;목적은 사람들은 그 자체로 고유하고 다양성을 지는 존재이므로 다양한 참여자가 함께 소통하여 시너지를 창출하여 합의를 이루어 나가도록 돕습니다.&lt;/p&gt;

&lt;p&gt;그러나, 소통의 과정 자체게 불완전하여 오해가 생기고 갈등이 초래될 수 있으므로, 질문을 통한 탐색과 기록 등을 통하여 소통을 증진 해야 합니다.&lt;/p&gt;

&lt;p&gt;이런 과정에서 중재자와 조율자 역활을 하는 퍼실리테이터가 필요 합니다.&lt;/p&gt;

&lt;h2 id=&quot;퍼실리테이터&quot;&gt;퍼실리테이터&lt;/h2&gt;

&lt;p&gt;퍼실리테이터가 가자야 하는 가장 중요한 덕목은 &lt;strong&gt;중립성&lt;/strong&gt; 입니다.&lt;/p&gt;

&lt;h3 id=&quot;퍼실리테이터가-가져야-하는-태도&quot;&gt;퍼실리테이터가 가져야 하는 태도&lt;/h3&gt;

&lt;p&gt;참여자들의 생각에 정답 또는 옳고/그름은 없다. 다만 각자 바라보는 다른 관점들이 있다.&lt;/p&gt;

&lt;p&gt;또한 속도 보다 중요한것은 &lt;strong&gt;방향&lt;/strong&gt; 이며, 회의의 &lt;strong&gt;목적&lt;/strong&gt;과 &lt;strong&gt;결과물&lt;/strong&gt;을 &lt;strong&gt;명확&lt;/strong&gt;히 해야 한다.&lt;/p&gt;

&lt;h3 id=&quot;퍼실리테이터-필요-역량&quot;&gt;퍼실리테이터 필요 역량&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;지식&lt;/li&gt;
  &lt;li&gt;태도&lt;/li&gt;
  &lt;li&gt;기술&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;이외에도 여러가지 기술과 Tool을 배우는 즐거운 시간이었습니다.&lt;/p&gt;
&lt;/blockquote&gt;</content><category term="koofa" /><category term="퍼실리테이터" /><summary type="html">구기욱 퍼실리테이터님에게 교육을 받은 후기입니다.</summary></entry></feed>

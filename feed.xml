<?xml version="1.0" encoding="utf-8"?><?xml-stylesheet type="text/xml" href="https://lahuman.github.io/feed.xslt.xml"?><feed xmlns="http://www.w3.org/2005/Atom"><generator uri="http://jekyllrb.com" version="3.8.4">Jekyll</generator><link href="https://lahuman.github.io/feed.xml" rel="self" type="application/atom+xml" /><link href="https://lahuman.github.io/" rel="alternate" type="text/html" /><updated>2021-01-23T22:05:20+09:00</updated><id>https://lahuman.github.io/</id><title type="html">lahuman</title><subtitle>열심히 사는 아저씨</subtitle><entry><title type="html">OBS 설정 &amp;amp; youtube 스트리밍 연결</title><link href="https://lahuman.github.io/OBS_setting/" rel="alternate" type="text/html" title="OBS 설정 &amp; youtube 스트리밍 연결" /><published>2021-01-23T00:00:00+09:00</published><updated>2021-01-23T00:00:00+09:00</updated><id>https://lahuman.github.io/OBS_setting</id><content type="html" xml:base="https://lahuman.github.io/OBS_setting/">&lt;h1 id=&quot;노트북에서-방송을-하기-위해서-사용하는-obs를-테스트-사용하여보기&quot;&gt;노트북에서 방송을 하기 위해서 사용하는 OBS를 테스트 사용하여보기&lt;/h1&gt;

&lt;p&gt;많은 사람들이 방송을 하고 있습니다. 
자신만의 컨텐츠를 만들고, 공유하고, 돈을 벌기도 하는데요.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;그래서 오늘은 OBS (Open Broadcaster Software) 라고 하는 방송 소프트웨어를 설정해보려고 합니다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;먼저 &lt;a href=&quot;https://obsproject.com/&quot;&gt;OBS 사이트&lt;/a&gt;로 이동합니다.&lt;/p&gt;

&lt;p&gt;그리고, 자신의 OS 버젼에 맞는 프로그램을 다운 받아 설치 합니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/post_img/obs_download.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;설정은 그냥 간단하게 &lt;code class=&quot;highlighter-rouge&quot;&gt;다음&lt;/code&gt;버튼을 누르면 됩니다.&lt;/p&gt;

&lt;p&gt;그러면, 방송 소스를 선택해야 하는데요.&lt;/p&gt;

&lt;p&gt;여기서 Youtube를 선택합니다.&lt;/p&gt;

&lt;p&gt;그리고 유투브에서 &lt;code class=&quot;highlighter-rouge&quot;&gt;만들기&lt;/code&gt;를 누르고, &lt;code class=&quot;highlighter-rouge&quot;&gt;실시간 스트리밍 시작&lt;/code&gt;을 선택한 다음,  &lt;code class=&quot;highlighter-rouge&quot;&gt;소프트웨어롤 통한 방송&lt;/code&gt;을 선택합니다.&lt;/p&gt;

&lt;p&gt;방송이 시작되면 스트리밍 키를 복사해서 OBS에 붙여 넣으면 준비가 끝입니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/post_img/youtube_stream_key.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;자, OBS 오른쪽 하단에 &lt;code class=&quot;highlighter-rouge&quot;&gt;방송 시작&lt;/code&gt; 버튼을 누르셔요.&lt;/p&gt;

&lt;p&gt;그러면 방송이 시작됩니다.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.digitaltrends.com/computing/how-to-live-stream-on-youtube-with-obs/&quot;&gt;How to livestream on YouTube with OBS&lt;/a&gt;를 보면 화면 캡쳐가 잘되어있어서 영어를 못해도 쉽게 따라 하실 수 있습니다.&lt;/p&gt;

&lt;p&gt;방송을 종료 후 Youtube에서도 방송을 종료 하여야 합니다.&lt;/p&gt;

&lt;h2 id=&quot;참고-자료&quot;&gt;참고 자료&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.digitaltrends.com/computing/how-to-live-stream-on-youtube-with-obs/&quot;&gt;How to livestream on YouTube with OBS&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="단상" /><summary type="html">OBS 설정 &amp; youtube 방송 하기</summary></entry><entry><title type="html">Workplace Export</title><link href="https://lahuman.github.io/workplace_export/" rel="alternate" type="text/html" title="Workplace Export" /><published>2021-01-22T00:00:00+09:00</published><updated>2021-01-22T00:00:00+09:00</updated><id>https://lahuman.github.io/workplace_export</id><content type="html" xml:base="https://lahuman.github.io/workplace_export/">&lt;h1 id=&quot;workplace-export&quot;&gt;&lt;a href=&quot;https://github.com/lahuman/workplace_export&quot;&gt;Workplace Export&lt;/a&gt;&lt;/h1&gt;

&lt;blockquote&gt;
  &lt;p&gt;워크플레이스의 관리자 패널에서는 특정 Group의 게시글을 export를 제공하지 않습니다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;이 프로젝트는 Workplace의 특정 Group의 게시글을 다운 받는 기능을 제공합니다.
한번에 다운받을 게시글의 수는 .env에서 변경이 가능합니다. 너무 큰 숫자의 경우 Workplace 서버에서 오류가 발생할 수 있습니다.
(권장: 100, 최대 : 500, 테스트에서는 1000도 가능하였으나, 오류가 간간히 발생했습니다.)
workplace 게시글 + 댓글을 xlsx 형식으로 다운로드 합니다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Screen&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;h4 id=&quot;그룹-정보-조회&quot;&gt;그룹 정보 조회&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;그룹 ID를 기준으로 그룹 정보가 표기&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://github.com/lahuman/workplace_export/raw/main/workplace_export.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;1번째-이후-게시글-다운로드-시&quot;&gt;1번째 이후 게시글 다운로드 시&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;게시글 다운로드 &lt;strong&gt;다음&lt;/strong&gt; 으로 UI 변경&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://github.com/lahuman/workplace_export/raw/main/workplace_export2.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;모든-게시글-다운로드-시&quot;&gt;모든 게시글 다운로드 시&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;알림 표기&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://github.com/lahuman/workplace_export/raw/main/export_finish.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;잘못된-그룹-id-입력시&quot;&gt;잘못된 그룹 ID 입력시&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;https://github.com/lahuman/workplace_export/raw/main/wrong_group_id.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;결과-예제&quot;&gt;결과 예제&lt;/h4&gt;

&lt;p&gt;&lt;a href=&quot;https://raw.githubusercontent.com/lahuman/workplace_export/main/322853118694054_1.xlsx&quot; download=&quot;&quot;&gt;Export Example&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;table-of-contents&quot;&gt;Table of Contents&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;설치 &amp;amp; 설정 &amp;amp; 정보&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;#Installation&quot;&gt;Installation&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#Workplace&quot;&gt;Workplace&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#History&quot;&gt;History&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#License&quot;&gt;License&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;installation&quot;&gt;Installation&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;설치를 위해서는 기본적으로 NODEJS 14.x 이상의 버젼이 필요합니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;backend&quot;&gt;Backend&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://nestjs.com/&quot;&gt;nestjs&lt;/a&gt; 기반으로 작성되었습니다.&lt;/li&gt;
  &lt;li&gt;PATH : &lt;strong&gt;backend&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;.env 설정은 _env 파일을 .env로 변경하여서 Key에 알맞은 값을 설정 하면 됩니다.
또는 아래 샘플을 이용하셔요.
WP_TOKEN는 workplace 관리자 화면에서 생성한 맞춤 통합의 토큰 값입니다
해당 통합은 게시물, 댓글 사용자의 정보를 조회하는 권한을 주어야 합니다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;NODE_ENV=deployment
PORT=3000
WP_GRAPH_URL=https://graph.facebook.com
WP_TOKEN= # workplace Token 발급 필요
DEFAULT_LIMIT=100
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;실행&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ npm install
$ npm run start
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;서버가 문제 없이 기동이 되면 &lt;a href=&quot;http://localhost:3000/docs&quot;&gt;Swagger UI&lt;/a&gt;을 확인하세요.&lt;/p&gt;

&lt;h3 id=&quot;frontend&quot;&gt;Frontend&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://reactjs.org/&quot;&gt;ReactJS&lt;/a&gt;로 작성되어 있습니다.&lt;/li&gt;
  &lt;li&gt;PATH : &lt;strong&gt;frontend&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;.env 설정은 _env 파일을 .env로 변경하여서 Key에 알맞은 값을 설정 하면 됩니다.
또는 아래 샘플을 이용하셔요.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;REACT_APP_API=http://localhost:8080 # API SERVER 주소 
REACT_APP_WORKPLACE=https://{domain}.workplace.com # workplace 주소
REACT_APP_LIMIT=100 # 게시글 다운수 (backend와 같은 수 화면 표기용)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;실행&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ npm install
# npm run start
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;workplace&quot;&gt;&lt;a href=&quot;https://work.workplace.com/&quot;&gt;Workplace&lt;/a&gt;&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;a href=&quot;https://work.workplace.com/&quot;&gt;Workplace&lt;/a&gt;은 페이스북에서 개발한 엔터프라이즈 연결 플랫폼입니다. 
그룹 사용, 인스턴스 메시징 및 뉴스 피드를 포함합니다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;게시물의 반응을 확인하기 위해서 관리자 페이지에서 맞춤 통합을 생성해야 합니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://github.com/lahuman/wp-reaction/raw/master/wp_admin_panel.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;통합 생성후 다음 3개의 통합 권한(그룹 콘텐츠 읽기(필수), 사용자 이메일 읽기(옵션), 그룹 멤버 읽기(옵션))을 할당해야 합니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://github.com/lahuman/wp-reaction/raw/master/wp_admin_auth.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;history&quot;&gt;History&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;v1.0 : workplace Export&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;license&quot;&gt;License&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;http://badges.mit-license.org&quot;&gt;&lt;img src=&quot;http://img.shields.io/:license-mit-blue.svg?style=flat-square&quot; alt=&quot;License&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;&lt;a href=&quot;http://opensource.org/licenses/mit-license.php&quot;&gt;MIT license&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;Copyright 2020 © &lt;a href=&quot;https://lahuman.github.io&quot; target=&quot;_blank&quot;&gt;lahuman&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;</content><category term="workplace" /><category term="export" /><category term="xlsx" /><summary type="html">워크 플레이스의 게시글을 Exprot 하는 프로젝트입니다.</summary></entry><entry><title type="html">ReactJS에서 JSON 데이터를 xlsx로 다운로드 하기</title><link href="https://lahuman.github.io/frontend_xlsx_filesaver/" rel="alternate" type="text/html" title="ReactJS에서 JSON 데이터를 xlsx로 다운로드 하기" /><published>2021-01-22T00:00:00+09:00</published><updated>2021-01-22T00:00:00+09:00</updated><id>https://lahuman.github.io/frontend_xlsx_filesaver</id><content type="html" xml:base="https://lahuman.github.io/frontend_xlsx_filesaver/">&lt;h1 id=&quot;json-데이터를-xlxs-형식으로-다운로드-하기-by-reactjs&quot;&gt;JSON 데이터를 xlxs 형식으로 다운로드 하기 by ReactJS&lt;/h1&gt;

&lt;blockquote&gt;
  &lt;p&gt;일반적으로 json 데이터를 xlsx로 서버단에서 변환하고 response로 쏘아서 다운로드를 하고 있습니다.
ReactJS를 사용하면서, 화면내에 있는 데이터를 xlsx로 다운로드 하고 싶어서 찾아보니, &lt;a href=&quot;https://www.npmjs.com/package/file-saver&quot;&gt;file-saver&lt;/a&gt;라는 모듈이 있네요.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;jons을 XLSX형식으로 변환하는 모듈은 &lt;a href=&quot;https://www.npmjs.com/package/xlsx&quot;&gt;xlsx&lt;/a&gt;을 사용하였습니다.&lt;/p&gt;

&lt;h2 id=&quot;예제&quot;&gt;예제&lt;/h2&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;#index.jsx
import &quot;./styles.css&quot;;
import { saveAs } from &quot;file-saver&quot;;
import * as XLSX from 'xlsx';

export default function App() {
  const fileType =
    &quot;application/vnd.openxmlformats-officedocument.spreadsheetml.sheet;charset=UTF-8&quot;;
  const fileExtension = &quot;.xlsx&quot;;
  const ws = XLSX.utils.json_to_sheet([
    {
      id: 1,
      name: &quot;Daniel&quot;,
      age: &quot;20&quot;,
      sex: &quot;M&quot;
    },
    {
      id: 2,
      name: &quot;Kim&quot;,
      age: &quot;30&quot;,
      sex: &quot;M&quot;
    },
    {
      id: 3,
      name: &quot;Lee&quot;,
      age: &quot;33&quot;,
      sex: &quot;M&quot;
    },
    {
      id: 4,
      name: &quot;Min&quot;,
      age: &quot;50&quot;,
      sex: &quot;F&quot;
    },
    {
      id: 5,
      name: &quot;Yun&quot;,
      age: &quot;20&quot;,
      sex: &quot;F&quot;
    }
  ]);

  const fileDownload = () =&amp;gt; {
    const wb = { Sheets: { data: ws }, SheetNames: [&quot;data&quot;] };
    const excelBuffer = XLSX.write(wb, { bookType: &quot;xlsx&quot;, type: &quot;array&quot; });
    const data = new Blob([excelBuffer], { type: fileType });
    saveAs(data, `file${fileExtension}`);
  };

  return (
    &amp;lt;div className=&quot;App&quot;&amp;gt;
      &amp;lt;h1&amp;gt;JSON to XLSX&amp;lt;/h1&amp;gt;
      &amp;lt;button onClick={fileDownload}&amp;gt;FILE DONWLOAD&amp;lt;/button&amp;gt;
    &amp;lt;/div&amp;gt;
  );
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;a href=&quot;https://codesandbox.io/s/json2xlsx-download-ny0kt?file=/src/App.js:0-1120&quot;&gt;예제 바로가기&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;이전에는 더 복잡하게 처리 했었는데, &lt;a href=&quot;https://www.npmjs.com/package/file-saver&quot;&gt;file-saver&lt;/a&gt;를 사용하면 쉽게 frontend에서도 다운로드 구현이 가능합니다.&lt;/p&gt;

&lt;h2 id=&quot;참고-자료&quot;&gt;참고 자료&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.npmjs.com/package/xlsx&quot;&gt;xlsx&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.npmjs.com/package/file-saver&quot;&gt;file-saver&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="json" /><category term="xlsx" /><category term="download" /><summary type="html">Frontend에서 xlsx 다운로드 모듈을 사용한 예제입니다.</summary></entry><entry><title type="html">hp-15s-eq1156au 노트북 리뷰</title><link href="https://lahuman.github.io/20210121/" rel="alternate" type="text/html" title="hp-15s-eq1156au 노트북 리뷰" /><published>2021-01-21T00:00:00+09:00</published><updated>2021-01-21T00:00:00+09:00</updated><id>https://lahuman.github.io/20210121</id><content type="html" xml:base="https://lahuman.github.io/20210121/">&lt;h1 id=&quot;구매는-2020년-11월-11일에-했고-1월-20일에-제품을-받았습니다&quot;&gt;구매는 2020년 11월 11일에 했고, 1월 20일에 제품을 받았습니다.&lt;/h1&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/post_img/hp-15s-eq1156au.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;구매 당시 금액은 11절 이벤트로 54만원에 구매했었습니다.
현재는 판매 종료이고 가격도 60만원 초반입니다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;구매 링크 : http://www.11st.co.kr/products/3149672026&lt;/p&gt;

&lt;h2 id=&quot;장점&quot;&gt;장점&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;윈도우 10이 포함 되어 있음&lt;/li&gt;
  &lt;li&gt;기본 8G 메모리 제공 + 메모리 슬롯 여분 1개
    &lt;ul&gt;
      &lt;li&gt;2666HZ이라고 했는데, 실제로는 3200HZ 삼성 메모리가 장착 되어 있었음&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;HP 서비스 센터 이용가능(as시 - 컴알못에겐 나쁘지 않은 선택지)&lt;/li&gt;
  &lt;li&gt;숫자 키보드 제공(이건 사람마다 호불호 갈림)&lt;/li&gt;
  &lt;li&gt;사운드가 크고 괜찮음&lt;/li&gt;
  &lt;li&gt;갓성비를 자랑함(54만원으로 구매시)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;단점&quot;&gt;단점&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;키보드 울림 있음(09POILKJ,M - 요 키를 좀 쎄게 누르면 울렁됨)&lt;/li&gt;
  &lt;li&gt;이동키 좌우 / 위아래 비대칭&lt;/li&gt;
  &lt;li&gt;메모리 증설이 어려움(뚜껑 열기 어려움)
    &lt;ul&gt;
      &lt;li&gt;개인이 하다가 실패한 기스 내고 안쪽 걸쇠를 깨먹은 사람이 있음&lt;/li&gt;
      &lt;li&gt;HP 서비스 센터 이용시 36,300원 공임비 필요&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;제품 설명서에는 지문 인식이 있는데, 실제로 없음(설명서 보고 좋다가 말았음)&lt;/li&gt;
  &lt;li&gt;초기 윈도우 업데이트시 소리 안나는 문제 있음
    &lt;ul&gt;
      &lt;li&gt;윈도우 초기화 진행으로 해결 가능&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;총평&quot;&gt;총평&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;키보드 울림이 가장 마음에 안들지만, 가격이 모든 것을 용서한다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;10점-만점에-8점-박습니다&quot;&gt;10점 만점에 8점 박습니다!&lt;/h2&gt;</content><category term="단상" /><summary type="html">내돈 내산 노트북 리뷰</summary></entry><entry><title type="html">쿠버네티스를 AWS에 구축할 예정입니다.</title><link href="https://lahuman.github.io/20210120/" rel="alternate" type="text/html" title="쿠버네티스를 AWS에 구축할 예정입니다." /><published>2021-01-20T00:00:00+09:00</published><updated>2021-01-20T00:00:00+09:00</updated><id>https://lahuman.github.io/20210120</id><content type="html" xml:base="https://lahuman.github.io/20210120/">&lt;h1 id=&quot;aws에서-제공하는-쿠버네티스saas-형태는-비용이-좀-높았습니다&quot;&gt;AWS에서 제공하는 쿠버네티스(SaaS 형태)는 비용이 좀 높았습니다.&lt;/h1&gt;

&lt;p&gt;그래서, EC2 서버 기반으로 쿠버네티스를 구축하려고 합니다.&lt;/p&gt;

&lt;p&gt;대충, k8s -&amp;gt; helm -&amp;gt; harbor -&amp;gt; jenkins -&amp;gt; git -&amp;gt; argo cd 형식으로 구축하려고 하는데,&lt;/p&gt;

&lt;p&gt;여러 사례를 검색해보고 찾아봐야겠습니다.&lt;/p&gt;

&lt;h2 id=&quot;공부하자&quot;&gt;공부하자!&lt;/h2&gt;</content><category term="단상" /><summary type="html">이전에 PC 3대에 구축했던 것을 좀 더 단단하게 구축 예정</summary></entry><entry><title type="html">md5-lite 모듈 제작</title><link href="https://lahuman.github.io/md5-lite/" rel="alternate" type="text/html" title="md5-lite 모듈 제작" /><published>2021-01-18T00:00:00+09:00</published><updated>2021-01-18T00:00:00+09:00</updated><id>https://lahuman.github.io/md5-lite</id><content type="html" xml:base="https://lahuman.github.io/md5-lite/">&lt;h1 id=&quot;md5-lite&quot;&gt;&lt;a href=&quot;https://www.npmjs.com/package/md5-lite&quot;&gt;md5-lite&lt;/a&gt;&lt;/h1&gt;

&lt;h2 id=&quot;프로젝트-바로가기&quot;&gt;&lt;a href=&quot;https://github.com/lahuman/md5-lite&quot;&gt;프로젝트 바로가기&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;파일을 청크(Chunk) 사이즈 처리를 해서 성능 향상을 목적으로 만들어진 모듈입니다.
파일 크기가 200000byte(0.2MB) 이상일 경우 초기 100000byte (0.1MB)와 마지막 100000byte을 이용하여 md5 hash 처리 합니다.
그보다 크기가 작을 경우 전체 데이터의 전체를 md5 hash 처리 합니다.&lt;/p&gt;

&lt;p&gt;사용법은 다음과 같습니다.&lt;/p&gt;

&lt;h2 id=&quot;installation&quot;&gt;Installation&lt;/h2&gt;
&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;npm &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;md5-lite &lt;span class=&quot;nt&quot;&gt;--save&lt;/span&gt;
yarn add md5-lite
bower &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;md5-lite &lt;span class=&quot;nt&quot;&gt;--save&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h2 id=&quot;usage&quot;&gt;Usage&lt;/h2&gt;

&lt;h3 id=&quot;javascript&quot;&gt;Javascript&lt;/h3&gt;
&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;md5Lite&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'md5-lite'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;md5Lite&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'./filepath'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;0486c21a4d40d0f3b0bdad3925db439e
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;typescript&quot;&gt;TypeScript&lt;/h3&gt;
&lt;div class=&quot;language-typescript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;md5Lite&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'md5-lite'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;md5Lite&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'./filepath'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;0486c21a4d40d0f3b0bdad3925db439e
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;license&quot;&gt;License&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;http://badges.mit-license.org&quot;&gt;&lt;img src=&quot;http://img.shields.io/:license-mit-blue.svg?style=flat-square&quot; alt=&quot;License&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;&lt;a href=&quot;http://opensource.org/licenses/mit-license.php&quot;&gt;MIT license&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;Copyright 2020 © &lt;a href=&quot;https://lahuman.github.io&quot; target=&quot;_blank&quot;&gt;lahuman&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;</content><category term="duplication" /><category term="file" /><category term="md5" /><summary type="html">중복 파일 검색에서 나온 아이디어를 npm 모듈로 제작해서 배포해보았다.</summary></entry><entry><title type="html">라즈베리파이에 ubuntu에 k3S 설치 하기</title><link href="https://lahuman.github.io/raspberrypi_ubuntu_k3s/" rel="alternate" type="text/html" title="라즈베리파이에 ubuntu에 k3S 설치 하기" /><published>2021-01-16T00:00:00+09:00</published><updated>2021-01-16T00:00:00+09:00</updated><id>https://lahuman.github.io/raspberrypi_ubuntu_k3s</id><content type="html" xml:base="https://lahuman.github.io/raspberrypi_ubuntu_k3s/">&lt;h1 id=&quot;라즈베리파이에-ubuntu에-k3s-설치-하기&quot;&gt;라즈베리파이에 ubuntu에 k3S 설치 하기&lt;/h1&gt;

&lt;blockquote&gt;
  &lt;p&gt;이 글을 읽기 전에 &lt;a href=&quot;https://lahuman.github.io/raspberrypi_k3s/&quot;&gt;라즈베리파이에 k3s 설치 하기 - 실패기&lt;/a&gt; 와 &lt;a href=&quot;https://lahuman.github.io/raspberrypi_ubuntu/&quot;&gt;라즈베리파이에 ubuntu 설치 하기&lt;/a&gt; 를 읽어 보시기를 추천 드립니다.
또한 &lt;a href=&quot;https://lahuman.github.io/raspberrypi_ubuntu/&quot;&gt;라즈베리파이에 ubuntu 설치 하기&lt;/a&gt;의 설정 이후 진행 하셔야 합니다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;hostsname-설정하기&quot;&gt;hostsname 설정하기&lt;/h2&gt;

&lt;p&gt;저는 2대의 라즈베리 파이를 가지고 main(라즈베리4)과 node1(라즈베리3+)으로 구성을 하려고 합니다.
먼저 구분을 하기 위해서 사용하려는 라즈베리파이의 hostname을 변경합니다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo vi /etc/hosts

# mian / node1 으로 수정
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;그리고 다른 모듈에서 hostsname을 변경하지 못하도록 &lt;code class=&quot;highlighter-rouge&quot;&gt;/etc/cloud/cloud.cfg&lt;/code&gt; 파일의 &lt;code class=&quot;highlighter-rouge&quot;&gt;preserve_hostname&lt;/code&gt; 옵션을 &lt;code class=&quot;highlighter-rouge&quot;&gt;true&lt;/code&gt;로 변경합니다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# The top level settings are used as module
# and system configuration.

# A set of users which may be applied and/or used by various modules
# when a 'default' entry is found it will reference the 'default_user'
# from the distro configuration specified below
users:
   - default

# If this is set, 'root' will not be able to ssh in and they
# will get a message to login instead as the default $user
disable_root: true

# This will cause the set+update hostname module to not operate (if true)
# 여기를 true로 변경
preserve_hostname: true
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;linux-컨테이너-기능-활성화&quot;&gt;Linux 컨테이너 기능 활성화&lt;/h2&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;/boot/firmware/cmdline.txt&lt;/code&gt; 파일의 마지막에 라인에 &lt;code class=&quot;highlighter-rouge&quot;&gt;cgroup_enable=cpuset cgroup_memory=1 cgroup_enable=memory&lt;/code&gt; 을 이어서 작성합니다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo vi /boot/firmware/cmdline.txt

# 라인 마지막에 추가 처리 
net.ifnames=0 dwc_otg.lpm_enable=0 console=serial0,115200 console=tty1 root=LABEL=writable rootfstype=ext4 elevator=deadline rootwait fixrtc cgroup_enable=cpuset cgroup_memory=1 cgroup_enable=memory
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;그리고 재부팅을 해야 합니다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo reboot
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;docker-설치&quot;&gt;docker 설치&lt;/h2&gt;

&lt;p&gt;k3s 설치 이전에 docker를 설치 합니다.
docker 설치와 활성화는 다음의 명령어로 쉽게 할 수 있습니다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# docker 설치
sudo apt install docker.io 

# docker 서비스 시작
sudo systemctl start docker

# 부팅시 docker 서비스 시작
sudo systemctl enable docker
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;k3s-설치&quot;&gt;k3s 설치&lt;/h2&gt;

&lt;p&gt;k3s 설치도 다음 스크립트로 쉽게 설치 할 수 있습니다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# 설치 스크립트
curl -sfL https://get.k3s.io | sh -s - --docker

# 서비스 확인
sudo systemctl status k3s
● k3s.service - Lightweight Kubernetes
     Loaded: loaded (/etc/systemd/system/k3s.service; enabled; vendor preset: enabled)
     Active: active (running) since Sat 2021-01-16 13:26:34 UTC; 14min ago
       Docs: https://k3s.io
    Process: 1697 ExecStartPre=/sbin/modprobe br_netfilter (code=exited, status=0/SUCCESS)
    Process: 1733 ExecStartPre=/sbin/modprobe overlay (code=exited, status=0/SUCCESS)
   Main PID: 1734 (k3s-server)
      Tasks: 29
     Memory: 571.3M
     CGroup: /system.slice/k3s.service
             └─1734 /usr/local/bin/k3s server

Jan 16 13:36:39 main k3s[1734]: W0116 13:36:39.184245    1734 machine.go:253] Cannot determine CPU /sys/bus/cpu/devices&amp;gt;
Jan 16 13:36:39 main k3s[1734]: W0116 13:36:39.184308    1734 machine.go:253] Cannot determine CPU /sys/bus/cpu/devices&amp;gt;
Jan 16 13:36:39 main k3s[1734]: W0116 13:36:39.184360    1734 machine.go:253] Cannot determine CPU /sys/bus/cpu/devices&amp;gt;
Jan 16 13:36:39 main k3s[1734]: W0116 13:36:39.184412    1734 machine.go:253] Cannot determine CPU /sys/bus/cpu/devices&amp;gt;
Jan 16 13:36:39 main k3s[1734]: E0116 13:36:39.184432    1734 machine.go:72] Cannot read number of physical cores corre&amp;gt;
Jan 16 13:36:39 main k3s[1734]: W0116 13:36:39.184669    1734 machine.go:253] Cannot determine CPU /sys/bus/cpu/devices&amp;gt;
Jan 16 13:36:39 main k3s[1734]: W0116 13:36:39.184720    1734 machine.go:253] Cannot determine CPU /sys/bus/cpu/devices&amp;gt;
Jan 16 13:36:39 main k3s[1734]: W0116 13:36:39.184768    1734 machine.go:253] Cannot determine CPU /sys/bus/cpu/devices&amp;gt;
Jan 16 13:36:39 main k3s[1734]: W0116 13:36:39.184816    1734 machine.go:253] Cannot determine CPU /sys/bus/cpu/devices&amp;gt;
Jan 16 13:36:39 main k3s[1734]: E0116 13:36:39.184836    1734 machine.go:86] Cannot read number of sockets correctly, n&amp;gt;
lines 1-22/22 (END)

# k3s node 상태 확인
sudo kubectl get ndoes
sudo kubectl get nodes
NAME    STATUS     ROLES                  AGE   VERSION
main    Ready      control-plane,master   24h   v1.20.0+k3s2
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;방화벽-비활성화&quot;&gt;방화벽 비활성화&lt;/h2&gt;

&lt;p&gt;이제 main node의 설정이 끝났습니다.&lt;/p&gt;

&lt;p&gt;worker node와 통신을 위해서 방화벽을 내려둡니다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# 방화벽 비활성화
sudo ufw disable
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;“축하합니다!” 여기까지 진행이 되었다면, main node의 설치가 완료 한 것입니다. 이제 worker node 설치를 진행합니다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;woker node를 설치하기 위해서는 main node의 token이 필요 합니다.&lt;/p&gt;

&lt;p&gt;token은 다음의 명령어로 확인이 가능합니다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo cat /var/lib/rancher/k3s/server/node-token
K10db4cc46dfccb627942c905744dce8ee3099f1153d85c741f21b8c9420febc9db::server:58054e0acd0a3508bc4381e43e74b2ef
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;worker-node-설치-하기&quot;&gt;worker node 설치 하기&lt;/h2&gt;

&lt;p&gt;우선 main node에서 진행했던, &lt;code class=&quot;highlighter-rouge&quot;&gt;linux 컨테이너 활성화&lt;/code&gt;와 &lt;code class=&quot;highlighter-rouge&quot;&gt;docker&lt;/code&gt;를 설치해줍니다. 그리고 &lt;code class=&quot;highlighter-rouge&quot;&gt;방화벽 비활성화&lt;/code&gt;처리 합니다.&lt;/p&gt;

&lt;p&gt;위의 단계가 끝났다면, worker node를 다음의 명령어로 설치합니다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# curl -sfL http://get.k3s.io | K3S_URL=https://&amp;lt;master_IP&amp;gt;:6443 K3S_TOKEN=&amp;lt;join_token&amp;gt; sh -s - --docker
curl -sfL http://get.k3s.io | K3S_URL=https://192.168.0.30:6443 K3S_TOKEN=K10db4cc46dfccb627942c905744dce8ee3099f1153d85c741f21b8c9420febc9db::server:58054e0acd0a3508bc4381e43e74b2ef sh -s - --docker
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;설치가 완료되었다면, 다음 명령어로 상태를 확인하세요.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo systemctl status k3s-agent
● k3s-agent.service - Lightweight Kubernetes
     Loaded: loaded (/etc/systemd/system/k3s-agent.service; enabled; vendor preset: enabled)
     Active: active (running) since Fri 2021-01-15 13:35:53 UTC; 24h ago
       Docs: https://k3s.io
    Process: 1674 ExecStartPre=/sbin/modprobe br_netfilter (code=exited, status=0/SUCCESS)
    Process: 1706 ExecStartPre=/sbin/modprobe overlay (code=exited, status=0/SUCCESS)
   Main PID: 1707 (k3s-agent)
      Tasks: 16
     Memory: 143.6M
     CGroup: /system.slice/k3s-agent.service
             └─1707 /usr/local/bin/k3s agent

Jan 16 13:54:00 node1 k3s[1707]: I0116 13:54:00.243366    1707 policy_none.go:43] [cpumanager] none policy: Start
Jan 16 13:54:00 node1 k3s[1707]: E0116 13:54:00.265387    1707 kubelet.go:1823] skipping pod synchronization - containe&amp;gt;
Jan 16 13:54:00 node1 k3s[1707]: W0116 13:54:00.322546    1707 manager.go:594] Failed to retrieve checkpoint for &quot;kubel&amp;gt;
Jan 16 13:54:00 node1 k3s[1707]: I0116 13:54:00.340881    1707 plugin_manager.go:114] Starting Kubelet Plugin Manager
Jan 16 13:54:01 node1 k3s[1707]: I0116 13:54:01.066655    1707 topology_manager.go:187] [topologymanager] Topology Admi&amp;gt;
Jan 16 13:54:01 node1 k3s[1707]: W0116 13:54:01.067797    1707 pod_container_deletor.go:79] Container &quot;3d18023da3813e1c&amp;gt;
Jan 16 13:54:01 node1 k3s[1707]: I0116 13:54:01.253297    1707 reconciler.go:224] operationExecutor.VerifyControllerAtt&amp;gt;
Jan 16 13:54:01 node1 k3s[1707]: I0116 13:54:01.253506    1707 reconciler.go:157] Reconciler: start to sync state
Jan 16 13:54:01 node1 k3s[1707]: W0116 13:54:01.718236    1707 cni.go:333] CNI failed to retrieve network namespace pat&amp;gt;
Jan 16 13:54:04 node1 k3s[1707]: W0116 13:54:04.529789    1707 pod_container_deletor.go:79] Container &quot;5124f74a4a45f4e
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;main node에서 worker node가 연결되었는지 확인합니다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# node1 이 연결되어 있는 것을 확인합니다.
sudo kubectl get nodes
NAME    STATUS   ROLES                  AGE   VERSION
node1   Ready    &amp;lt;none&amp;gt;                 24h   v1.20.0+k3s2
main    Ready    control-plane,master   24h   v1.20.0+k3s2
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;서비스-올려-보기&quot;&gt;서비스 올려 보기&lt;/h2&gt;

&lt;p&gt;먼저 서비스 yaml 파일을 생성합니다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# k3s-demo.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: k3s-demo
  namespace: default
spec:
  replicas: 1
  selector:
    matchLabels:
      app: k3s-demo
  template:
    metadata:
      labels:
        app: k3s-demo
    spec:
      containers:
      - name: k3s-demo
        image: ruanbekker/rpi-hostname:latest
---
apiVersion: v1
kind: Service
metadata:
  name: k3s-demo
  namespace: default
spec:
  ports:
  - name: http
    targetPort: 8000
    port: 80
  selector:
    app: k3s-demo
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: k3s-demo
  annotations:
    kubernetes.io/ingress.class: &quot;traefik&quot;

spec:
  rules:
  - host: k3s-demo.192.168.0.30.xip.io
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service: 
            name: k3s-demo
            port: 
              number: 80
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;k3s-demo.192.168.0.30.xip.io&lt;/code&gt;에서 사용한 xip.io는 서브 도메인에 설정된 IP로 루프백 해주는 서비스입니다.
도메인기반으로 동작하는 Ingress에서 활용하면 하나의 서비스에 여러 서브 도메인을 테스트 할때 좋습니다.
&lt;code class=&quot;highlighter-rouge&quot;&gt;k3s-demo.192.168.0.30.xip.io&lt;/code&gt; 을 호출하면 192.168.0.30으로 전달합니다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# 서비스 배포
sudo kubectl apply -f k3s-demo.yaml

# 배포된 서비스 확인 (웹 브라우저에서도 확인이 가능합니다.)
curl http://k3s-demo.192.168.0.30.xip.io/
Hostname: k3s-demo-65c8cf57c-2s2tr
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;여기까지-k3s-설치를-마칩니다&quot;&gt;여기까지 k3s 설치를 마칩니다.&lt;/h2&gt;

&lt;h2 id=&quot;참고자료&quot;&gt;참고자료&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://medium.com/@amadmalik/installing-kubernetes-on-raspberry-pi-k3s-and-docker-on-ubuntu-20-04-ef51e5e56&quot;&gt;Installing Kubernetes on Raspberry Pi, K3s and Docker on Ubuntu 20.04&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://sysadmins.co.za/develop-build-and-deploy-a-golang-app-to-k3s/&quot;&gt;Develop Build and Deploy a Golang App to K3S&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="raspberrypi" /><category term="ubuntu" /><category term="k3s" /><summary type="html">'라즈베리파이에 ubuntu 설치하기'에 이어서 진행됩니다.</summary></entry><entry><title type="html">라즈베리파이에 ubuntu 설치 하기</title><link href="https://lahuman.github.io/raspberrypi_ubuntu/" rel="alternate" type="text/html" title="라즈베리파이에 ubuntu 설치 하기" /><published>2021-01-15T00:00:00+09:00</published><updated>2021-01-15T00:00:00+09:00</updated><id>https://lahuman.github.io/raspberrypi_ubuntu</id><content type="html" xml:base="https://lahuman.github.io/raspberrypi_ubuntu/">&lt;h1 id=&quot;라즈베리파이에-ubuntu-설치하기&quot;&gt;라즈베리파이에 ubuntu 설치하기&lt;/h1&gt;

&lt;h2 id=&quot;ubuntu-2004-다운로드&quot;&gt;Ubuntu 20.04 다운로드&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://ubuntu.com/download/raspberry-pi&quot;&gt;Install Ubuntu on a Raspberry Pi 2, 3 or 4&lt;/a&gt;에서 본인의 라즈베리파이에 맞는 이미지를 다운로드 받습니다.&lt;/p&gt;

&lt;p&gt;제 경우는 라즈베리파이 3+ 와 4를 가지고 있어서, Ubuntu Server 20.04.1 LTS 64bit로 다운받았습니다.&lt;/p&gt;

&lt;p&gt;이전 포스트와 마찬가지오 SD카드에 다운 받은 이미지를 굽습니다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;초기 아이디 / 비밀번호는 ubuntu / ubuntu 를 입력하면 됩니다. 설정 후 해당 계정을 삭제 하시는 것을 추천 드려요.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;wifi-연결&quot;&gt;WIFI 연결&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;설정은 root 권한으로 진행해야 하기에 sudo를 사용합니다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;라즈베리파이에서 wif로 연결을 하기 위해서는 먼저 wifi 국가를 JP로 설정해야 됩니다.
JP로 설정하면 대부분의 공유기 wifi를 지원합니다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# 영구적으로 wifi 국가 정보를 변경합니다.
sudo vi  /etc/default/crda 

REGDOMAIN=JP
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;wifi-설정&quot;&gt;wifi 설정&lt;/h3&gt;

&lt;p&gt;netplan을 이용해서 wifi의 정보를 설정하고 반영합니다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo vi /etc/netplan/50-cloud-init.yaml

network:
    ethernets:
        eth0:
            dhcp4: true
            optional: true
# wifi 설정            
    wifis:
        wlan0:
            dhcp4: no
            optional: true
# static ip 설정
            addresses: [192.168.0.31/24]
            gateway4: 192.168.0.1
            nameservers:
                addresses: [8.8.8.8,8.8.4.4]
# wifi access point 정보 
            access-points:
                &quot;DL2&quot;:
                    password: &quot;99876543@!q&quot;
    version: 2
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;위의 내용을 저장하고 netplan 정보를 생성하고 반영합니다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# 정보 생성
sudo netplan generate
# 정보 반영
sudo netplan apply
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;설정중 오류가 발생하면 &lt;a href=&quot;https://linuxhint.com/wi-fi_connecting_issues_raspberry_pi/&quot;&gt;Raspberry Pi Not Connecting to Wi-Fi&lt;/a&gt; 여기에서 정보를 확인 해보셔요.&lt;/p&gt;

&lt;h2 id=&quot;sshd-설치--설정&quot;&gt;sshd 설치 &amp;amp; 설정&lt;/h2&gt;

&lt;p&gt;마지막으로 sshd로 다른 PC에서 접근하기 위해서 sshd 설치하고 설정합니다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# sshd 설치
sudo apt install openssh-server
# 설정 변경
sudo vi /etc/ssh/sshd_config
# 부팅시 sshd 실행
sudo  systemctl enable sshd
# 변경된 설정 반영
sudo  systemctl restart sshd
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;여기까지 ubuntu의 기본 설정을 마무리합니다.&lt;/p&gt;

&lt;p&gt;다음으로 k3s 를 재설치 해보고 테스트 해볼 예정입니다.&lt;/p&gt;

&lt;h2 id=&quot;참고자료&quot;&gt;참고자료&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://ubuntu.com/download/raspberry-pi&quot;&gt;Install Ubuntu on a Raspberry Pi 2, 3 or 4&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://linuxhint.com/wi-fi_connecting_issues_raspberry_pi/&quot;&gt;Raspberry Pi Not Connecting to Wi-Fi&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.lesstif.com/lpt/sshd-server-24445601.html&quot;&gt;우분투 데스크탑 sshd server 활성화&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="raspberrypi" /><category term="ubuntu" /><summary type="html">k3s 재설치를 위한 1보 후퇴</summary></entry><entry><title type="html">회사를 나가는 분이 감사하다고 이야기 했다.</title><link href="https://lahuman.github.io/20210115/" rel="alternate" type="text/html" title="회사를 나가는 분이 감사하다고 이야기 했다." /><published>2021-01-15T00:00:00+09:00</published><updated>2021-01-15T00:00:00+09:00</updated><id>https://lahuman.github.io/20210115</id><content type="html" xml:base="https://lahuman.github.io/20210115/">&lt;h1 id=&quot;선임으로-많은-것을-해주지-못해서-미안하고-좋은-곳으로-가게-되어서-축하드려요&quot;&gt;선임으로 많은 것을 해주지 못해서 미안하고, 좋은 곳으로 가게 되어서 축하드려요.&lt;/h1&gt;

&lt;p&gt;작년에는 같은 팀이 었지만, 다른 팀으로 전배를 하게된 분이 있습니다.&lt;/p&gt;

&lt;p&gt;저와 친하게 지냈고, 성격도 활발해서 즐겁게 일했던 기억을 가지고 있는 분입니다.&lt;/p&gt;

&lt;p&gt;조용히 저에게 와서 그동안 고마웠다고 이야기 하시네요.&lt;/p&gt;

&lt;p&gt;전배이후 좀 힘들어 했는데, 잘된거 같습니다.&lt;/p&gt;

&lt;p&gt;좋은 사람들이 떠나는 건 늘 아쉬운 마음이 드네요.&lt;/p&gt;

&lt;h2 id=&quot;잘가요-고생했어요&quot;&gt;잘가요 고생했어요.&lt;/h2&gt;</content><category term="단상" /><summary type="html">그동안 고마웠다고, 그리고 계속 연락하자고</summary></entry><entry><title type="html">라즈베리파이에 k3s 설치 하기 - 실패기</title><link href="https://lahuman.github.io/raspberrypi_k3s/" rel="alternate" type="text/html" title="라즈베리파이에 k3s 설치 하기 - 실패기" /><published>2021-01-13T00:00:00+09:00</published><updated>2021-01-13T00:00:00+09:00</updated><id>https://lahuman.github.io/raspberrypi_k3s</id><content type="html" xml:base="https://lahuman.github.io/raspberrypi_k3s/">&lt;h1 id=&quot;라즈베리파이에-k3s-설치-하기---실패기&quot;&gt;라즈베리파이에 k3s 설치 하기 - 실패기&lt;/h1&gt;

&lt;blockquote&gt;
  &lt;p&gt;이 포스팅은 실패를 적은 것입니다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;1-라즈베리파이에-os-설치하기&quot;&gt;1. 라즈베리파이에 OS 설치하기&lt;/h2&gt;

&lt;p&gt;그림과 같이 &lt;a href=&quot;https://www.raspberrypi.org/software/operating-systems/#raspberry-pi-os-32-bit&quot;&gt;Raspberry Pi OS 다운로드&lt;/a&gt;페이지에서 &lt;code class=&quot;highlighter-rouge&quot;&gt;Raspberry Pi OS Lite&lt;/code&gt; 버젼을 받습니다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;다른 버젼을 사용해도 되지만, 서버용으로 GUI 없이 사용하기 위해서는 Lite 버젼이면 충분합니다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/post_img/raspberry_os_download.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;그리고 SD 카드에 해당 이미지를 구워줍니다.&lt;/p&gt;

&lt;p&gt;그리고 부팅을 하고 몇가지 설정을 합니다.&lt;/p&gt;

&lt;p&gt;대부분의 설정은 부팅 후 &lt;code class=&quot;highlighter-rouge&quot;&gt;raspi-config&lt;/code&gt; 명령어를 이용하면 쉽게 할 수 있습니다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;인터넷 연결(WIFI)&lt;/li&gt;
  &lt;li&gt;GPU Memory 64M =&amp;gt; 16M&lt;/li&gt;
  &lt;li&gt;hostname 변경(main, worker1, worker2 등)&lt;/li&gt;
  &lt;li&gt;SSH 활성화&lt;/li&gt;
  &lt;li&gt;iptables 사용하도록 설정(k3s는 네트워킹 기능은 내부적으로 iptables 를 사용합니다)&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo iptables -F
sudo update-alternatives --set iptables /usr/sbin/iptables-legacy
sudo update-alternatives --set ip6tables /usr/sbin/ip6tables-legacy
sudo reboot
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;IP 고정&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;vi /etc/dhcpcd.conf

# 본인 환경에 맞게 수정
interface wlan0
static ip_address=192.168.0.30
static routers=192.168.0.1
static domain_name_servers=8.8.8.8 1.1.1.1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;ulimit 설정&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;vi /etc/security/limits.conf

*       -       nofile  32768
*       -       nproc   65536
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;새로운 계정 생성 &amp;amp; pi 계정 삭제&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# root 로 로그인
sudo -i

# lahuman 계정 생성
adduser lahuman
# lahuman 계정에 sudo 권한 부여
adduser lahuman sudo

# 재부팅 후 lahuman 계정으로 로그인하고 pi 계정을 삭제 합니다.
deluser pi
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;여기까지 진행했다면, 라즈베리파이의 설정은 완료 되었습니다.&lt;/p&gt;

&lt;h2 id=&quot;k3s-설치&quot;&gt;k3s 설치&lt;/h2&gt;

&lt;h3 id=&quot;mian-node-설치&quot;&gt;mian node 설치&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;Standard Raspbian Buster installations do not start with cgroups enabled.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Raspbian Buster(Lite 포함)은 cgroups 가 활성화 되어 있지 않아서 다음 설정을 해야 합니다.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;/boot/cmdline.txt&lt;/code&gt; 에 다음을 추가 합니다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;vi /boot/cmdline.txt

# 기존 값이 console=serial0,115200 console=tty1 root=PARTUUID=afe9a4ef-02 rootfstype=ext4 elevator=deadline fsck.repair=yes rootwait  입니다. 
# cgroup_enable=cpuset cgroup_memory=1 cgroup_enable=memory 을 뒤에 추가 하면 됩니다.

console=serial0,115200 console=tty1 root=PARTUUID=afe9a4ef-02 rootfstype=ext4 elevator=deadline fsck.repair=yes rootwait cgroup_enable=cpuset cgroup_memory=1 cgroup_enable=memory
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;이제 main node에 k3s를 스크립트를 이용해서 설치 합니다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# 홈페이지에는 sudo 옵션이 없지만, 해당 옵션이 없으면 설치가 안됩니다.
curl -sfL https://get.k3s.io | sudo sh -
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;설치가 완료되었다면, node를 다음 명령어로 확인해 볼 수 있습니다&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo kubectl get nodes
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/post_img/k3s_install.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;worker-node-설치&quot;&gt;worker node 설치&lt;/h3&gt;

&lt;p&gt;먼저, &lt;code class=&quot;highlighter-rouge&quot;&gt;main node의 k3s설치 스크립트 실행 전까지&lt;/code&gt;와 동일한 작업을 진행합니다.
그리고 설치 main node의 토큰 값을 준비합니다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# main 노드에서 실행
sudo cat /var/lib/rancher/k3s/server/node-token
K10098666be0809d3fe6d02354bd433fb84b67dcb747c73efacc4c2ca12cac38961::server:1f4bfcbf8cf3985a4554a706c9ad704f
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;worker node에 k3s 설치를 진행합니다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;curl -sfL http://get.k3s.io | K3S_URL=https://192.168.0.30:6443 K3S_TOKEN=K10098666be0809d3fe6d02354bd433fb84b67dcb747c73efacc4c2ca12cac38961::server:1f4bfcbf8cf3985a4554a706c9ad704f  sudo sh -
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;k3s-삭제&quot;&gt;k3s 삭제&lt;/h3&gt;

&lt;p&gt;삭제는 다음 명령어로 쉽게 삭제가 가능합니다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# main node
sudo /usr/local/bin/k3s-uninstall.sh

# worker node
sudo /usr/local/bin/k3s-agent-uninstall.sh
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;k3s의-cpu-점유율이-장시간-동안-50-이상을-넘기고-있을-경우-처리-방안&quot;&gt;k3s의 CPU 점유율이 장시간 동안 50% 이상을 넘기고 있을 경우 처리 방안&lt;/h3&gt;

&lt;p&gt;원인을 모르겠지만, 계속 켜놓을 경우 CPU의 점유율이 50%를 넘기면서 nodes 조회가 안되는 현상이 있었습니다.&lt;/p&gt;

&lt;p&gt;검색을 통해서 알아보니, cpu 사용에 limit을 설정 할 수 있다고 하네요.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;vi /etc/systemd/system/k3s.service

CPUQuota=30%
CPUQuotaPeriodSec=50ms
AllowedCPUs=0
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;하지만, 이렇게 설정해도 동일한 오류가 발생했습니다.&lt;/p&gt;

&lt;p&gt;다른 이유로는 &lt;a href=&quot;https://blog.codybunch.com/2020/07/31/Fixing-cgroup-memory-on-Raspbian-Buster-for-Kernel-54x/&quot;&gt;Fixing cgroup memory on Raspbian Buster for Kernel 5.4.x&lt;/a&gt;의 내용과 같이 커널 버그라고 합니다.&lt;/p&gt;

&lt;p&gt;이를 해결하기 위해서는 커널을 업데이트 해야 하는데요.&lt;/p&gt;

&lt;p&gt;/boot/cmdline.txt 내용으 다음과 같이 수정하고,&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;cat /boot/cmdline.txt
console=serial0,115200 console=tty1 root=PARTUUID=dd5ac5d2-02 rootfstype=ext4 elevator=deadline fsck.repair=yes rootwait cgroup_enable=1 cgroup_memory=1 swapaccount=1 cgroup_enable=memory dwc_otg.lpm_enable=0
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;다음의 명령어로 커널을 업데이트 합니다&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo PRUNE_MODULES=1 RPI_REBOOT=1 SKIP_WARNING=1 rpi-update
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;하지만-아무리-해봐도-동일한-현상도-나오며-worker-node를-추가-할-수-없었습니다-대부분의-이야기에서는-ubuntu를-이용하라는-내용이-많이-있네요&quot;&gt;하지만… 아무리 해봐도 동일한 현상도 나오며, worker node를 추가 할 수 없었습니다. 대부분의 이야기에서는 ubuntu를 이용하라는 내용이 많이 있네요.&lt;/h2&gt;

&lt;h2 id=&quot;참고자료&quot;&gt;참고자료&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://rancher.com/docs/k3s/latest/en/installation/installation-requirements/&quot;&gt;Installation Requirements&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://opensource.com/article/20/3/kubernetes-raspberry-pi-k3s&quot;&gt;Run Kubernetes on a Raspberry Pi with k3s&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/k3s-io/k3s/issues/294&quot;&gt;k3s causes a high load average&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://blog.codybunch.com/2020/07/31/Fixing-cgroup-memory-on-Raspbian-Buster-for-Kernel-54x/&quot;&gt;Fixing cgroup memory on Raspbian Buster for Kernel 5.4.x&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="raspberrypi" /><category term="k3s" /><summary type="html">망한 k3s 설치 괴담입니다. 설치했으나.. 제대로 동작하지 않아요.</summary></entry></feed>

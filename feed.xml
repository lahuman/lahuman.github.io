<?xml version="1.0" encoding="utf-8"?><?xml-stylesheet type="text/xml" href="https://lahuman.github.io/feed.xslt.xml"?><feed xmlns="http://www.w3.org/2005/Atom"><generator uri="http://jekyllrb.com" version="3.8.4">Jekyll</generator><link href="https://lahuman.github.io/feed.xml" rel="self" type="application/atom+xml" /><link href="https://lahuman.github.io/" rel="alternate" type="text/html" /><updated>2021-07-10T11:43:03+09:00</updated><id>https://lahuman.github.io/</id><title type="html">lahuman</title><subtitle>열심히 사는 아저씨</subtitle><entry><title type="html">면접 질문 모음</title><link href="https://lahuman.github.io/20210710/" rel="alternate" type="text/html" title="면접 질문 모음" /><published>2021-07-10T00:00:00+09:00</published><updated>2021-07-10T00:00:00+09:00</updated><id>https://lahuman.github.io/20210710</id><content type="html" xml:base="https://lahuman.github.io/20210710/">&lt;h1 id=&quot;면접-질문들-모음&quot;&gt;면접 질문들 모음&lt;/h1&gt;

&lt;p&gt;최근 5년동안 받아본 면접 질문들을 정리 해보았습니다.&lt;/p&gt;

&lt;iframe width=&quot;768&quot; height=&quot;432&quot; src=&quot;https://miro.com/app/live-embed/o9J_l8V6DoI=/?moveToViewport=-1414,-2127,3847,1803&quot; frameborder=&quot;0&quot; scrolling=&quot;no&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;

&lt;p&gt;질문에 대답을 잘 못한 것도 있고, 새로운 사실을 알아가기도 합니다.&lt;/p&gt;

&lt;p&gt;면접 또한 많이 배우는 경험이됩니다.&lt;/p&gt;</content><category term="단상" /><summary type="html">지금까지 받아보았던 몇가지 면접 질문들을 정리 했습니다.</summary></entry><entry><title type="html">동시성, 컨커런시, LOCK, 메모리, 모니터링 메트릭스</title><link href="https://lahuman.github.io/20210706/" rel="alternate" type="text/html" title="동시성, 컨커런시, LOCK, 메모리, 모니터링 메트릭스" /><published>2021-07-06T00:00:00+09:00</published><updated>2021-07-06T00:00:00+09:00</updated><id>https://lahuman.github.io/20210706</id><content type="html" xml:base="https://lahuman.github.io/20210706/">&lt;h1 id=&quot;오늘-몇가지-질문을-받았는데-명확하게-이야기-하지-못했다&quot;&gt;오늘 몇가지 질문을 받았는데, 명확하게 이야기 하지 못했다.&lt;/h1&gt;

&lt;h3 id=&quot;첫번째-질문-동시성-컨커런시-lock&quot;&gt;첫번째 질문, 동시성, 컨커런시, LOCK&lt;/h3&gt;

&lt;p&gt;동시성, 컨커런시, LOCK 관련 질문을 많이 받았는데, 사실 크게 신경쓰지 않고 프로그램을 했었다.
왜냐고 묻는다면, 좋은 프레임워크들과 모듈들이 잘 관리 해주니 내가 신경쓸 일은 없었다.&lt;/p&gt;

&lt;p&gt;직접 Thread를 생성하고 프로그램을 짤던 10여년 전에는 synchronized를 이용해서 관리했었지만, 지금은 사실 Singleton 생성할때 말고는 써보지 않았다.&lt;/p&gt;

&lt;p&gt;그리고 가능하면 공유 자원을 최소화 하는 방식으로 개발을 하고 있다.&lt;/p&gt;

&lt;p&gt;병렬성에서 중요한건 실수를 줄일 수 있고 관심에 분리를 하는 환경을 만들어 주어야 한다.&lt;/p&gt;

&lt;p&gt;일일이 동시성과 LOCK을 걸면서 프로그램을 한다면 생각보다 비효율적일꺼 같은데 그리고 어떤 경우에 그런게 필요할까?&lt;/p&gt;

&lt;p&gt;곰곰히 생각해봤는데, 실제 Thread를 관리하고 병렬처리를 하는 프로그램을 만들어야 한다면 필요하겠다.&lt;/p&gt;

&lt;p&gt;내가 경험한 웹에서는 Connection Pool, 상수, Singleton 생성 등을 제외 하면 사용이 극히 제한적이다.&lt;/p&gt;

&lt;p&gt;또 Spring 을 쓴다면 기본적으로 객체에 대한 관리는 framework에서 해주기에 크게 신경을 쓰지 않도록 해준다.&lt;/p&gt;

&lt;p&gt;물론 내가 알지 못하는 부분에서 활발하게 쓰일수 있다. 예제 코드를 좀 찾아봐야겠다.&lt;/p&gt;

&lt;h3 id=&quot;두번째-질문-메모리&quot;&gt;두번째 질문 메모리&lt;/h3&gt;

&lt;p&gt;APP과 OS의 메모리를 실제로 덤프를 뜨거나, 확인한 적이 있는가의 질문이었다.&lt;/p&gt;

&lt;p&gt;잘해야 OOM 발생으로 메모리 스택트레이스 정도 확인해본 경험이 전부다.&lt;/p&gt;

&lt;p&gt;좀더 곰곰히 생각하면 메모리 덤프를 스냅샷으로 파일로 떨구서 본 기억이 있는 정도이다.&lt;/p&gt;

&lt;p&gt;문제가 있는것도 아니고 잘 돌아가는 상황에서 확인할 여유도 이유도 없었다.&lt;/p&gt;

&lt;p&gt;추가로 모니터링 프로그램을 통해서 메모리에 대한 정보를 확인한 경험도 있다.&lt;/p&gt;

&lt;p&gt;이 부분은 질문자와 의견이 많이 달랐는데, 이걸 모르면 안된다고 생각한다고 했다.&lt;/p&gt;

&lt;p&gt;난 조금 다르게 느끼는게 알면 좋겠지만, 몰라도 문제가 되지 않는다.&lt;/p&gt;

&lt;p&gt;그리고 알고 있다면 더 좋은 픔질의 프로그램을 짤 수 있을까?&lt;/p&gt;

&lt;p&gt;어느 영역에서 일하느냐에 따라 다르게 받아 들일 수 있을것이다.&lt;/p&gt;

&lt;h3 id=&quot;모니터링-메트릭스&quot;&gt;모니터링 메트릭스&lt;/h3&gt;

&lt;p&gt;모니터링이 필요한 요소는 무엇이 있을까?&lt;/p&gt;

&lt;p&gt;기본적인 항목으로는 서버의 리소스 &lt;code class=&quot;highlighter-rouge&quot;&gt;CPU, 메모리, 디스크, 네트워크, 프로세스&lt;/code&gt;가 있을꺼라 생각한다.&lt;/p&gt;

&lt;p&gt;사실 이 질문은 잘 이해 못했다. 정확하게 뭘 원하는 건지, 뭘 생각하는건지 모르겠다.&lt;/p&gt;

&lt;p&gt;모니터링 서비스를 만든 적이 없는 사람에게 생각나는데로 이야기 해보라는게 의미 있을까?&lt;/p&gt;

&lt;h3 id=&quot;nodejs-는-싱글쓰레드인가&quot;&gt;NODEJS 는 싱글쓰레드인가?&lt;/h3&gt;

&lt;p&gt;내 대답은 아니오 였다.&lt;/p&gt;

&lt;p&gt;싱글 쓰레드가 아니라 이벤트 루프가 싱글 쓰레드이다.
이벤트 루프가 워커 쓰레드가에게 처리할 것을 전달하고 다음 이벤트를 처리 한다.&lt;/p&gt;

&lt;p&gt;작년에 보았던 자료를 토대로 이야기 했는데, 그럼 동시성 처리는 어떻게 하냐는 질문을 받았다.
대답을 못했는데 &lt;a href=&quot;https://hdaleee.tistory.com/15&quot;&gt;Node.js는 싱글스레드인가요?&lt;/a&gt; 에서 다음과 같은 내용을 찾았다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;node.js 자체는 single-thread 방식이 아니다. 자바스크립트를 실행하는 부분에서만 single-thread로 구성되어있고, 이 때의 작업 동시성은 ‘이벤트 루프’를 통해서 구현할 수 있다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;이부분은 질문자도 잘 모르고, 나도 정확히 몰라서 나중에 검색해 본다고 하고 넘어갔다.&lt;/p&gt;

&lt;h3 id=&quot;마지막으로&quot;&gt;마지막으로&lt;/h3&gt;

&lt;p&gt;오늘 질문자와 이야기는 나름 재미있었다.(땀이 나기도 했지만)&lt;/p&gt;

&lt;p&gt;다만, 질문자의 공격성이 아쉬었다.&lt;/p&gt;

&lt;p&gt;본인이 14년 경력이 개발자로 상위 몇%라고 생각되느냐는 질문은 &lt;strong&gt;사실 주관적인 질문이기 때문에 본인의 생각과 달라 질수 있다고 생각된다.&lt;/strong&gt;
(내 자존감을 깍아 내려서 무엇을 하려고 하는지도 모르겠다.)&lt;/p&gt;

&lt;p&gt;물론 질문자가 받아 들이지 못하면 그것도 그것대로 이겠지만, 그런 사람과 일하는건 피곤할 것이다.&lt;/p&gt;

&lt;p&gt;누구나 잘하는 부분과 못하는 부분이 있다. 나는 평범한 사람으로 꽤나 노력하고 있고 열심히 살고 있다고 생각한다.&lt;/p&gt;

&lt;p&gt;누군가에게 부족해 보일 수도 있고, 모자르게 보일수도 있겠지만, 단편적인 부분을 보고 사람을 판단해서는 안된다.&lt;/p&gt;

&lt;p&gt;또한 적어도 사람과 사람 사이의 예의는 지켜야 한다.&lt;/p&gt;</content><category term="단상" /><summary type="html">크게 신경을 쓰지 못했던 부분에 대하여 다시 생각하는 날</summary></entry><entry><title type="html">Raspberry pi 4에 windows 11 설치</title><link href="https://lahuman.github.io/raspberry_windows11/" rel="alternate" type="text/html" title="Raspberry pi 4에 windows 11 설치" /><published>2021-07-05T00:00:00+09:00</published><updated>2021-07-05T00:00:00+09:00</updated><id>https://lahuman.github.io/raspberry_windows11</id><content type="html" xml:base="https://lahuman.github.io/raspberry_windows11/">&lt;h1 id=&quot;raspberry-pi-4에-windows-11을-설치해서-사용해봤습니다&quot;&gt;Raspberry pi 4에 windows 11을 설치해서 사용해봤습니다.&lt;/h1&gt;

&lt;p&gt;집에 있는 삼성 프린터가 네트워크를 지원하지 않아서, 방안을 고심중에 Raspberry PI 4에 windows 11이 설치되고 상당히 쓸만 하다는 글을 읽게 되었습니다.&lt;/p&gt;

&lt;p&gt;설치는 &lt;a href=&quot;https://www.tomshardware.com/how-to/install-windows-11-raspberry-pi&quot;&gt;How to Install Windows 11 on a Raspberry Pi 4&lt;/a&gt; 글을 따라하면 쉽게 가능합니다.&lt;/p&gt;

&lt;p&gt;그리고 장점과 단점으로 구분해서 후기를 정리 하면 다음과 같습니다.&lt;/p&gt;

&lt;h3 id=&quot;장점&quot;&gt;장점&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;생각보다 빠릿(?)하다
    &lt;ul&gt;
      &lt;li&gt;느리다는 느낌이 들지 않습니다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;단점&quot;&gt;단점&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;부팅이 정말 오래 걸린다.
    &lt;ul&gt;
      &lt;li&gt;Raspberry pi 4G 기준으로 약 5분 정도 걸립니다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;사운드는 해드셋 잭으로만 나온다.&lt;/li&gt;
  &lt;li&gt;다이소 wifi 모듈 인식이 안된다.
    &lt;ul&gt;
      &lt;li&gt;이게 가장 크리티컬하네요.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;원격 데스크탑(서버) 지원이 안된다.
    &lt;ul&gt;
      &lt;li&gt;프리뷰모드라 그런듯 합니다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;삼성 드라이버 설치가 안된다.
    &lt;ul&gt;
      &lt;li&gt;ARM CPU라 그런지, windows 11이라 그런지, 제가 원한 가장 중요한 기능이 안되네요. :(&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;프리뷰 버젼이니 완성도가 떨어져서 안되는게 있을꺼라 생각됩니다.
정식 버젼이 나오면 다시 테스트 해봐야겠네요.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;참고-자료&quot;&gt;참고 자료&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.tomshardware.com/how-to/install-windows-11-raspberry-pi&quot;&gt;How to Install Windows 11 on a Raspberry Pi 4&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="raspberry" /><category term="windows" /><summary type="html">잠시 사용해본 후기 입니다.</summary></entry><entry><title type="html">서비스 종료일</title><link href="https://lahuman.github.io/20210701/" rel="alternate" type="text/html" title="서비스 종료일" /><published>2021-07-01T00:00:00+09:00</published><updated>2021-07-01T00:00:00+09:00</updated><id>https://lahuman.github.io/20210701</id><content type="html" xml:base="https://lahuman.github.io/20210701/">&lt;h1 id=&quot;2019년에-입사를-해서-지금까지-30여개의-서비스를-만들었습니다&quot;&gt;2019년에 입사를 해서 지금까지 30여개의 서비스를 만들었습니다.&lt;/h1&gt;

&lt;p&gt;회사내의 문제를 발견하고 작게 만들어서 빠르게 실패하고, 다시 만드는 디자인 싱킹과 애자일 기반의 활동을 하였습니다.&lt;/p&gt;

&lt;p&gt;물론 매 2주안에 결과를 내야 하는 스크럼 진행으로 가끔은 너무 지치고 힘들었습니다.&lt;/p&gt;

&lt;p&gt;오늘 회사 합병과 개인 업무 재분배, 팀 이동 등의  이유로 그 동안 만들었던 서비스 중 사용자가 적은 서비스를 종료 하는 날이 왔습니다.&lt;/p&gt;

&lt;p&gt;자식을 잃는 기분이네요.&lt;/p&gt;

&lt;p&gt;더 발전 시킬 수 있는데, 더 잘 만들 수 있는데, 충분히 매력적인 서비스인데…&lt;/p&gt;

&lt;p&gt;아쉽고, 슬픈 하루입니다.&lt;/p&gt;

&lt;h2 id=&quot;잘가-그리고-너희를-만들면서-즐거웠어&quot;&gt;잘가 그리고 너희를 만들면서 즐거웠어.&lt;/h2&gt;

&lt;h2 id=&quot;ps-75-업데이트-상황&quot;&gt;PS. 7/5 업데이트 상황&lt;/h2&gt;

&lt;p&gt;사용자가 적지만, 꼭 필요한 서비스라고 연락이 와서 다시 살리는 서비스도 있었습니다. :)&lt;/p&gt;</content><category term="단상" /><summary type="html">3년간 만들었던 서비스 중 몇개가 종료되는 날입니다.</summary></entry><entry><title type="html">nestjs에서 passport + SAML 로그인시 오류 발생 처리</title><link href="https://lahuman.github.io/passport_saml_error/" rel="alternate" type="text/html" title="nestjs에서 passport + SAML 로그인시 오류 발생 처리" /><published>2021-06-28T00:00:00+09:00</published><updated>2021-06-28T00:00:00+09:00</updated><id>https://lahuman.github.io/passport_saml_error</id><content type="html" xml:base="https://lahuman.github.io/passport_saml_error/">&lt;h1 id=&quot;saml-assertion-expired&quot;&gt;SAML assertion expired&lt;/h1&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;[Nest] 32582   - 2021-06-25 15:24:29   [ExceptionsHandler] SAML assertion expired +40568ms
Error: SAML assertion expired
    at SAML.checkTimestampsValidityError (/Users/lahuman/dev/oss-square/backend/node_modules/passport-saml/lib/passport-saml/saml.js:1047:24)
    at /Users/lahuman/dev/oss-square/backend/node_modules/passport-saml/lib/passport-saml/saml.js:988:37
    at processTicksAndRejections (internal/process/task_queues.js:97:5)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;모든 사람이 발생하는게 아니라, 특정 한사람만 발생하는 오류였습니다.&lt;/p&gt;

&lt;p&gt;원인은 서버 시간과 사용자 PC 시간이 다르게 설정되어서 발생하는 문제 였습니다.&lt;/p&gt;

&lt;p&gt;우연히 발생하는 문제이겠지만, 기억해 두어야겠네요.&lt;/p&gt;

&lt;h2 id=&quot;시간을-꼭-확인하자&quot;&gt;시간을 꼭 확인하자!&lt;/h2&gt;</content><category term="nestjs" /><category term="testcase" /><category term="mock" /><category term="jest" /><summary type="html">SAML assertion expired</summary></entry><entry><title type="html">nestjs에서 jest를 이용한 End2End 테스트 케이스를 작성</title><link href="https://lahuman.github.io/nestjs_testcase_mock/" rel="alternate" type="text/html" title="nestjs에서 jest를 이용한 End2End 테스트 케이스를 작성" /><published>2021-06-23T00:00:00+09:00</published><updated>2021-06-23T00:00:00+09:00</updated><id>https://lahuman.github.io/nestjs_testcase_mock</id><content type="html" xml:base="https://lahuman.github.io/nestjs_testcase_mock/">&lt;h1 id=&quot;테스트-케이스-작성하기&quot;&gt;테스트 케이스 작성하기&lt;/h1&gt;

&lt;p&gt;오늘은 nestjs에서 jest를 이용한 End2End 테스트 케이스를 작성하였습니다.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;src/user/user.controller.spec.ts&lt;/code&gt; 파일에 사용자 추가/수정/삭제/조회에 대한 테스트 케이스를 작성하였습니다.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;End2End 데이터 기준의 validate 테스트&lt;/li&gt;
  &lt;li&gt;로그인 Mock 객체 주입 테스트&lt;/li&gt;
  &lt;li&gt;repository Mock 객체 테스트&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;전체 테스트 케이스 실행은 다음의 명령어로 할 수 있습니다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;node run test
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;특정 테스트 케이스 실행은 다음 명령어로 할 수 있습니다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;node node_modules/jest/bin/jest.js src/user/user.controller.spec.ts 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;테스트 케이스를 이용하면 코드의 오류를 빠르게 찾아낼 수 있습니다.
그 외에도 플로우차트 기반으로 테스트 케이스를 작성하여 명세에 알맞은 프로그램을 작성할 수도 있고요!&lt;/p&gt;

&lt;h2 id=&quot;전체-코드-바로-가기--httpsgithubcomlahumannestjs_101&quot;&gt;전체 코드 바로 가기 : https://github.com/lahuman/nestjs_101&lt;/h2&gt;</content><category term="nestjs" /><category term="testcase" /><category term="mock" /><category term="jest" /><summary type="html">테스트 케이스 작성하기</summary></entry><entry><title type="html">자바에 대하여 공부하기</title><link href="https://lahuman.github.io/java_srping_basic/" rel="alternate" type="text/html" title="자바에 대하여 공부하기" /><published>2021-06-23T00:00:00+09:00</published><updated>2021-06-23T00:00:00+09:00</updated><id>https://lahuman.github.io/java_srping_basic</id><content type="html" xml:base="https://lahuman.github.io/java_srping_basic/">&lt;h1 id=&quot;자바라-쓰고-springframework를-공부한다&quot;&gt;자바라 쓰고 Springframework를 공부한다.&lt;/h1&gt;

&lt;p&gt;Spring의 주요 3가지 컨셉은 아래와 같습니다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;1) IOC : 제어의 역전 / 의존성 주입
2) AOP : 관심의 분리
3) PSA : 일관성 있는 추상화
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;그럼 실제로 어떻게 사용될까?&lt;/p&gt;

&lt;h2 id=&quot;ioc--제어의-역전--의존성-주입-사용-예제&quot;&gt;IOC : 제어의 역전 / 의존성 주입 사용 예제&lt;/h2&gt;

&lt;p&gt;Bean은 IoC 컨테이너 안에 등록된 객체들을 의미 합니다. 
모든 클래스의 객체가 Bean으로 등록되지 않습니다. @Repository, @Component, @Service, @Bean 등의 어노테이션을 통해서 Bean으로 등록 가능합니다.&lt;/p&gt;

&lt;p&gt;사용 예로는 &lt;code class=&quot;highlighter-rouge&quot;&gt;@Autowired&lt;/code&gt; 어노테이션을 이용해서 Bean을 주입할 수 있습니다.
Bean 주입이 주는 이점은, 객체의 관리를 스프링 컨테이너가 하기에 개발자가 언제 빈을 생성하고 소멸시킬지 신경쓰지 않아도 됩니다.&lt;/p&gt;

&lt;h2 id=&quot;aop--관심의-분리-예제&quot;&gt;AOP : 관심의 분리 예제&lt;/h2&gt;

&lt;p&gt;가장 큰 예로 &lt;code class=&quot;highlighter-rouge&quot;&gt;@Transctional&lt;/code&gt;을 이야기 할 수 있습니다.
connection에 대하여 rollback, commit등을 신경쓰지 않고 처리 하게 됩니다.
결국 트렌젝션 처리는 위임하고 구현 기능에 집중하는 코드를 작성하면 됩니다.&lt;/p&gt;

&lt;h2 id=&quot;psa--일관성-있는-추상화&quot;&gt;PSA : 일관성 있는 추상화&lt;/h2&gt;

&lt;p&gt;Service Abstraction으로 제공되는 기술을 다른 기술 스택으로 간편하게 바꿀 수 있는 확장성을 갖고 있는 것이 Portable Service Abstraction. 줄여서 PSA라고 합니다.
예로는 서블릿을 직접 사용하는 것이 아니라, Controller의 @GetMapping이나 @PostMapping을 통해 특정 url로 요청이 들어왔을 때, 해당 블록이 요청을 처리하도록 구현 되어 있습니다.
이렇게 추상화 계층을 사용해 어떤 기술을 내부에 숨기고 개발자에게 편의성을 제공하는 것을 Service Abstraction이라고 합니다.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;스프링은 MVC&lt;/code&gt;라는 추상화 기법을 사용. Spring Web MVC를 사용하면 서블릿을 직접 구현할 필요가 없습니다.&lt;/p&gt;

&lt;h2 id=&quot;참고-자료&quot;&gt;참고 자료&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://zion830.tistory.com/109&quot;&gt;[예제로 배우는 스프링 입문] Spring IoC, AOP, PSA&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://lazymankook.tistory.com/27&quot;&gt;Annotation과 Bean&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="자바" /><category term="공부" /><summary type="html">오랜만에 자바 공부 진행</summary></entry><entry><title type="html">기분 좋은 날이 지나갑니다.</title><link href="https://lahuman.github.io/20210618/" rel="alternate" type="text/html" title="기분 좋은 날이 지나갑니다." /><published>2021-06-18T00:00:00+09:00</published><updated>2021-06-18T00:00:00+09:00</updated><id>https://lahuman.github.io/20210618</id><content type="html" xml:base="https://lahuman.github.io/20210618/">&lt;h1 id=&quot;함께-근무했었던-동료분들과-만났습니다&quot;&gt;함께 근무했었던 동료분들과 만났습니다.&lt;/h1&gt;

&lt;p&gt;오랜만에 뵈어서 기분이 좋네요.&lt;/p&gt;

&lt;p&gt;즐거운 시간이었습니다.&lt;/p&gt;

&lt;p&gt;또 나를 잊지 않고 만나러 와주셔서 행복하네요!&lt;/p&gt;

&lt;h2 id=&quot;기부니가-매우-좋아&quot;&gt;기부니가 매우 좋아!&lt;/h2&gt;</content><category term="단상" /><summary type="html">거의 3년만에 만나본 분들과 즐겁게 대화하고 헤어짐</summary></entry><entry><title type="html">nestjs + passport(local strategy) + typeorm(sqlite)</title><link href="https://lahuman.github.io/nestjs_passport_typeorm/" rel="alternate" type="text/html" title="nestjs + passport(local strategy) + typeorm(sqlite)" /><published>2021-06-17T00:00:00+09:00</published><updated>2021-06-17T00:00:00+09:00</updated><id>https://lahuman.github.io/nestjs_passport_typeorm</id><content type="html" xml:base="https://lahuman.github.io/nestjs_passport_typeorm/">&lt;h1 id=&quot;로그인--db-연결-예제-추가20210617&quot;&gt;로그인 &amp;amp; DB 연결 예제 추가(2021.06.17)&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;typeorm + sqlite 조합의 사용자 CRUD 구현&lt;/li&gt;
  &lt;li&gt;passport + local strategy를 이용한 로그인/로그아웃 처리&lt;/li&gt;
  &lt;li&gt;test-auth-chapter-sample를 참조하여 구현 하였습니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;코드-바로기가&quot;&gt;&lt;a href=&quot;https://github.com/lahuman/nestjs_101&quot;&gt;코드 바로기가&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;TODO : testcase 작성&lt;/p&gt;</content><category term="nestjs" /><category term="passport" /><category term="typeorm" /><summary type="html">nestjs에서 로그인과 DB 연결 예제 작성</summary></entry><entry><title type="html">희망에 대한 짧은 단상</title><link href="https://lahuman.github.io/20210616/" rel="alternate" type="text/html" title="희망에 대한 짧은 단상" /><published>2021-06-16T00:00:00+09:00</published><updated>2021-06-16T00:00:00+09:00</updated><id>https://lahuman.github.io/20210616</id><content type="html" xml:base="https://lahuman.github.io/20210616/">&lt;h1 id=&quot;큰-희망의-잦은-실패는-실망과-절망으로-변한다-하지만-절망은-만사가-피곤해질-뿐이다&quot;&gt;큰 희망의 잦은 실패는 실망과 절망으로 변한다. 하지만 절망은 만사가 피곤해질 뿐이다.&lt;/h1&gt;

&lt;blockquote&gt;
  &lt;p&gt;“삶이 있는 한 희망은 있다.” - 키케로&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;“희망은 사람을 성공으로 이끄는 신앙이다. 희망이 없으면, 아무것도 성취할 수가 없으며 희망 없이는 인간생활이 영위될 수 없다.” - 헬렌 켈러&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;“희망은 잠자고 있지 않는 인간의 꿈이다. 인간의 꿈이 있는 한 이 세상은 도전해볼 만하다. 어떠한 일이 있더라도 꿈을 잃지 말자. 꿈을 꾸자. 꿈은 희망을 버리지 않는 사람에게 선물로 주어진다.” - 아리스토텔레스&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;“내 비장의 무기는 아직 손안에 있다. 그것은 희망이다.” - 나폴레옹 보나파르트&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;“희망은 어둠 속에서 시작된다. 일어나 옳은 일을 하려 할 때, 고집스런 희망이 시작된다. 새벽은 올 것이다. 기다리고 보고 일하라. 포기하지 말라.” - 앤 라모트&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;“큰 희망이 큰 사람을 만든다.” - 토마스 풀러&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;희망은 정말 필요하다고 생각한다. 다만, 이루어질 수 없는 희망을 품는 것은 절망만 반복하게 된다.&lt;/p&gt;

&lt;p&gt;작은 희망으로 가슴을 채우고 점점 희망을 키워나가면서 실현해가자!&lt;/p&gt;

&lt;h2 id=&quot;희망이-절망이-되지-않도록&quot;&gt;희망이 절망이 되지 않도록!&lt;/h2&gt;</content><category term="단상" /><summary type="html">희망이 절망으로 바뀌지 않도록 노력해야 한다.</summary></entry></feed>

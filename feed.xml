<?xml version="1.0" encoding="utf-8"?><?xml-stylesheet type="text/xml" href="https://lahuman.github.io/feed.xslt.xml"?><feed xmlns="http://www.w3.org/2005/Atom"><generator uri="http://jekyllrb.com" version="3.8.4">Jekyll</generator><link href="https://lahuman.github.io/feed.xml" rel="self" type="application/atom+xml" /><link href="https://lahuman.github.io/" rel="alternate" type="text/html" /><updated>2019-02-04T17:04:28+09:00</updated><id>https://lahuman.github.io/</id><title type="html">lahuman</title><subtitle>열심히 사는 아저씨</subtitle><entry><title type="html">Node 모듈 설치시 오류시 해결 방법</title><link href="https://lahuman.github.io/node_tip/" rel="alternate" type="text/html" title="Node 모듈 설치시 오류시 해결 방법" /><published>2019-02-04T00:00:00+09:00</published><updated>2019-02-04T00:00:00+09:00</updated><id>https://lahuman.github.io/node_tip</id><content type="html" xml:base="https://lahuman.github.io/node_tip/">&lt;h1 id=&quot;node-모듈-설치시-오류시-해결-방법&quot;&gt;Node 모듈 설치시 오류시 해결 방법&lt;/h1&gt;

&lt;p&gt;node 버젼이 변경된 상태에서 npm install을 하면, 오류가 발생하는 경우가 있다.&lt;/p&gt;

&lt;p&gt;이럴때 해결 방법은 정말 단순 하다.&lt;/p&gt;

&lt;p&gt;해당 모듈을 삭제 하고 재설치 한다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;npm install
#oracle-db 모듈 오류발생

#oracle-db 모듈 삭제
npm uninstall oracle-db

#oracle-db 모듈 설치
npm install --save oracle-db
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;컴터-동작이-이상하면-재기동-하면-되듯이-모듈도-재설치-하면된다&quot;&gt;컴터 동작이 이상하면 재기동 하면 되듯이, 모듈도 재설치 하면된다.&lt;/h2&gt;</content><category term="node" /><category term="tip" /><summary type="html">npm install 시 오류 발생시 처리 방안</summary></entry><entry><title type="html">pm2 cluster mode 특징</title><link href="https://lahuman.github.io/pm2_cluster_mode/" rel="alternate" type="text/html" title="pm2 cluster mode 특징" /><published>2019-02-03T00:00:00+09:00</published><updated>2019-02-03T00:00:00+09:00</updated><id>https://lahuman.github.io/pm2_cluster_mode</id><content type="html" xml:base="https://lahuman.github.io/pm2_cluster_mode/">&lt;h1 id=&quot;pm2-cluster-mode에서는-session이나-websocket이-동작-하지-않는다&quot;&gt;pm2 cluster mode에서는 session이나 websocket이 동작 하지 않는다.&lt;/h1&gt;

&lt;p&gt;pm2에서 제공하는 클러스터 모드는 코드의 수정 없이 CPU를 확장할 수 있다. Node.js 클러스터 모듈을 사용하여 확장 된 응용 프로그램의 하위 프로세스가 자동으로 서버 포트를 공유 하도록 하는 기능이다.&lt;/p&gt;

&lt;p&gt;사용법은 다음과 같다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# -i 옵션이 cluster 모드이며, max는 사용할 CPU 수를 입력 하면 된다.
# 0을 입력하면, 자동으로 모든 CPU 숫자만큼 클러스터가 생성된다.
pm2 start app.js -i max
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;또는 js/yaml/json 파일을 통해서 설정을 할 수 있다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;{
  &quot;apps&quot; : [{
    &quot;script&quot;    : &quot;api.js&quot;,
    &quot;instances&quot; : &quot;max&quot;,
    &quot;exec_mode&quot; : &quot;cluster&quot; 
  }]
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Cluster Mode를 사용하면 가장 중요한게 &lt;a href=&quot;http://pm2.keymetrics.io/docs/usage/specifics/#stateless-apps&quot;&gt;stateless application&lt;/a&gt;이 된다는 것이다.&lt;/p&gt;

&lt;p&gt;이 상태에서는 가중 중요한게 로컬 데이터 저장소를 프로세스에서 사용할수 없다는 것이다. 사용을 하고 싶으면, &lt;a href=&quot;https://github.com/tj/connect-redis&quot;&gt;connect-redis&lt;/a&gt;과 같은 프로그램을 이용하면 된다.&lt;/p&gt;

&lt;h2 id=&quot;session이-동작하지-않아서-한참-해멧다&quot;&gt;Session이 동작하지 않아서 한참 해멧다.&lt;/h2&gt;

&lt;h2 id=&quot;참고자료&quot;&gt;참고자료&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://pm2.keymetrics.io/docs/usage/cluster-mode/&quot;&gt;cluster-mode&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://pm2.keymetrics.io/docs/usage/specifics/#stateless-apps&quot;&gt;stateless-apps&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/tj/connect-redis&quot;&gt;connect-redis&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="pm2" /><category term="cluster" /><summary type="html">session 동작을 하지 않는다.</summary></entry><entry><title type="html">Vuejs를 express로 배포 후 vuejs route 동작 처리</title><link href="https://lahuman.github.io/vue_build_route/" rel="alternate" type="text/html" title="Vuejs를 express로 배포 후 vuejs route 동작 처리" /><published>2019-01-30T00:00:00+09:00</published><updated>2019-01-30T00:00:00+09:00</updated><id>https://lahuman.github.io/vue_build_route</id><content type="html" xml:base="https://lahuman.github.io/vue_build_route/">&lt;h1 id=&quot;vuejs-배포시-route-동작-처리&quot;&gt;Vuejs 배포시 route 동작 처리&lt;/h1&gt;

&lt;p&gt;&lt;a href=&quot;https://lahuman.github.io/vuejs_express_helloworld/&quot;&gt;vuejs에서 express로 배포하는 방식을 기존에 설명 했었다.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;문제는 vuejs route에 주소를 직접 치고 들어가면 404 오류가 발생하였다.&lt;/p&gt;

&lt;p&gt;express쪽에서 기본적인 요청은 vuejs의 route를 바라보게 하고 싶어서 검색을 해보니, &lt;a href=&quot;https://github.com/egoist/vuepack/issues/138?fbclid=IwAR1KiC3mfi5E_2D8p3DGIxw_2_APSQ60oKAASmuwqfNKQvtWQq5heAt09to&quot;&gt;Routes not working in production&lt;/a&gt;라는 글을 확인 하였다.&lt;/p&gt;

&lt;p&gt;처리 방법은 express에 마지막 부분에 다음 코드를 추가 하면 된다.
index.html은 vuejs를 배포한 위치이다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;app.get('*', (req, res) =&amp;gt; {
  res.sendFile(`${__dirname}/public/index.html`);
});
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;vuejs도-잼나네&quot;&gt;vuejs도 잼나네!&lt;/h3&gt;

&lt;h2 id=&quot;참고-자료&quot;&gt;참고 자료&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/egoist/vuepack/issues/138?fbclid=IwAR1KiC3mfi5E_2D8p3DGIxw_2_APSQ60oKAASmuwqfNKQvtWQq5heAt09to&quot;&gt;Routes not working in production&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://router.vuejs.org/guide/essentials/history-mode.html?fbclid=IwAR2DbYoXnGUeYzeNeu289E7XsIVwX3XEE5dTSdntOZwe9-bti98P1sIPZ1E#example-server-configurations&quot;&gt;HTML5 History Mode&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="vue" /><summary type="html">Vuejs URL을 호출 하면 404가 발생하지 않게 하기</summary></entry><entry><title type="html">How to fix this is undefined in Vue.</title><link href="https://lahuman.github.io/vue_method_this/" rel="alternate" type="text/html" title="How to fix this is undefined in Vue." /><published>2019-01-23T00:00:00+09:00</published><updated>2019-01-23T00:00:00+09:00</updated><id>https://lahuman.github.io/vue_method_this</id><content type="html" xml:base="https://lahuman.github.io/vue_method_this/">&lt;h1 id=&quot;how-to-fix-this-is-undefined-in-vue&quot;&gt;How to fix “this is undefined” in Vue.&lt;/h1&gt;

&lt;p&gt;Vue를 써보고 있는데, Vue 안에 method를 선언하고 this를 호출하니 undefined가 발생하였다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;export default {
  methods: {
    sayHello: () =&amp;gt; {
    	this.val = 'hello';
    	console.log(this.val);
    }
  },
  data() {
	  return {
	  	val: ''
	  }
  }
}

#### 결과
this is undefined
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;원인을 찾아 보니 다음과 같은 내용을 확인했다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;If you try to access this from inside of an arrow function that’s on a Vue component, you’ll get an error because this doesn’t exist!&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Vue 구성 요소에있는 화살표 함수 내부에서 this에 액세스하려고 하면 존재하지 않기 때문에 오류가 발생합니다!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Vue 구성 요소 안에서 this를 사용하려면 화살표 함수를 사용하지 말아야 한다는 내용이다. 다음과 같이 수정하면 잘 동작한다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;export default {
  methods: {
    sayHello() {
    	this.val = 'hello';
    	console.log(this.val);
    }
  },
  data() {
	  return {
	  	val: ''
	  }
  }
}

#### 결과
hello
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;화살표 함수는 익명 함수를 만들때 사용하며, 다음과 같은 이유로 사용됩니다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;보다 짧고 응축된 구문&lt;/li&gt;
  &lt;li&gt;향상된 가독성&lt;/li&gt;
  &lt;li&gt;this 주변상황에서 취해진다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Vue의 method 내부에서 사용하는 것은 크게 문제가 없지만, method 자체를 화살표 함수로 선언할 경우 this를 사용할 수 없다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# Vue 내부에서 화살표 함수 사용 예
data() {
  return {
    match: 'This is a message',
  };
},
computed: {
  filteredMessages(messages) {
    console.log(this); // Our Vue component
    
    const filteredMessages = messages.filter(
      // References our Vue Component
      (message) =&amp;gt; message.includes(this.match)
    );
    
    return filteredMessages;
  }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;참고-자료&quot;&gt;참고 자료&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://michaelnthiessen.com/this-is-undefined/&quot;&gt;How to fix “this is undefined” in Vue&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="vue" /><summary type="html">Vue에서 this is undefined를 고치는 방법</summary></entry><entry><title type="html">How To Use Winston to Log Node.js Applications</title><link href="https://lahuman.github.io/winston_app-root-path/" rel="alternate" type="text/html" title="How To Use Winston to Log Node.js Applications" /><published>2019-01-21T00:00:00+09:00</published><updated>2019-01-21T00:00:00+09:00</updated><id>https://lahuman.github.io/winston_app-root-path</id><content type="html" xml:base="https://lahuman.github.io/winston_app-root-path/">&lt;h1 id=&quot;how-to-use-winston-to-log-nodejs-applications&quot;&gt;How To Use Winston to Log Node.js Applications&lt;/h1&gt;

&lt;p&gt;간단하게 설정만 작성하는 것으로 원본자료 &lt;a href=&quot;https://www.digitalocean.com/community/tutorials/how-to-use-winston-to-log-node-js-applications&quot;&gt;How To Use Winston to Log Node.js Applications&lt;/a&gt;을 보세요.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;var appRoot = require('app-root-path');
var winston = require('winston');

// define the custom settings for each transport (file, console)
var options = {
  file: {
    level: 'info',
    filename: `${appRoot}/logs/app.log`,
    handleExceptions: true,
    json: true,
    maxsize: 5242880, // 5MB
    maxFiles: 5,
    colorize: false,
  },
  console: {
    level: 'debug',
    handleExceptions: true,
    json: false,
    colorize: true,
  },
};

// instantiate a winston.createLogger with the settings defined above
var logger = winston.createLogger({
  transports: [
    new winston.transports.File(options.file),
    new winston.transports.Console(options.console)
  ],
  exitOnError: false, // do not exit on handled exceptions
});

// create a stream object with a 'write' function that will be used by `morgan`
logger.stream = {
  write: function(message, encoding) {
    // use the 'info' log level so the output will be picked up by both transports (file and console)
    logger.info(message);
  },
};

module.exports = logger;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;요렇게 설정만 해놓아도 기본으로 사용이 가능하다.&lt;/p&gt;

&lt;p&gt;추가로 알게된 &lt;a href=&quot;https://www.npmjs.com/package/app-root-path&quot;&gt;App Root Path Module&lt;/a&gt; 도 꽤 유용해보인다.&lt;/p&gt;

&lt;p&gt;app의 root path를 제공하여 다음과 같이 사용할 수 있다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;#1 
var appRoot = require('app-root-path');
var myModule = require(appRoot + '/lib/my-module.js');

#2
var reqlib = require('app-root-path').require;
var myModule = reqlib('/lib/my-module.js');

#3
// In app.js
global.reqlib = require('app-root-path').require;
 
// In lib/module/component/subcomponent.js
var myModule = reqlib('/lib/my-module.js');

#4
var myModulePath = require('app-root-path').resolve('/lib/my-module.js');
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;좋은게 많은데 몰라서 못쓴다.&lt;/p&gt;

&lt;p&gt;공부 많이 좀 해야겠다. 요즘 게을러져서 공부도 안하고 그냥 날로 먹을라고 한다.&lt;/p&gt;

&lt;h2 id=&quot;참고-자료&quot;&gt;참고 자료&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.digitalocean.com/community/tutorials/how-to-use-winston-to-log-node-js-applications&quot;&gt;How To Use Winston to Log Node.js Applications&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.npmjs.com/package/app-root-path&quot;&gt;App Root Path Module&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="nodejs" /><category term="winston" /><summary type="html">winston 설정을 하다 찾은 추가 모듈까지 설명</summary></entry><entry><title type="html">구글 콜라보에서 제공하는 주피터 노트북</title><link href="https://lahuman.github.io/20190119/" rel="alternate" type="text/html" title="구글 콜라보에서 제공하는 주피터 노트북" /><published>2019-01-19T00:00:00+09:00</published><updated>2019-01-19T00:00:00+09:00</updated><id>https://lahuman.github.io/20190119</id><content type="html" xml:base="https://lahuman.github.io/20190119/">&lt;p&gt;#함께 일하시는 분이 주피터 노트북을 사용하는 것을 보았다.&lt;/p&gt;

&lt;p&gt;요청사항에 대하여 크롤링하고 간단하게 화면에 통계를 뽑는 것을 주피터를 이용하여 뚝딱 하는 모습을 보았다.&lt;/p&gt;

&lt;p&gt;존멋! 나도 해보고 싶어서 요청 드려서 배웠다.&lt;/p&gt;

&lt;p&gt;일단 &lt;a href=&quot;https://colab.research.google.com&quot;&gt;구글 콜라보&lt;/a&gt;에서 새로운 프로젝트를 생성한다.&lt;/p&gt;

&lt;p&gt;필요한 모듈의 설치는 느낌펴(!)를 붙여서 설치하며 절차 지향적으로 프로그램을 작성한다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;#모듈 설치
!pip install pandas
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;값을 확인하고 싶으면 그냥 해당 변수를 쓴다(약간 matlab 같은 느낌이다.)&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;a = &quot;hello&quot;
# 이렇게 하면 출력 된다.
a
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;파이썬을 이용한 머신러닝, 딥러닝 실전 개발 입문 이라는 책에서 나오는 예제를 돌려 보았다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
from sklearn import svm
xor_data = [
    #P, Q, result
    [0,0,0],
    [0,1,1],
    [1,0,1],
    [1,1,0]
]

data = []
label = []
for row in xor_data:
  p = row[0]
  q = row[1]
  r = row[2]
  data.append([p,q])
  label.append(r)

clf = svm.SVC()
clf.fit(data, label)

pre = clf.predict(data)
print(&quot;예측결과&quot;, pre)

ok = 0; total = 0
for idx , answer in enumerate(label):
  p = pre[idx]
  if p == answer: 
    ok += 1
  total += 1
  
print(&quot;정답율:&quot;, ok, '/', total, &quot;=&quot;, ok/total)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;잘된다. 자주 써주마!&lt;/p&gt;

&lt;h2 id=&quot;참고-자료&quot;&gt;참고 자료&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://jupyter.org/&quot;&gt;주피터&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://colab.research.google.com&quot;&gt;구글 콜라보&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="단상" /><summary type="html">이거물건일세!</summary></entry><entry><title type="html">사람이 점점 뻔뻔하고 말이 너무 많아진다.</title><link href="https://lahuman.github.io/20190112/" rel="alternate" type="text/html" title="사람이 점점 뻔뻔하고 말이 너무 많아진다." /><published>2019-01-12T00:00:00+09:00</published><updated>2019-01-12T00:00:00+09:00</updated><id>https://lahuman.github.io/20190112</id><content type="html" xml:base="https://lahuman.github.io/20190112/">&lt;p&gt;#누구 이야기냐고? 나야…&lt;/p&gt;

&lt;p&gt;요즘 함께 일하는 분에게 되도 않는 조언을 하고 있다.&lt;/p&gt;

&lt;p&gt;말하고 나서 뒤돌아서면, 괜한 오지랍 같다.&lt;/p&gt;

&lt;p&gt;내 앞가림이나 잘하고 살자.&lt;/p&gt;

&lt;p&gt;그리고 말좀 적게 해라 이놈아!!!&lt;/p&gt;

&lt;h2 id=&quot;넌-말이-너무-많아&quot;&gt;넌 말이 너무 많아&lt;/h2&gt;</content><category term="단상" /><summary type="html">잘 익은 벼일수록 고개를 숙인다는데...</summary></entry><entry><title type="html">이번에 진행한 refactoring 코드 일부 공유</title><link href="https://lahuman.github.io/refactoring_javascript/" rel="alternate" type="text/html" title="이번에 진행한 refactoring 코드 일부 공유" /><published>2019-01-10T00:00:00+09:00</published><updated>2019-01-10T00:00:00+09:00</updated><id>https://lahuman.github.io/refactoring_javascript</id><content type="html" xml:base="https://lahuman.github.io/refactoring_javascript/">&lt;h1 id=&quot;이번에-함께-일하시는-분의-코드를-리펙토링하며-의견을-나누었다&quot;&gt;이번에 함께 일하시는 분의 코드를 리펙토링하며 의견을 나누었다.&lt;/h1&gt;

&lt;p&gt;이번에 함께 일하는 분의 코드 리펙토링을 진행 하였다.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.kyobobook.co.kr/product/detailViewKor.laf?mallGb=KOR&amp;amp;ejkGb=KOR&amp;amp;linkClass=331531&amp;amp;barcode=9791160500783&quot;&gt;유지보수 가능한 코딩의 기술 자바편&lt;/a&gt;의 내용을 기준으로 리펙토링을 하였다.&lt;/p&gt;

&lt;p&gt;하나의 메소드를 15라인을 넘지 않도록 하고 결과를 확인하니, 너무 세분화 하여 쪼갠 느낌이다.&lt;/p&gt;

&lt;p&gt;하나의 메소드는 하나의 역활만 하도록 하고, 중복된 코드가 없도로 했다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;const __DEFAULT_SELECTBOX_STR = &quot;선택해주세요&quot;;
const __ORDER_SELECT_BOX = ['cls-l', 'cls-m', 'cls-s', 'cls-d'];

const removeAllOptions = (isRemove, target) =&amp;gt; {
    if(isRemove){
        target.find('option').remove();
        target.append(new Option(__DEFAULT_SELECTBOX_STR, &quot;&quot;));
    }
}

const resetSubSelectBoxOption = (target_id) =&amp;gt; {
    let target_obj;
    let isResetSelectBox = false;
    __ORDER_SELECT_BOX.forEach(v =&amp;gt; {
        target_obj = $(&quot;#&quot;+v);
        if(v === target_id){
            isResetSelectBox = true;
        }
        removeAllOptions(isResetSelectBox, target_obj);
    });
}

const setClassification = (target, val, level) =&amp;gt; {
    callClassification({'upper_prd_cls_cd' : val, 'cls_lvl_no' : level}, (res)=&amp;gt;{
        res.forEach(element =&amp;gt; {
            target.append(new Option(element.PRD_CLS_NM, element.PRD_CLS_CD));
        });
    }); 
}

const setSubSelectBoxOption = ($target, val, level) =&amp;gt; {
    resetSubSelectBoxOption($target.attr(&quot;id&quot;));
    if (val === &quot;&quot;) return;
    setClassification($target, val, level);
}

const setInitValue4SelectBox = (target, i) =&amp;gt; {
    removeAllOptions(true, target);
    if (i === 0){
        setClassification(target, &quot;&quot;, 1);
    }
}

const bindEventOnSelectBox = (target, i) =&amp;gt; {
    if (i !== (__ORDER_SELECT_BOX.length-1)) {
        target.change(function() {
            setSubSelectBoxOption($(&quot;#&quot;+__ORDER_SELECT_BOX[i+1]), $(this).val(), (i+2));
        });
    }
}

const initSelectBox = () =&amp;gt; {
    __ORDER_SELECT_BOX.forEach((o, i) =&amp;gt; {
        let target = $(&quot;#&quot;+o);
        setInitValue4SelectBox(target, i);
        bindEventOnSelectBox(target, i);
    });  
    
}

$(document).ready(function() {
    initSelectBox();  
});
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;a href=&quot;http://www.mergely.com/TFa7VWc4/&quot;&gt;전체 diff로 원본 소스와 리펙토링된 소스 비교&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;이후 처리로 ESLINT와 TDD를 샘플링 해볼 예정이다.&lt;/p&gt;

&lt;h2 id=&quot;한걸음-한걸음씩&quot;&gt;한걸음 한걸음씩&lt;/h2&gt;</content><category term="refactoring" /><summary type="html">잘해서라기 보다는 이런 방식의 리팩토링을 한다는 차원에서의 공유</summary></entry><entry><title type="html">2019년에는 어떤 프로젝트를 해볼까?</title><link href="https://lahuman.github.io/20190105/" rel="alternate" type="text/html" title="2019년에는 어떤 프로젝트를 해볼까?" /><published>2019-01-05T00:00:00+09:00</published><updated>2019-01-05T00:00:00+09:00</updated><id>https://lahuman.github.io/20190105</id><content type="html" xml:base="https://lahuman.github.io/20190105/">&lt;h1 id=&quot;sci에-게제할-논문을-작성-중인데-이건-어렵다&quot;&gt;SCI에 게제할 논문을 작성 중인데 이건… 어렵다.&lt;/h1&gt;

&lt;p&gt;내 능력 밖의 일을 억지로 하고 있는거 같다.&lt;/p&gt;

&lt;p&gt;글쓰기도 못하고 능력도 부족한데 어찌 저찌 해가고 있는거 같다.&lt;/p&gt;

&lt;p&gt;다른 프로젝트로 무엇을 만들어 볼지 생각 중이다.&lt;/p&gt;

&lt;p&gt;재미있는 아이디어가 몇개 있긴 한데 구현이 쉬운게 없다.&lt;/p&gt;

&lt;p&gt;걍 한 두시간 뚝딱해서 만들만한 일을 하고 싶은데 뭐가 있을까?&lt;/p&gt;

&lt;h2 id=&quot;2019년도-재미있게-보내자&quot;&gt;2019년도 재미있게 보내자!&lt;/h2&gt;</content><category term="단상" /><summary type="html">올해 계획까진 아니고 뭘해볼지 딩굴 딩굴 거리는 중</summary></entry><entry><title type="html">ORA-21561 OID generation failed</title><link href="https://lahuman.github.io/ora-21561_OID_generation_failed/" rel="alternate" type="text/html" title="ORA-21561 OID generation failed" /><published>2019-01-04T00:00:00+09:00</published><updated>2019-01-04T00:00:00+09:00</updated><id>https://lahuman.github.io/ora-21561_OID_generation_failed</id><content type="html" xml:base="https://lahuman.github.io/ora-21561_OID_generation_failed/">&lt;h1 id=&quot;ora-21561-oid-generation-failed&quot;&gt;ORA-21561 OID generation failed&lt;/h1&gt;

&lt;p&gt;어제까지 문제가 없었는데 갑지가 node에서 Oracle 연결시 다음과 같이 오류가 발생 하였다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;gt; node ./bin/www
ORA-21561: OID generation failed
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;검색을 해보니 호스트네임의 문제라고 한다.&lt;/p&gt;

&lt;p&gt;다음과 같이 해주면 처리가 된다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;echo &quot;127.0.0.1 $(hostname)&quot; | sudo tee -a /etc/hosts
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;그러면 /etc/hosts에 한줄이 추가 되고 재기동 하면 접속에 성공했다는 메시지를 확인할 수 있다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;gt; node ./bin/www
Connection was successful!
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;하루에-하나-이상은-배우는-구나&quot;&gt;하루에 하나 이상은 배우는 구나!&lt;/h3&gt;

&lt;h2 id=&quot;참고자료&quot;&gt;참고자료&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/joeferner/node-oracle/issues/47&quot;&gt;Error : ORA-21561 OID generation failed #47&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="oracle" /><summary type="html">hostname을 추가 해야 하는 오류</summary></entry></feed>

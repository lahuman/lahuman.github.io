<?xml version="1.0" encoding="utf-8"?><?xml-stylesheet type="text/xml" href="https://lahuman.github.io/feed.xslt.xml"?><feed xmlns="http://www.w3.org/2005/Atom"><generator uri="http://jekyllrb.com" version="3.8.4">Jekyll</generator><link href="https://lahuman.github.io/feed.xml" rel="self" type="application/atom+xml" /><link href="https://lahuman.github.io/" rel="alternate" type="text/html" /><updated>2018-12-02T16:34:30+09:00</updated><id>https://lahuman.github.io/</id><title type="html">lahuman</title><subtitle>열심히 사는 아저씨</subtitle><entry><title type="html">NODEJS]client, server 기본 틀 만들어 보기</title><link href="https://lahuman.github.io/vuejs_express_helloworld/" rel="alternate" type="text/html" title="NODEJS]client, server 기본 틀 만들어 보기" /><published>2018-11-30T00:00:00+09:00</published><updated>2018-11-30T00:00:00+09:00</updated><id>https://lahuman.github.io/vuejs_express_helloworld</id><content type="html" xml:base="https://lahuman.github.io/vuejs_express_helloworld/">&lt;h1 id=&quot;nodejsclient-server-기본-틀-만들어-보기&quot;&gt;NODEJS]client, server 기본 틀 만들어 보기&lt;/h1&gt;

&lt;p&gt;Nodejs를 이용해서 개발을 시작한지 1주일이 되었다.&lt;/p&gt;

&lt;p&gt;지금까지는 누군가 만들어 놓은 화면을 수정하는 작업이 주로 이루어 졌다.&lt;/p&gt;

&lt;p&gt;기본적으로 node.js가 설치되어 있는 환경에서 진행 된다. 
node 서버쪽 설정을 해보자
node 서버는 &lt;strong&gt;express-generator&lt;/strong&gt; 를 이용한다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# express-generator 설치
$&amp;gt; npm install express-generator -g

# express 기본 디렉터리 생성
$&amp;gt; express &amp;lt;디렉터리 명&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;생성된 디렉토리는 다음과 같은 구조를 가진다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;|-bin           # express 실행 관련 
|-node_modules  # node modules 설치되는 위치
|-public        # 정적 파일의 위치 (client source 외 정적 파일)
|-views         # view 관련 위치(.ejs, .html 등)
|-routes        # route 설정된 js 모음
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;실행을 하기 전에 먼저 모듈을 설치 한다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$&amp;gt; npm install
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;이후 express 서버를 기동한다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$&amp;gt; npm run start
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;vue.js를 사용하기 위해서 vue-cli를 이용하여 client 화면의 구성을 생성한다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# vue-cli install
$&amp;gt; npm install -g @vue/cli
# client project create
# $&amp;gt; vue create &amp;lt;생성 프로젝트 명&amp;gt;
$&amp;gt; vue create client
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;생성을 할때 여러 옵션이 있지만 기본으로 생성한다.&lt;/p&gt;

&lt;p&gt;생성된 프로젝트 디렉토리로 들어가면, 다음의 구조로 되어 있다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;|-node_modules   # node modules 설치되는 위치
|-public         # 정적 파일(html)
|-src            # 실제 소스 위치
  |-components   # vue components
  |-assets       # 정적 파일(image, js, css ETC)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;생성된 프로젝트를 기동하는 방법은 다음과 같다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# client server running command
$&amp;gt; npm run serve
# build client source
$&amp;gt; npm run build
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;빌드를 할때, server 소스 쪽으로 빌드를 하면 clinet 서버를 띄우지 않고 server 쪽의 서버로 함께 기동하도록 할 수 있다.
위치는 일반적으로 server 의 public(정적 위치)으로 build 되도록 수정한다.
client 쪽에 &lt;strong&gt;vue.config.js&lt;/strong&gt; 파일을 추가하여 다음과 같은 내용을 작성하자
중요 한 것은 &lt;strong&gt;outputDir&lt;/strong&gt;을 서버의 public으로 설정 하는 것이다.&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$&amp;gt; vi vue.config.js

###
module.exports = {
  outputDir: '../server/public',   # build 시 소스 저장 위치
  devServer: {
    proxy: 'http://localhost:3000' # server 의 접속 주소
  }
}
###

$&amp;gt; npm run build
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;client의 소스를 빌드 하고 server를 실행하면 server에서 client의 소스를 확인 할 수 있다.&lt;/p&gt;

&lt;h2 id=&quot;참고-주소&quot;&gt;참고 주소&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://cli.vuejs.org/guide/creating-a-project.html&quot;&gt;vue create&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://cli.vuejs.org/config/#devserver-proxy&quot;&gt;devServer.prox&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://expressjs.com/en/starter/generator.html&quot;&gt;Express application generator&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="nodejs" /><category term="vue" /><category term="express" /><summary type="html">Node 개발의 첫걸음 시작!</summary></entry><entry><title type="html">Nginx private 인증서 적용하기</title><link href="https://lahuman.github.io/nginx_private_ssl/" rel="alternate" type="text/html" title="Nginx private 인증서 적용하기" /><published>2018-11-29T00:00:00+09:00</published><updated>2018-11-29T00:00:00+09:00</updated><id>https://lahuman.github.io/nginx_private_ssl</id><content type="html" xml:base="https://lahuman.github.io/nginx_private_ssl/">&lt;h1 id=&quot;nginx-private-인증서-적용하기&quot;&gt;Nginx private 인증서 적용하기&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;OPENSSL 기반으로 인증서요청서 생성하기&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$&amp;gt; openssl req -new -newkey rsa:2048 -nodes -keyout &amp;lt;개인키이름&amp;gt;.key -out &amp;lt;인증요청서이름&amp;gt;.csr
... 정보 입력 or 걍 엔터
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;인증서 생성 하기&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$&amp;gt; openssl x509 -req -days 365 -in &amp;lt;인증요청서이름&amp;gt;.csr -signkey &amp;lt;개인키이름&amp;gt;.key -out &amp;lt;생성할인증서이름&amp;gt;.crt
... 결과로 인증서( 인증서이름.crt )가 생성된다.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;비밀번호 제거작업
필수는 아니지만, Nginx를 재기동 할 경우 비밀번호를 요청 받는다. 따라서 다음과 같이 개인키를 재생성 한다.
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$&amp;gt; cp &amp;lt;생성된개인키이름&amp;gt;.key &amp;lt;생성할개인키복사본이름&amp;gt;.key.secure
$&amp;gt; openssl rsa -in &amp;lt;생성된개인키복사본이름&amp;gt;.key.secure -out &amp;lt;재생성할개인키이름&amp;gt;.key
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;Nginx SSL 적용&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$&amp;gt; vi /etc/nginx/conf.d/&amp;lt;서비스명&amp;gt;.conf
... 추가
server {
        listen 443;
        server_name localhost;
        charset utf-8;
        access_log /etc/nginx/log/access.log;
        error_log /etc/nginx/log/error.log;
        ssl     on;                                               #ssl사용
        ssl_certificate /etc/nginx/ssl/인증서이름.crt;               #생성된 인증서경로
        ssl_certificate_key /etc/nginx/ssl/&amp;lt;재생성할개인키이름&amp;gt;.key;    #생성된 개인키
        location / {
                proxy_redirect  off;
                proxy_set_header Host $http_host;
                proxy_set_header X-Real-IP $remote_addr;
                proxy_set_header X-Scheme $scheme;
                proxy_pass http://target-server;
        }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;끝!&lt;/p&gt;

&lt;p&gt;참고 주소에 가면 더 많은 정보가 있다.&lt;/p&gt;

&lt;h2 id=&quot;참고-주소&quot;&gt;참고 주소&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://setyourmindpark.github.io/2017/05/04/nginx/nginx-1/&quot;&gt;nginx ssl 적용하기&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="nginx" /><category term="private" /><category term="certification" /><summary type="html">참 별거 아닌데 찾으면 안나와</summary></entry><entry><title type="html">사람과의 대화에서는 경청이 중요하다.</title><link href="https://lahuman.github.io/20181128-phase/" rel="alternate" type="text/html" title="사람과의 대화에서는 경청이 중요하다." /><published>2018-11-28T00:00:00+09:00</published><updated>2018-11-28T00:00:00+09:00</updated><id>https://lahuman.github.io/20181128-phase</id><content type="html" xml:base="https://lahuman.github.io/20181128-phase/">&lt;h1 id=&quot;경청의-중요성&quot;&gt;경청의 중요성&lt;/h1&gt;

&lt;p&gt;상대방과 의견이 다를 경우, 목소리를 높이고 상대를 압도하려고 한다.&lt;/p&gt;

&lt;p&gt;결국 그런 행동은 상대의 기분만 나쁘게 하여 좋지 않은 결과를 가져온다.&lt;/p&gt;

&lt;p&gt;반대로 상대의 의견을 최대한 경청하고 들어본 후 자신의 의견과 비교하여 설명을 하면 상대방도 이해를 해준다.&lt;/p&gt;

&lt;p&gt;물론 모두 그런것은 아니지만…&lt;/p&gt;

&lt;p&gt;기본적으로 상대의 의견을 경청하자. 내 의견이 모두 맞는 것도 아니기에 들어 보면 알게된다.&lt;/p&gt;

&lt;h2 id=&quot;경청&quot;&gt;경청&lt;/h2&gt;</content><category term="단상" /><summary type="html">내 의견을 상대에게 이해시키기 위해 경청이 중요하다.</summary></entry><entry><title type="html">CentOS7에서 Heroku 연동하여 Node.js 서버 기동해보기</title><link href="https://lahuman.github.io/centos7_heroku_test/" rel="alternate" type="text/html" title="CentOS7에서 Heroku 연동하여 Node.js 서버 기동해보기 " /><published>2018-11-25T00:00:00+09:00</published><updated>2018-11-25T00:00:00+09:00</updated><id>https://lahuman.github.io/centos7_heroku_test</id><content type="html" xml:base="https://lahuman.github.io/centos7_heroku_test/">&lt;h1 id=&quot;centos7에서-nodejs-설치와-heroku-연동&quot;&gt;CentOS7에서 Nodejs 설치와 Heroku 연동&lt;/h1&gt;

&lt;p&gt;이번에 입사하게된 회사에서 NodeJS를 기반으로 개발을 하고 있다.&lt;/p&gt;

&lt;p&gt;개인 PC에서 테스트 하기도 하고 해당 결과물을 개인 서버에 올리는 것으로 heroku가 유명하다고 들어서 한번 테스트 해보았다.&lt;/p&gt;

&lt;p&gt;먼저 CentOS7이 설치가 되어있다는 상황에서 node.js를 설치 해야 한다.&lt;/p&gt;

&lt;p&gt;node.js를 설치 하는 방법 중 &lt;a href=&quot;https://github.com/creationix/nvm&quot;&gt;nvm(Node Version Manager)&lt;/a&gt;을 이용한 설치를 진행한다. nvm을 이용할 경우 노드의 버젼을 쉽게 변경 할 수 있기 때문에 추천 한다.&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;#nvm 설치
$&amp;gt; curl https://raw.githubusercontent.com/creationix/nvm/v0.25.0/install.sh | bash
$&amp;gt; source ~/.bashrc

#node.js 10.13.0 설치
$&amp;gt; nvm install 10.13.0
$&amp;gt; node -v
v10.13.0
$&amp;gt; npm -v
6.4.1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;이후 Heroku 와 연동을 위하여 git과 heroku cli를 설치 한다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;#git 설치
$&amp;gt; yum install git

#heroku cli 설치 
$&amp;gt; npm install -g heroku
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;heroku에 올릴 단순한 express 소스 작업을 한다.&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$&amp;gt; mkdir hello
$&amp;gt; cd hello
$&amp;gt; npm init # 엔터로 설정 스킵
$&amp;gt; npm install -save express
$&amp;gt; vi index.js
####
const express = require(&quot;express&quot;);
const PORT = process.env.PORT
const app = express();
app.get(&quot;/&quot;, (req, res) =&amp;gt; {
  res.send({ hello: &quot;world&quot; });
});
app.listen(PORT);
####
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;heroku에 올리기 위한 설정 작업 진행&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$&amp;gt; vi package.json
###
{
  &quot;name&quot;: &quot;hello&quot;,
  &quot;version&quot;: &quot;1.0.0&quot;,
  &quot;description&quot;: &quot;&quot;,
  &quot;main&quot;: &quot;index.js&quot;,
  &quot;scripts&quot;: {
    &quot;test&quot;: &quot;echo \&quot;Error: no test specified\&quot; &amp;amp;&amp;amp; exit 1&quot;,
    &quot;start&quot;: &quot;node index.js&quot; # 추가
  },
  &quot;author&quot;: &quot;&quot;,
  &quot;license&quot;: &quot;ISC&quot;,
  &quot;dependencies&quot;: {
    &quot;express&quot;: &quot;^4.16.4&quot;
  },
  &quot;engines&quot;:{               # 추가
    &quot;node&quot;: &quot;10.13.0&quot;,
    &quot;npm&quot;: &quot;6.4.1&quot;
  }                         # 추가
}
###

$&amp;gt; vi .gitignore
###
node_modules
###
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;heroku에 올리는 작업 진행&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$&amp;gt; git init
$&amp;gt; heroku login -i # 중요!! -i 옵션이 없으면 오류남
$&amp;gt; heroku create
$&amp;gt; git add .
$&amp;gt; git commit -m &quot;hello test&quot;
$&amp;gt; git push heroku master
$&amp;gt; heroku open # url을 복사하여 브라우져에 복사
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;heroku-login-오류&quot;&gt;heroku login 오류&lt;/h2&gt;

&lt;p&gt;그냥 heroku login을 진행하면 아래와 같이 오류가 난다.
그럴 경우 &lt;strong&gt;-i&lt;/strong&gt; 옵션을 이용하면 된다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$&amp;gt; heroku login ## -i 옵션을 줘어야 로그인이 진행됨
heroku: Press any key to open up the browser to login or q to exit:
$&amp;gt; heroku login -i
heroku: Enter your login credentials
Email:
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;이제 기본 셋팅이 되었으니 node.js로 테스트를 해보자!!&lt;/p&gt;

&lt;h2 id=&quot;nodejs-기본-버젼-설정&quot;&gt;node.js 기본 버젼 설정&lt;/h2&gt;

&lt;p&gt;nvm 으로 node.js를 설치하고 터미널을 종료 후 다시 들어오면 노드가 설치 되지 않은 것 처럼 동작한다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$&amp;gt; node
-bash: node: command not found

$&amp;gt; npm
-bash: npm: command not found
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;nvm ls 명령으로 확인해 보면, 다음과 같이 설정 된 것을 확인 가능하다.&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$&amp;gt; nvm ls
       v10.13.0
node -&amp;gt; stable (-&amp;gt; N/A) (default)
unstable -&amp;gt; 10.13 (-&amp;gt; v10.13.0) (default)
iojs -&amp;gt; iojs- (-&amp;gt; N/A) (default)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;기본 버젼 지정은 다음과 같이 하면 이후 터미널 접속시 문제 없이 해당 버젼을 사용 한다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$&amp;gt; nvm alias default 10.13.0
default -&amp;gt; 10.13.0 (-&amp;gt; v10.13.0)
$&amp;gt; nvm ls
-&amp;gt;     v10.13.0
default -&amp;gt; 10.13.0 (-&amp;gt; v10.13.0)
node -&amp;gt; stable (-&amp;gt; N/A) (default)
unstable -&amp;gt; 10.13 (-&amp;gt; v10.13.0) (default)
iojs -&amp;gt; iojs- (-&amp;gt; N/A) (default)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;참고-주소&quot;&gt;참고 주소&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.heroku.com&quot;&gt;HEROKU&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://medium.com/@yoobi55/express-node-js-%EB%A5%BC-%EC%9D%B4%EC%9A%A9%ED%95%B4-%EC%84%9C%EB%B2%84%EB%A5%BC-%EB%A7%8C%EB%93%A4%EC%96%B4-heroku%EC%97%90-%EC%98%AC%EB%A6%AC%EB%8A%94-%EB%B0%A9%EB%B2%95-3a5134fc8743&quot;&gt;express/node.js 를 이용해 서버를 만들어 heroku에 올리는 방법&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://stackoverflow.com/questions/53396323/heroku-login-issue-on-node-js&quot;&gt;Heroku login issue on Node js&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.liquidweb.com/kb/how-to-install-nvm-node-version-manager-for-node-js-on-centos-7/&quot;&gt;How to Install NVM (Node Version Manager) for Node.js on CentOS 7&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="centos7" /><category term="heroku" /><category term="nodejs" /><summary type="html">어렵지 않아요. 설치가 귀찮아서 그러지...</summary></entry><entry><title type="html">밥주는 회사가 이렇게 좋은지 몰랐네!!</title><link href="https://lahuman.github.io/20181122-phase/" rel="alternate" type="text/html" title="밥주는 회사가 이렇게 좋은지 몰랐네!!" /><published>2018-11-22T00:00:00+09:00</published><updated>2018-11-22T00:00:00+09:00</updated><id>https://lahuman.github.io/20181122-phase</id><content type="html" xml:base="https://lahuman.github.io/20181122-phase/">&lt;h1 id=&quot;홀아비-생활-일주일째-평일에는-회사에서-모든것을-해결한다&quot;&gt;홀아비 생활 일주일째 평일에는 회사에서 모든것을 해결한다.&lt;/h1&gt;

&lt;p&gt;밥 나오니 참 좋다.&lt;/p&gt;

&lt;p&gt;밥 잘먹고 정말 열심히 일하는 중이다.&lt;/p&gt;

&lt;p&gt;이직하고 초반엔 많이 힘들었는데 지금은 즐거워 진다.&lt;/p&gt;

&lt;p&gt;내일은 melt in 이라는 워크샵을 떠난다.&lt;/p&gt;

&lt;h2 id=&quot;잼나게-놀고-오자&quot;&gt;잼나게 놀고 오자!&lt;/h2&gt;</content><category term="단상" /><summary type="html">아침, 점심, 저녁까지 먹고 다닌다.</summary></entry><entry><title type="html">node.js 에서 다른 버젼으로 변경 하기</title><link href="https://lahuman.github.io/node_version_controll/" rel="alternate" type="text/html" title="node.js 에서 다른 버젼으로 변경 하기" /><published>2018-11-21T00:00:00+09:00</published><updated>2018-11-21T00:00:00+09:00</updated><id>https://lahuman.github.io/node_version_controll</id><content type="html" xml:base="https://lahuman.github.io/node_version_controll/">&lt;h1 id=&quot;nodejs에서-버젼-변경-하기&quot;&gt;node.js에서 버젼 변경 하기&lt;/h1&gt;

&lt;p&gt;오늘 특정 프로젝트를 받아서 빌드를 진행하는데 오류가 발생하였다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$&amp;gt; npm install
.... 모듈 오류 발생 ...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;원인은 node 버젼이 내 PC에 설치된 것은 11.x 이고 해당 모듈은 8.x 에서만 동작하였다.&lt;/p&gt;

&lt;p&gt;버젼 변경을 어찌 해야하는지 고민하는 차에 함께 일하시는 분이 &lt;strong&gt;n&lt;/strong&gt; 이라는 모듈을 이용하면 된다고 알려 주셨다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# 설치 
$&amp;gt;sudo  npm install -g n

# Node 버전 중 설치된 버전 확인
$&amp;gt; n ls  

# Node 버전 설치  
$&amp;gt; n &amp;lt;version&amp;gt;  
# ex&amp;gt; n 8.13

# 최신 LTS Node 버전 설치
$&amp;gt; n latest  

# 제거할 Node 설정
$ n rm &amp;lt;version ...&amp;gt;  
#ex&amp;gt; n rm 8.9.1 8.9.2

# 현재 버전을 제외한 모든 버전 제거
$ n prune  
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;참고-주소&quot;&gt;참고 주소&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.npmjs.com/package/n&quot;&gt;n&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://heropy.blog/2018/02/17/node-js-install/&quot;&gt;처음 시작하는 Node.js 개발 - 1 - 설치 및 버전 관리(NVM, n)&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/tj/n#usage&quot;&gt;n Usage&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="node" /><category term="version" /><summary type="html">여러 버젼의 node.js 사용하기</summary></entry><entry><title type="html">mac에서 iTerm2의 디렉터리 색상 바꾸기</title><link href="https://lahuman.github.io/mac_iterm2_color_change/" rel="alternate" type="text/html" title="mac에서 iTerm2의 디렉터리 색상 바꾸기" /><published>2018-11-20T00:00:00+09:00</published><updated>2018-11-20T00:00:00+09:00</updated><id>https://lahuman.github.io/mac_iterm2_color_change</id><content type="html" xml:base="https://lahuman.github.io/mac_iterm2_color_change/">&lt;h1 id=&quot;mac에서-iterm2의-디렉터리-색상-바꾸기&quot;&gt;mac에서 iTerm2의 디렉터리 색상 바꾸기&lt;/h1&gt;

&lt;p&gt;mac에서 zsh을 설치 하지 않고 단순하게 directory 색상만 변경하고 싶다.
vi로 개발을 하는 것도 아니고 zsh는 많은 기능이 제공되어 나아게 필요 없다.&lt;/p&gt;

&lt;p&gt;처음에 시도한 방법은 &lt;a href=&quot;https://iterm2colorschemes.com/&quot;&gt;테마&lt;/a&gt;를 이용하여 처리 하려고 했다.&lt;/p&gt;

&lt;p&gt;하지만 테마를 바꾼다고 하여도 실제 디렉터리의 색상이 변경 되는 것은 아니었다.&lt;/p&gt;

&lt;p&gt;그러다 &lt;a href=&quot;https://apple.stackexchange.com/questions/282185/how-do-i-get-different-colors-for-directories-etc-in-iterm2&quot;&gt;찾은 문의 글&lt;/a&gt;에서 LSCLORS를 알게 되었다.&lt;/p&gt;

&lt;p&gt;사용방법은 단순하게 &lt;strong&gt;.bash_profile&lt;/strong&gt; 에 다음 라인을 추가 하면 된다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$&amp;gt; cd ~
# .bash_profile 파일이 없으면 새로 생성 한다.
$&amp;gt; vi .bash_profile
export LSCOLORS=&quot;EHfxcxdxBxegecabagacad&quot; 

# 이부분이 ls 시 색상을 입힌다.
alias ls='ls -GH'  
# ll을 많이 사용하는 편이라서 추가 했다.
alias ll='ls -alGH'  
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;.bash_profile 팡일이 없어서 잠시 당황을 했지만 그냥 생성하면 처리된다.&lt;/p&gt;

&lt;h2 id=&quot;참고-주소&quot;&gt;참고 주소&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://apple.stackexchange.com/questions/282185/how-do-i-get-different-colors-for-directories-etc-in-iterm2&quot;&gt;How do I get different color for irectories, etc. in  iTerm2?&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://geoff.greer.fm/lscolors/&quot;&gt;LSCORS calculator&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://iterm2colorschemes.com/&quot;&gt;Iterm2-color-schemes&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="iterm2" /><category term="color" /><summary type="html">다른거 설치 안하고 파일의 속성에 따라 색상 변경</summary></entry><entry><title type="html">이직 후 새로운 언어를 배워서 사용해보고 있다.</title><link href="https://lahuman.github.io/20181119-phase/" rel="alternate" type="text/html" title="이직 후 새로운 언어를 배워서 사용해보고 있다." /><published>2018-11-19T00:00:00+09:00</published><updated>2018-11-19T00:00:00+09:00</updated><id>https://lahuman.github.io/20181119-phase</id><content type="html" xml:base="https://lahuman.github.io/20181119-phase/">&lt;h1 id=&quot;이직-후-새로운-언어를-써보고-있다&quot;&gt;이직 후 새로운 언어를 써보고 있다.&lt;/h1&gt;

&lt;p&gt;Node.js를 쓰고 있다.&lt;/p&gt;

&lt;p&gt;원해서 쓰는 것은 아니지만, 재미있게 배우고 있다.&lt;/p&gt;

&lt;p&gt;10년 넘게 JAVA 만 써오다가, Python, Node.js 등 새로운 언어를 사용하고 있다.&lt;/p&gt;

&lt;p&gt;새로운 언어를 사용하면서 많이 배오고 느낀다.&lt;/p&gt;

&lt;p&gt;어쩌면 내가 JAVA라는 틀에 갇혀있던 건 아니었을까?&lt;/p&gt;

&lt;h2 id=&quot;그렇다고-java-공부를-안하는건-아니고&quot;&gt;그렇다고 JAVA 공부를 안하는건 아니고&lt;/h2&gt;</content><category term="단상" /><summary type="html">Node.js를 써보는 중</summary></entry><entry><title type="html">새로운 회사에 적응을 하는중이다.</title><link href="https://lahuman.github.io/20181118-phase/" rel="alternate" type="text/html" title="새로운 회사에 적응을 하는중이다." /><published>2018-11-18T00:00:00+09:00</published><updated>2018-11-18T00:00:00+09:00</updated><id>https://lahuman.github.io/20181118-phase</id><content type="html" xml:base="https://lahuman.github.io/20181118-phase/">&lt;h1 id=&quot;새로운-회사에-적응을-하는-중이다&quot;&gt;새로운 회사에 적응을 하는 중이다.&lt;/h1&gt;

&lt;p&gt;이직을 하고 좋은 점이 몇가지 있다.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;출퇴근이 시간이 줄었다.&lt;/li&gt;
  &lt;li&gt;밥을 준다.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;출퇴근시간은 판교에서 다니던 시간이 워낙 오래 걸려서 그렇지만, 밥을 주는 회사는 처음이다.&lt;/p&gt;

&lt;p&gt;3일간 출근하고 느낀점은 아주 바쁘고 일이 많다고 느껴졌다.&lt;/p&gt;

&lt;h2 id=&quot;적응하겠지&quot;&gt;적응하겠지&lt;/h2&gt;</content><category term="단상" /><summary type="html">해야할 일이 많다.</summary></entry><entry><title type="html">팀 평가를 낮게 드려도 될까요?</title><link href="https://lahuman.github.io/20181108-phase/" rel="alternate" type="text/html" title="팀 평가를 낮게 드려도 될까요?" /><published>2018-11-08T00:00:00+09:00</published><updated>2018-11-08T00:00:00+09:00</updated><id>https://lahuman.github.io/20181108-phase</id><content type="html" xml:base="https://lahuman.github.io/20181108-phase/">&lt;h1 id=&quot;팀-평가를-낮게-드려도-될까요&quot;&gt;팀 평가를 낮게 드려도 될까요?&lt;/h1&gt;

&lt;p&gt;팀장님이 갑자기 이야기좀 하자고 하셨다.&lt;/p&gt;

&lt;p&gt;잠시 주저하시더니,&lt;/p&gt;

&lt;p&gt;“팀 평가를 하는데 낮은 평가를 해도 괜찮을까요?”&lt;/p&gt;

&lt;p&gt;곧 퇴사 하는 나로서는 평가가 큰 의미가 없기에&lt;/p&gt;

&lt;p&gt;“괜찮습니다. 내일이 마지막 출근일인데요.”&lt;/p&gt;

&lt;p&gt;팀장님은 많이 미안해 하면서&lt;/p&gt;

&lt;p&gt;“그동안 고생하셨는데 평가를 낮게 드려서 죄송해요”&lt;/p&gt;

&lt;p&gt;내일까지만 출근하기에 낮은 평가를 주셔도 내가 알수 없는데, 말씀을 주시니 내가 참 좋은 팀에 있었구나라는 생각이 든다.&lt;/p&gt;

&lt;h2 id=&quot;그동안-감사했습니다&quot;&gt;그동안 감사했습니다.&lt;/h2&gt;</content><category term="단상" /><summary type="html">퇴사 전날 팀장님이 나에게 물었다.</summary></entry></feed>

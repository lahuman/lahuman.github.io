<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.6.3">Jekyll</generator><link href="https://lahuman.github.io/feed.xml" rel="self" type="application/atom+xml" /><link href="https://lahuman.github.io/" rel="alternate" type="text/html" /><updated>2024-08-30T06:14:31+00:00</updated><id>https://lahuman.github.io/feed.xml</id><title type="html">lahuman</title><subtitle>열심히 사는 아저씨</subtitle><entry><title type="html">Spring framework Cache</title><link href="https://lahuman.github.io/redis_cache_with_ttl/" rel="alternate" type="text/html" title="Spring framework Cache" /><published>2024-08-29T00:00:00+00:00</published><updated>2024-08-29T00:00:00+00:00</updated><id>https://lahuman.github.io/redis_cache_with_ttl</id><content type="html" xml:base="https://lahuman.github.io/redis_cache_with_ttl/">&lt;h1 id=&quot;redis와-spring-aop를-이용한-캐시-관리-rediscacheable로-ttl-설정하기&quot;&gt;Redis와 Spring AOP를 이용한 캐시 관리: RedisCacheable로 TTL 설정하기&lt;/h1&gt;

&lt;p&gt;애플리케이션 성능을 최적화하기 위해서는 캐시를 활용하는 것이 매우 중요합니다. 특히, Redis는 고속의 인메모리 데이터 저장소로써 Spring과 결합해 캐시를 관리하는 데 아주 유용합니다. 이번 포스팅에서는 @RedisCacheable이라는 커스텀 어노테이션을 사용하여 TTL(Time to Live)로 Redis 캐시의 생명주기를 관리하는 방법을 소개하려 합니다.&lt;/p&gt;

&lt;h2 id=&quot;1-rediscacheable-어노테이션-정의&quot;&gt;1. @RedisCacheable 어노테이션 정의&lt;/h2&gt;
&lt;p&gt;우선 @RedisCacheable 어노테이션을 정의합니다. 이 어노테이션은 메서드에 적용되어, 메서드의 반환값을 Redis에 캐싱하도록 해줍니다. 이를 통해 반복되는 데이터 조회 작업의 부담을 줄일 수 있습니다.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@Target&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AnnotationTarget&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;FUNCTION&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@Retention&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AnnotationRetention&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;RUNTIME&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;annotation&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;RedisCacheable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;name:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;key:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;ttl:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Long&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;hasClassAndMethodNamePrefix:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Boolean&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;nd&quot;&gt;@Target&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AnnotationTarget&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;FUNCTION&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@Retention&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AnnotationRetention&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;RUNTIME&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;annotation&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;RedisCacheEvict&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;name:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Array&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;key:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;clearAll:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Boolean&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;hasClassAndMethodNamePrefix:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Boolean&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;kn&quot;&gt;package&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;com&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;samsungfire&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;chacpet&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;common&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;annotation&lt;/span&gt;

&lt;span class=&quot;nd&quot;&gt;@Target&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AnnotationTarget&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;FUNCTION&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@Retention&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AnnotationRetention&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;RUNTIME&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;annotation&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;RedisCacheEvict&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;name:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Array&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;key:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;clearAll:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Boolean&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;hasClassAndMethodNamePrefix:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Boolean&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;ul&gt;
  &lt;li&gt;name: Redis에서 사용할 캐시 이름을 지정합니다.&lt;/li&gt;
  &lt;li&gt;key: 캐시에 사용할 특정 키를 지정합니다. 메서드의 파라미터 값들을 기반으로 키가 생성됩니다.&lt;/li&gt;
  &lt;li&gt;ttl: 캐시의 유효 기간을 초 단위로 설정합니다. 기본값은 -1로, 이 경우 캐시가 만료되지 않습니다.&lt;/li&gt;
  &lt;li&gt;hasClassAndMethodNamePrefix: 캐시 키에 클래스와 메서드 이름을 포함할지 여부를 설정합니다.&lt;/li&gt;
  &lt;li&gt;clearAll: 주어진 명명 이하로 * 를 추가해서 삭제시 사용&lt;/li&gt;
&lt;/ul&gt;

&lt;ol&gt;
  &lt;li&gt;RedisCacheable 어노테이션 처리하기
이제 AOP를 사용해 RedisCacheable 어노테이션을 처리하는 방법을 설명하겠습니다. RedisCacheAspect 클래스를 통해 어노테이션이 적용된 메서드를 가로채어 캐시를 관리하는 로직을 추가합니다.&lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@Aspect&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@Component&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;RedisCacheAspect&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;redisTemplate:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;RedisTemplate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Any&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;?&amp;gt;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@Around&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;@annotation(redisCacheable)&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;cacheableProcess&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;joinPoint:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ProceedingJoinPoint&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;redisCacheable:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;RedisCacheable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;):&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Any&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cacheKey&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;generateKey&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;redisCacheable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;joinPoint&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;redisCacheable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;hasClassAndMethodNamePrefix&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;redisCacheable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;key&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cacheTTL&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;redisCacheable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;ttl&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;redisTemplate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;opsForValue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cacheKey&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)?.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;it&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;methodReturnValue&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;joinPoint&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;proceed&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cacheTTL&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;redisTemplate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;opsForValue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cacheKey&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;methodReturnValue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;redisTemplate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;opsForValue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cacheKey&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;methodReturnValue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cacheTTL&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TimeUnit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;SECONDS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;methodReturnValue&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;


    &lt;span class=&quot;nd&quot;&gt;@Around&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;@annotation(redisCacheEvict)&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;cacheEvictProcess&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;joinPoint:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ProceedingJoinPoint&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;redisCacheEvict:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;RedisCacheEvict&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;):&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Any&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;methodReturnValue&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;joinPoint&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;proceed&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;redisCacheEvict&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;forEach&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cacheName&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;redisCacheEvict&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;clearAll&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;keys&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;redisTemplate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;keys&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;$cacheName*&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;keys&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;isNotEmpty&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;redisTemplate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;delete&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;keys&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cacheKey&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;generateKey&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cacheName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;joinPoint&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;redisCacheEvict&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;hasClassAndMethodNamePrefix&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;redisCacheEvict&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;redisTemplate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;delete&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cacheKey&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;methodReturnValue&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;


    &lt;span class=&quot;nd&quot;&gt;@Around&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;@annotation(redisCachePut)&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;cachePutProcess&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;joinPoint:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ProceedingJoinPoint&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;redisCachePut:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;RedisCachePut&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;):&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Any&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cacheKey&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;generateKey&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;redisCachePut&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;joinPoint&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;redisCachePut&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;hasClassAndMethodNamePrefix&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;redisCachePut&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;key&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cacheTTL&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;redisCachePut&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;ttl&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;methodReturnValue&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;joinPoint&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;proceed&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cacheTTL&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;redisTemplate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;opsForValue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cacheKey&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;methodReturnValue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;redisTemplate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;opsForValue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cacheKey&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;methodReturnValue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cacheTTL&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TimeUnit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;SECONDS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;methodReturnValue&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;generateKey&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
        &lt;span class=&quot;nl&quot;&gt;cacheName:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;nl&quot;&gt;joinPoint:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ProceedingJoinPoint&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;nl&quot;&gt;hasClassAndMethodNamePrefix:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Boolean&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;nl&quot;&gt;key:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;):&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;generatedKey&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;isEmpty&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;StringUtils&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;arrayToCommaDelimitedString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;joinPoint&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;getParameterValueByKey&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;joinPoint&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;?:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IllegalArgumentException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;No matching parameter for key: $key&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hasClassAndMethodNamePrefix&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;target&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;joinPoint&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;simpleName&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;method&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;joinPoint&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;signature&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MethodSignature&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;method&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;
            &lt;span class=&quot;s&quot;&gt;&quot;$cacheName::$target.$method($generatedKey)&quot;&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;s&quot;&gt;&quot;$cacheName::($generatedKey)&quot;&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;parser&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SpelExpressionParser&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getParameterValueByKey&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;joinPoint:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ProceedingJoinPoint&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;key:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;):&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;signature&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;joinPoint&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;signature&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MethodSignature&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;parameterNames&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;signature&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;parameterNames&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;StandardEvaluationContext&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;parameterNames&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;forEachIndexed&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;indexedValue&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setVariable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;indexedValue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;joinPoint&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;parser&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;parseExpression&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getValue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;String:&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;java&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h2 id=&quot;3-캐시-키-생성과-ttl-적용&quot;&gt;3. 캐시 키 생성과 TTL 적용&lt;/h2&gt;

&lt;p&gt;generateKey 메서드를 이용해 캐시 키를 생성합니다. 이 키는 Redis에 저장될 데이터의 고유 식별자가 됩니다. TTL 값은 캐시의 생명주기를 관리하는 데 사용되며, 지정된 TTL이 지나면 캐시는 자동으로 만료됩니다. TTL 값이 지정되지 않았다면 캐시는 영구적으로 유지됩니다.&lt;/p&gt;

&lt;h2 id=&quot;4-실제-사용-예시&quot;&gt;4. 실제 사용 예시&lt;/h2&gt;
&lt;p&gt;이제 @RedisCacheable 어노테이션을 실제 코드에 적용해 보겠습니다:&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@RedisCacheable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;petCache&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;key&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;#petType&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ttl&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3600&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getPetDetails&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;petType:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;):&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PetDetails&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// 데이터베이스 또는 외부 API를 통해 데이터를 조회하는 로직&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;petService&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getPetDetails&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;petType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;위 메서드는 petType을 키로 하여 petCache에 캐싱됩니다. 캐시는 3600초(1시간) 동안 유효하며, 이후에는 자동으로 만료됩니다.&lt;/p&gt;

&lt;h2 id=&quot;5-적재된-cache가-redis-에서-조회가-안될-경우-처리-방법&quot;&gt;5. 적재된 cache가 redis 에서 조회가 안될 경우 처리 방법&lt;/h2&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    &lt;span class=&quot;nd&quot;&gt;@Bean&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;redisTemplate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;connectionFactory:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;RedisConnectionFactory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;):&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;RedisTemplate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Any&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;?&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;template&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;RedisTemplate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Any&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;apply&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;setConnectionFactory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;connectionFactory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;setKeySerializer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;StringRedisSerializer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;template&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;setKeySerializer(StringRedisSerializer())&lt;/code&gt; 라인은 RedisTemplate이 Redis에 데이터를 저장하거나 조회할 때 사용하는 키의 직렬화 방식을 설정하는 부분입니다.&lt;/p&gt;

&lt;p&gt;RedisTemplate은 Redis와의 상호작용을 추상화하여 간단한 API를 제공합니다. 이 때 Redis에 저장되는 데이터의 키와 값은 각각 직렬화가 필요합니다. KeySerializer는 Redis에 저장되는 키를 어떻게 직렬화할지를 결정합니다.&lt;/p&gt;

&lt;p&gt;기본적으로 RedisTemplate의 키 직렬화는 &lt;code class=&quot;highlighter-rouge&quot;&gt;JdkSerializationRedisSerializer&lt;/code&gt;을 사용합니다. 이 방식은 Java의 기본 직렬화 방식을 사용하여 객체를 바이트 배열로 변환합니다. 하지만, 일반적으로 Redis 키는 문자열로 저장되는 것이 좋습니다. 그 이유는&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;문자열은 Redis CLI나 기타 관리 도구로 쉽게 조회할 수 있습니다.&lt;/li&gt;
  &lt;li&gt;다른 언어나 시스템과의 호환성이 높습니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;마치며&quot;&gt;마치며&lt;/h2&gt;

&lt;p&gt;이번 포스팅에서는 @RedisCacheable 어노테이션과 AOP를 활용해 Redis 캐싱을 어떻게 구현하고 TTL로 캐시의 생명주기를 관리하는지를 살펴보았습니다. 이를 통해 데이터 조회 성능을 크게 향상시킬 수 있으며, 특히 빈번한 데이터 변경이 없는 경우 유용하게 사용할 수 있습니다. Redis와 Spring의 조합을 통해 성능 최적화에 한 발 더 나아가 보세요!&lt;/p&gt;

&lt;p&gt;이 포스팅이 여러분의 프로젝트에 도움이 되었길 바랍니다. 궁금한 점이나 더 알고 싶은 내용이 있다면 댓글로 남겨주세요. Happy Coding! 🎉&lt;/p&gt;

&lt;h2 id=&quot;참고자료&quot;&gt;참고자료&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.spring.io/spring-data/redis/reference/redis/redis-cache.html&quot;&gt;Redis Cache&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/spring-projects/spring-framework/blob/main/spring-context/src/main/java/org/springframework/cache/interceptor/SimpleKey.java&quot;&gt;spring-framework/spring-context/src/main/java/org/springframework/cache/interceptor/SimpleKey.java&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://jgrammer.tistory.com/entry/Spring-Boot-%EB%A7%8C%EB%A3%8C%EC%8B%9C%EA%B0%84-%EC%84%A4%EC%A0%95%EC%9D%84-%EC%9C%84%ED%95%9C-Redis-Cache-AOP-%EC%9E%91%EC%84%B1&quot;&gt;Spring Boot 캐시 만료시간 설정을 위한 Redis Cache AOP 작성&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name></name></author><category term="spring" /><category term="cache" /><category term="redis" /><summary type="html">Spring data Reids Cache 를 쓰다, ttl 설정이 불편해서 수정 해보았습니다.</summary></entry><entry><title type="html">npm install 시 개발 라이브러리 제외 처리</title><link href="https://lahuman.github.io/npm_instal_without_devDependencies/" rel="alternate" type="text/html" title="npm install 시 개발 라이브러리 제외 처리 " /><published>2024-08-28T00:00:00+00:00</published><updated>2024-08-28T00:00:00+00:00</updated><id>https://lahuman.github.io/npm_instal_without_devDependencies</id><content type="html" xml:base="https://lahuman.github.io/npm_instal_without_devDependencies/">&lt;h1 id=&quot;운영에서-npm-install-시-devdependencies-제외-처리&quot;&gt;운영에서 npm install 시 devDependencies 제외 처리&lt;/h1&gt;

&lt;p&gt;프로덕션 환경에서 애플리케이션을 배포할 때, 불필요한 패키지를 설치하지 않기 위해 npm i –production을 사용합니다. 이는 애플리케이션의 크기를 줄이고, 배포 시간을 단축시키며, 보안상 불필요한 패키지가 포함되지 않도록 하기 위해 유용합니다.&lt;/p&gt;

&lt;div class=&quot;language-json highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;dependencies&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;express&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;^4.17.1&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;devDependencies&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;nodemon&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;^2.0.7&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;npm i&lt;/code&gt;: express와 nodemon 둘 다 설치됩니다.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;npm i --production&lt;/code&gt;: express만 설치됩니다. nodemon은 개발 의존성이기 때문에 설치되지 않습니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;프로덕션 환경에서는 불필요한 코드와 리소스를 줄이고, 보안성을 높이며, 배포 및 실행 속도를 최적화하기 위해 개발 의존성을 설치하지 않습니다.
이는 전체적인 시스템 성능을 개선하고, 유지 관리의 부담을 줄이는 데 중요한 역할을 합니다&lt;/p&gt;</content><author><name></name></author><category term="npm" /><category term="dependencies" /><summary type="html">불필요한 라이브러리를 설치 하지 않아요!</summary></entry><entry><title type="html">Spring boot 3 몇가지 경고 제거 처리</title><link href="https://lahuman.github.io/sprinboot3_wrong_loggings/" rel="alternate" type="text/html" title="Spring boot 3 몇가지 경고 제거 처리 " /><published>2024-08-26T00:00:00+00:00</published><updated>2024-08-26T00:00:00+00:00</updated><id>https://lahuman.github.io/sprinboot3_wrong_loggings</id><content type="html" xml:base="https://lahuman.github.io/sprinboot3_wrong_loggings/">&lt;h1 id=&quot;1-redis-에서-repository-scan&quot;&gt;1. redis 에서 repository scan&lt;/h1&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;2024-08-27T10:38:09.702+09:00  INFO &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;_] 46726 &lt;span class=&quot;nt&quot;&gt;---&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;           main] .RepositoryConfigurationExtensionSupport &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;320&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; : Spring Data Redis - Could not safely identify store assignment &lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;repository candidate interface io.github.lahuman.domain.tip.ContentRepository&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;preferred&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;, or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;Redis에서 리포지토리 스캔과 관련된 문제를 해결하기 위해 Spring Data Redis가 리포지토리 후보 인터페이스에 대한 저장소 할당을 안전하게 식별하지 못한다는 경고가 발생합니다. 이 경우, &lt;code class=&quot;highlighter-rouge&quot;&gt;@RedisHash&lt;/code&gt;를 엔티티에 적용하거나, 리포지토리를 KeyValueRepository를 상속하도록 하면 이 경고를 해결할 수 있습니다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;하지만, RedisTemplate을 사용하고 리포지토리 스캔이 필요하지 않다면, application.yml에서 다음과 같이 설정할 수 있습니다:&lt;/p&gt;

&lt;div class=&quot;language-yml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;spring&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;redis&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;repositories&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;enabled&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;false&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;위와 같이 설정시 redis Repository는 사용하지 않고 jpa Repository만 사용합니다.&lt;/p&gt;

&lt;h1 id=&quot;2-jap-open-in-view-설정-경고&quot;&gt;2. jap open-in-view 설정 경고&lt;/h1&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;2024-08-27T10:38:15.984+09:00  WARN &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;_] 46726 &lt;span class=&quot;nt&quot;&gt;---&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;           main] JpaBaseConfiguration&lt;span class=&quot;nv&quot;&gt;$JpaWebConfiguration&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;232&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; : spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;spring.jpa.open-in-view 설정은 Spring에서 영속성 컨텍스트가 클라이언트 요청의 모든 뷰 렌더링이 완료될 때까지 유지되도록 하는 옵션입니다. 이는 기본적으로 활성화되어 있으며, 뷰 렌더링 중에 데이터베이스 쿼리가 발생할 수 있습니다. 그러나 이 설정은 리소스를 많이 소모할 수 있고, 대규모 애플리케이션에서 성능 문제를 일으킬 수 있습니다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;특히 GraphQL과 같은 동적 데이터 구조에서 이 설정을 끄는 것은 데이터베이스 커넥션이 빠르게 해제되기 때문에 LazyInitializationException과 같은 문제가 발생할 수 있습니다. 따라서 spring.jpa.open-in-view를 false로 설정하는 것은 신중히 고려해야 합니다.&lt;/p&gt;

&lt;p&gt;예를 들어, 대부분의 응답을 DTO로 변환하여 lazy loading이 필요 없는 경우에는 이 설정을 비활성화하는 것이 더 나을 수 있습니다.&lt;/p&gt;

&lt;p&gt;저의 경우 대부분의 response를 DTO로 변환하기 때문에 해당 옵션을 false로 전환하였습니다.&lt;/p&gt;

&lt;div class=&quot;language-yml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;spring&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;jpa&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;open-in-view&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;false&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h1 id=&quot;3-aliasfor-사용-권장&quot;&gt;3. @AliasFor 사용 권장&lt;/h1&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;2024-08-27T10:38:16.094+09:00  WARN &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;_] 46726 &lt;span class=&quot;nt&quot;&gt;---&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;           main] o.s.c.annotation.AnnotationTypeMapping   &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;321&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; : Support &lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;convention-based annotation attribute overrides is deprecated and will be removed &lt;span class=&quot;k&quot;&gt;in &lt;/span&gt;Spring Framework 6.2. Please annotate the following attributes &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; @io.lahuman.common.annotation.LoginUser with appropriate @AliasFor declarations: &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;name]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Spring Framework 6.2에서는 컨벤션 기반의 애노테이션 속성 재정의가 더 이상 지원되지 않으며, 이를 해결하기 위해서는 @AliasFor를 명시적으로 사용해야 합니다. 이를 통해 애노테이션 속성을 다른 애노테이션 속성과 연관시켜 보다 명확한 의미를 부여할 수 있습니다.&lt;/p&gt;

&lt;p&gt;예를 들어, LoginUser 애노테이션의 name 속성을 @AliasFor로 Parameter 애노테이션의 name 속성과 연결하면, 애노테이션의 동작이 명확해지고, 의도하지 않은 동작을 방지할 수 있습니다.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;package&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;io&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;lahuman&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;common&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;annotation&lt;/span&gt;

&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;io.swagger.v3.oas.annotations.Parameter&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.springframework.core.annotation.AliasFor&lt;/span&gt;

&lt;span class=&quot;nd&quot;&gt;@Target&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AnnotationTarget&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;VALUE_PARAMETER&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@Retention&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AnnotationRetention&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;RUNTIME&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@MustBeDocumented&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@Parameter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hidden&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;annotation&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;LoginUser&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AliasFor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;annotation&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;Parameter:&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;nc&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;name:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;userId&quot;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;위와 같이 &lt;code class=&quot;highlighter-rouge&quot;&gt;@get:AliasFor(annotation = Parameter::class)&lt;/code&gt;을 선언하여 주면 간단하게 처리 됩니다.&lt;/p&gt;

&lt;h1 id=&quot;참고자료&quot;&gt;참고자료&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://velog.io/@daoh98/SpringJPA-Redis-Repository-scan-%EB%AC%B8%EC%A0%9C&quot;&gt;[Spring]JPA Redis Repository scan 문제&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://livelyoneweek.tistory.com/57&quot;&gt;spring.jpa.open-in-view 란?&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name></name></author><category term="springboot3" /><category term="redis" /><category term="scan" /><summary type="html">서버 기동시거슬리는 경고를 제거해봅니다.</summary></entry><entry><title type="html">버크만 검사 후기</title><link href="https://lahuman.github.io/20240810/" rel="alternate" type="text/html" title="버크만 검사 후기" /><published>2024-08-10T00:00:00+00:00</published><updated>2024-08-10T00:00:00+00:00</updated><id>https://lahuman.github.io/20240810</id><content type="html" xml:base="https://lahuman.github.io/20240810/">&lt;h1 id=&quot;회사에서-팀-단위로-버크만-검사를-하고-결과를-공유하는-시간을-가졌습니다&quot;&gt;회사에서 팀 단위로 버크만 검사를 하고, 결과를 공유하는 시간을 가졌습니다.&lt;/h1&gt;

&lt;blockquote&gt;
  &lt;p&gt;버크만 검사는 사람들이 어떻게 행동하고 생각하는지, 그리고 어떤 환경에서 가장 잘 일할 수 있는지를 알아보는 심리 검사예요. 이 검사는 우리가 어떤 일에 관심이 있는지, 어떤 상황에서 스트레스를 받는지, 그리고 다른 사람들과 어떻게 잘 협력할 수 있는지를 알려줍니다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;버크만 검사를 팀 단위로 하고 느낀 점은, 적어도 동료의 행동을 조금은 이해할 수 있게되었다는 점입니다.&lt;/p&gt;

&lt;p&gt;추가로 조금은 더 가까워진 느낌이 드는 시간이었습니다. :)&lt;/p&gt;

&lt;h2 id=&quot;검사-결과&quot;&gt;검사 결과&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/post_img/birkman_method.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;</content><author><name></name></author><category term="birkman" /><summary type="html">동료들과 함께 서로의 생각을 나누는 시간이 되었습니다.</summary></entry><entry><title type="html">Spring boot 3 에서 Virtual Thread 사용시 오류</title><link href="https://lahuman.github.io/sprinboot3_close_wait/" rel="alternate" type="text/html" title="Spring boot 3 에서 Virtual Thread 사용시 오류" /><published>2024-08-10T00:00:00+00:00</published><updated>2024-08-10T00:00:00+00:00</updated><id>https://lahuman.github.io/sprinboot3_close_wait</id><content type="html" xml:base="https://lahuman.github.io/sprinboot3_close_wait/">&lt;h1 id=&quot;서버에서-응답이-오지-않습니다&quot;&gt;서버에서 응답이 오지 않습니다.&lt;/h1&gt;

&lt;h2 id=&quot;240826-추가-내용-동일한-오류가-netflix-에서도-발생했었네요-좀-더-상세하게-원인-분석이-되어-있습니다&quot;&gt;[24.08.26 추가 내용] &lt;a href=&quot;https://netflixtechblog.com/java-21-virtual-threads-dude-wheres-my-lock-3052540e231d&quot;&gt;동일한 오류가 Netflix&lt;/a&gt; 에서도 발생했었네요. 좀 더 상세하게 원인 분석이 되어 있습니다.&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;Netflix 엔지니어는 SpringBoot 3 및 임베디드 Tomcat이 있는 Java 21에서 실행되는 서비스에서 간헐적인 시간 초과 및 응답하지 않는 인스턴스를 관찰했습니다. JVM 인스턴스가 활성 상태를 유지했음에도 불구하고 트래픽을 제공하는 것을 중단했으며, 이는 상태에 갇힌 소켓이 상당히 증가한 것이 특징이었습니다. &lt;strong&gt;이 상태는 원격 측의 TCP 연결을 닫았지만 로컬 측이 아직 끝을 닫지 않아 소켓이 대기 상태로 발생합니다.&lt;/strong&gt; 이에 대한 자세한 내용은 &lt;a href=&quot;https://datatracker.ietf.org/doc/html/rfc793#section-3.2&quot;&gt;RFC 793&lt;/a&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;closeWait&lt;/code&gt; 의 용어 섹션 에서 확인할 수 있습니다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;현재는 해결 방법이 없고, JDK 23이상 업데이트를 기다려야 합니다.&lt;/p&gt;

&lt;h2 id=&quot;나의-경험&quot;&gt;나의 경험&lt;/h2&gt;

&lt;p&gt;잘 돌아가던 spring boot 3 안의 톰켓에서 갑자기 응답이 없어졌습니다.&lt;/p&gt;

&lt;p&gt;원인으로 여러가지를 테스트 해봤는데 결국 찾은 원인은&lt;/p&gt;

&lt;div class=&quot;language-yml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;spring&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;threads&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;virtual&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;enabled&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;true&lt;/span&gt;                   &lt;span class=&quot;c1&quot;&gt;# virtual thread 활성화&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;위의 옵션이었습니다.&lt;/p&gt;

&lt;h2 id=&quot;구성-환경-상세&quot;&gt;구성 환경 상세&lt;/h2&gt;

&lt;p&gt;인프라 내부 구성은 AWS EKS 기반의 조금 복잡한 구성을 갖습니다.&lt;/p&gt;

&lt;div class=&quot;mermaid&quot;&gt; 
sequenceDiagram;
    NLB-&amp;gt;&amp;gt;+ALB: 요청;
    ALB-&amp;gt;&amp;gt;+WAS: 요청;
    WAS--&amp;gt;&amp;gt;-ALB: 응답;
    ALB--&amp;gt;&amp;gt;-NLB: 응답;
    box EKS;
        participant ALB;
        participant WAS;
    end;
&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;kotlin 1.9.23&lt;/code&gt;를 기반으로 &lt;code class=&quot;highlighter-rouge&quot;&gt;spring boot 3.2.2&lt;/code&gt;과 함께 사용하고 있으며, 로컬에서는 재현되지 않습니다.&lt;/p&gt;

&lt;p&gt;로컬이나 개발 환경에서는 문제가 없었지만, 이상하게 특정 환경에서 connection이 끊기지 않고, &lt;code class=&quot;highlighter-rouge&quot;&gt;CLOSE_WAIT&lt;/code&gt;로 남아 서버로 요청의 응답이 오지 않았습니다.&lt;/p&gt;

&lt;p&gt;내부 구성 때문에 발생한 건지 virtual thread 와 어느 부분의 충돌인지는 찾지 못했지만 해당 옵션을 제거하고 문제가 재발하지 않았습니다.&lt;/p&gt;

&lt;p&gt;신기술을 사용할때는 꼭 많이 테스트 해봐야겠습니다.&lt;/p&gt;

&lt;h2 id=&quot;참고-자료&quot;&gt;참고 자료&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://netflixtechblog.com/java-21-virtual-threads-dude-wheres-my-lock-3052540e231d&quot;&gt;Java 21 Virtual Threads - Dude, Where’s My Lock?&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name></name></author><category term="springboot3" /><category term="virtualthread" /><category term="close_wait" /><summary type="html">CLOSE_WAIT가 Thread pool을 가득 채워서 생성됩니다.</summary></entry><entry><title type="html">3년차 회고</title><link href="https://lahuman.github.io/review_last_year/" rel="alternate" type="text/html" title="3년차 회고" /><published>2024-08-08T00:00:00+00:00</published><updated>2024-08-08T00:00:00+00:00</updated><id>https://lahuman.github.io/review_last_year</id><content type="html" xml:base="https://lahuman.github.io/review_last_year/">&lt;h1 id=&quot;3년차-회고&quot;&gt;3년차 회고&lt;/h1&gt;

&lt;p&gt;근래 들은 말은 &lt;code class=&quot;highlighter-rouge&quot;&gt;이젠 적응 했다.&lt;/code&gt; 입니다.&lt;/p&gt;

&lt;p&gt;변화를 이끌고, 새로운 도전을 해보기 위해서 당당(?) 하게 입사하였지만,&lt;/p&gt;

&lt;p&gt;금융권의 무적권법(?)에 멍멍 털리고 적응하고 있습니다.&lt;/p&gt;

&lt;p&gt;이번에 면담에서 많이 적응 한거 같다는 이야기와 적응하지 않았으면 한다는 주문을 받았습니다.&lt;/p&gt;

&lt;p&gt;계속 부딪쳐서 변화를 이끌어 주기를 바라는 내용이었는데,&lt;/p&gt;

&lt;p&gt;살짝 지치네요. 변화를 이끌 연료가 다한 느낌입니다.&lt;/p&gt;

&lt;p&gt;올해는 잘 마무리 해야겠습니다.&lt;/p&gt;</content><author><name></name></author><category term="회고" /><summary type="html">2021년 말에 입사해서, 2024년도 8월이 되었습니다.</summary></entry><entry><title type="html">typeorm 사용시 소수점 조회</title><link href="https://lahuman.github.io/typeorm_number_entity_decimal/" rel="alternate" type="text/html" title="typeorm 사용시 소수점 조회" /><published>2024-07-14T00:00:00+00:00</published><updated>2024-07-14T00:00:00+00:00</updated><id>https://lahuman.github.io/typeorm_number_entity_decimal</id><content type="html" xml:base="https://lahuman.github.io/typeorm_number_entity_decimal/">&lt;h1 id=&quot;typeorm에서-엔티티의-number-타입-필드에서-소수점-표현&quot;&gt;TypeORM에서 엔티티의 number 타입 필드에서 소수점 표현&lt;/h1&gt;

&lt;p&gt;이 글에서는 TypeORM을 사용하여 소수점을 포함하는 number 타입을 정의하고 관리하는 방법에 대해 설명합니다. 또한, 샘플 엔티티 코드를 통해 구현 방법을 보여 드리겠습니다.&lt;/p&gt;

&lt;h2 id=&quot;샘플-엔티티-코드&quot;&gt;샘플 엔티티 코드&lt;/h2&gt;

&lt;p&gt;아래의 샘플 코드는 Product라는 엔티티에서 가격(price)을 number 타입으로 처리하는 예를 보여줍니다. 이때, double 또는 decimal 타입을 사용하여 소수점을 정확하게 관리할 수 있습니다.&lt;/p&gt;

&lt;div class=&quot;language-typescript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Entity&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;PrimaryGeneratedColumn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Column&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'typeorm'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;Entity&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Product&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;PrimaryGeneratedColumn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;number&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;p&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;Column&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'decimal'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;precision&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;scale&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;price&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;number&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;@Column({ type: 'decimal', precision: 10, scale: 2 })&lt;/code&gt;: 이 구문은 price 필드가 최대 10자리 숫자를 가질 수 있으며, 그 중 소수점 이하 두 자리까지 저장할 수 있음을 나타냅니다. decimal 타입은 소수점을 포함한 전체 길이와 소수점 이하의 길이를 정밀하게 정의할 수 있어 금융 계산 등 정확도가 요구되는 상황에서 유용합니다.&lt;/p&gt;

&lt;h2 id=&quot;소수점-처리의-중요성&quot;&gt;소수점 처리의 중요성&lt;/h2&gt;
&lt;p&gt;소수점 처리는 특히 금액이나 계산의 정밀도가 중요한 분야에서 필수적입니다. 예를 들어, 금융 서비스나 과학적 계산에서는 소수점 이하의 작은 오차도 큰 문제를 일으킬 수 있습니다. 따라서 decimal 타입을 사용하여 데이터의 정확성을 보장하는 것이 좋습니다.&lt;/p&gt;

&lt;h2 id=&quot;결론&quot;&gt;결론&lt;/h2&gt;
&lt;p&gt;TypeORM에서 decimal 타입을 사용하는 것은 소수점을 포함한 데이터를 정확하게 처리하고자 할 때 매우 유용합니다. 이는 데이터의 정확성과 일관성을 유지하며, 실수로 인한 오류를 최소화하는 데 도움이 됩니다.&lt;/p&gt;</content><author><name></name></author><category term="typeorm" /><category term="decimal" /><summary type="html">처리를 잘못하면 상수만 표기 됩니다.</summary></entry><entry><title type="html">iOS 면접 질의응답</title><link href="https://lahuman.github.io/ios_interview_qa/" rel="alternate" type="text/html" title="iOS 면접 질의응답 " /><published>2024-06-25T00:00:00+00:00</published><updated>2024-06-25T00:00:00+00:00</updated><id>https://lahuman.github.io/ios_interview_qa</id><content type="html" xml:base="https://lahuman.github.io/ios_interview_qa/">&lt;h1 id=&quot;ios-면접-질의응답&quot;&gt;iOS 면접 질의응답&lt;/h1&gt;

&lt;h2 id=&quot;1-swift와-objective-c의-차이점은-무엇인가요&quot;&gt;1. Swift와 Objective-C의 차이점은 무엇인가요?&lt;/h2&gt;

&lt;p&gt;Swift는 Objective-C에 비해 타입 안전성이 뛰어나며, 가독성이 높은 문법을 제공합니다. Swift는 메모리 관리를 자동화하는 ARC(Automatic Reference Counting)를 지원하고, 런타임 오류를 줄이는 안전한 프로그래밍 패턴을 채택하고 있습니다. 반면, Objective-C는 C언어를 기반으로 하여 C 라이브러리와의 호환성이 뛰어나지만, 코드가 복잡할 수 있습니다.&lt;/p&gt;

&lt;h2 id=&quot;2-ios-앱-개발에서-사용되는-주요-프레임워크는-무엇인가요&quot;&gt;2. iOS 앱 개발에서 사용되는 주요 프레임워크는 무엇인가요?&lt;/h2&gt;

&lt;p&gt;iOS 개발에는 여러 프레임워크가 사용되며, 가장 중요한 것은 UIKit(사용자 인터페이스), Foundation(기본 데이터 관리 및 네트워킹), Core Data(지속적 데이터 저장 및 관리)입니다. 이 프레임워크들은 앱의 다양한 측면을 지원하여 개발 과정을 효율적으로 만듭니다.&lt;/p&gt;

&lt;h2 id=&quot;3-mvc-mvvm-viper와-같은-아키텍처-패턴을-설명해주세요&quot;&gt;3. MVC, MVVM, VIPER와 같은 아키텍처 패턴을 설명해주세요.&lt;/h2&gt;

&lt;p&gt;MVC (Model-View-Controller): 가장 기본적인 아키텍처 패턴으로, 애플리케이션을 모델, 뷰, 컨트롤러 세 부분으로 나누어 관리합니다.
MVVM (Model-View-ViewModel): 뷰와 모델 사이의 의존성을 줄이기 위해 뷰모델을 사용합니다. 이는 데이터 바인딩을 통해 뷰의 코드를 간소화할 수 있게 해 줍니다.
VIPER (View-Interactor-Presenter-Entity-Router): 각 부분이 하나의 책임만을 가지도록 설계된 아키텍처로, 큰 프로젝트에서 효율적인 유지보수를 가능하게 합니다.&lt;/p&gt;

&lt;h2 id=&quot;4-auto-layout을-사용하는-이유와-주요-기능에-대해-설명해주세요&quot;&gt;4. Auto Layout을 사용하는 이유와 주요 기능에 대해 설명해주세요.&lt;/h2&gt;

&lt;p&gt;Auto Layout은 다양한 화면 크기와 방향에서 일관된 레이아웃을 유지할 수 있도록 도와줍니다. 이는 제약 조건을 기반으로 요소들이 화면 내에서 어떻게 배치되고 크기가 조정되는지를 정의하여, 동적으로 화면을 구성할 수 있게 합니다.&lt;/p&gt;

&lt;h2 id=&quot;5-core-data의-주요-개념과-사용법을-설명해주세요&quot;&gt;5. Core Data의 주요 개념과 사용법을 설명해주세요.&lt;/h2&gt;

&lt;p&gt;Core Data는 객체 그래프 관리와 영구 저장소로의 객체 데이터의 지속성을 관리하는 프레임워크입니다. 데이터 모델러를 통해 데이터 구조를 시각적으로 구성할 수 있으며, SQLite, XML, Binary 등 다양한 저장 형식을 지원합니다. 관계, 가져오기, 저장 과정의 최적화를 통해 효율적인 데이터 관리가 가능합니다.&lt;/p&gt;

&lt;h2 id=&quot;6-메모리-관리-방법에-대해-설명하고-arc가-어떻게-작동하는지-설명해주세요&quot;&gt;6. 메모리 관리 방법에 대해 설명하고, ARC가 어떻게 작동하는지 설명해주세요.&lt;/h2&gt;

&lt;p&gt;iOS에서는 ARC를 사용하여 메모리 관리를 자동화합니다. ARC는 객체에 대한 참조 횟수를 추적하여, 참조 횟수가 0이 되면 해당 객체를 메모리에서 해제합니다. 개발자는 강한 참조(strong reference)와 약한 참조(weak reference)를 적절히 사용하여 순환 참조를 방지해야 하며, 이를 통해 메모리 누수를 예방할 수 있습니다.&lt;/p&gt;

&lt;h2 id=&quot;7-app-store에-앱을-배포하는-과정을-단계별로-설명해주세요&quot;&gt;7. App Store에 앱을 배포하는 과정을 단계별로 설명해주세요.&lt;/h2&gt;

&lt;p&gt;앱을 App Store에 배포하는 과정은 다음과 같습니다:&lt;/p&gt;

&lt;p&gt;앱 개발 및 로컬 테스트: 개발자는 앱을 개발하고 로컬 환경에서 충분히 테스트합니다.
빌드 및 업로드: 앱을 Xcode를 통해 빌드하고, 모든 앱 정보와 함께 iTunes Connect (현재는 App Store Connect)에 업로드합니다.
리뷰 프로세스: 업로드된 앱은 Apple의 리뷰 프로세스를 거칩니다. 이 과정에서 앱의 적합성이 평가됩니다.
승인 및 릴리스 관리: 승인이 완료되면, 개발자는 앱의 릴리스를 관리할 수 있으며, 사용자는 App Store에서 앱을 다운로드할 수 있습니다.&lt;/p&gt;

&lt;h2 id=&quot;8-최신-ios-업데이트에서-추가된-기능-중-하나를-선택하고-그-기능이-앱-개발에-어떻게-활용될-수-있는지-설명해주세요&quot;&gt;8. 최신 iOS 업데이트에서 추가된 기능 중 하나를 선택하고, 그 기능이 앱 개발에 어떻게 활용될 수 있는지 설명해주세요.&lt;/h2&gt;

&lt;p&gt;iOS 15에서 추가된 SharePlay 기능은 멀티미디어 공유를 가능하게 하여 앱 개발자들이 새로운 형태의 상호 작용을 앱에 통합할 수 있도록 합니다. 개발자는 SharePlay API를 사용하여 사용자들이 비디오를 시청하거나 음악을 듣는 동안 서로 상호 작용할 수 있는 기능을 개발할 수 있습니다. 이를 통해 사용자 경험을 향상시키고 앱의 매력을 증가시킬 수 있습니다.&lt;/p&gt;

&lt;h2 id=&quot;9-비동기-프로그래밍과-gcd-operationqueue의-사용-예를-설명해주세요&quot;&gt;9. 비동기 프로그래밍과 GCD, OperationQueue의 사용 예를 설명해주세요.&lt;/h2&gt;

&lt;p&gt;비동기 프로그래밍은 UI가 응답을 멈추지 않게 하면서 백그라운드에서 데이터 로딩, 이미지 다운로드, 데이터 처리와 같은 작업을 수행합니다. GCD(Grand Central Dispatch)는 작업을 다양한 큐에 넣어 비동기적으로 실행할 수 있게 해 주며, 멀티코어 하드웨어의 잠재력을 최대한 활용할 수 있습니다. 예를 들어, 이미지를 다운로드하고 처리하는 작업을 백그라운드 스레드에서 실행한 다음, 메인 스레드에서 UI를 업데이트하는 것입니다. OperationQueue는 GCD보다 더 고수준의 API를 제공하며, 작업 간의 종속성을 설정하고 실행을 취소하거나 일시 중지할 수 있는 기능을 제공합니다.&lt;/p&gt;

&lt;h2 id=&quot;10-copy-on-write를-설명해주세요&quot;&gt;10. “Copy on Write”를 설명해주세요.&lt;/h2&gt;

&lt;p&gt;Swift의 “Copy on Write” (CoW) 메커니즘은 특히 값 타입(Value Types)에서 메모리 사용을 최적화하는 데 유용합니다. Swift에서는 구조체(struct), 열거형(enum), 그리고 기본 데이터 타입들(int, string, array 등)을 값 타입으로 처리합니다. 값 타입은 데이터를 전달할 때 원본의 복사본을 만들어 전달합니다. 그러나 이 과정이 항상 즉각적으로 발생하는 것은 아니며, Copy on Write 메커니즘이 이를 최적화합니다.&lt;/p&gt;</content><author><name></name></author><category term="ios" /><category term="interview" /><summary type="html">chat-gpt가 추천하는 면접 질문 모음</summary></entry><entry><title type="html">JPA 에서 FLUSH 처리시 실행 순서</title><link href="https://lahuman.github.io/jpa_flush_order/" rel="alternate" type="text/html" title="JPA 에서 FLUSH 처리시 실행 순서" /><published>2024-06-12T00:00:00+00:00</published><updated>2024-06-12T00:00:00+00:00</updated><id>https://lahuman.github.io/jpa_flush_order</id><content type="html" xml:base="https://lahuman.github.io/jpa_flush_order/">&lt;h1 id=&quot;hibernate는-연관된-엔터티-상태-작업의-순서대로-sql-문을-실행하지-않습니다&quot;&gt;Hibernate는 연관된 엔터티 상태 작업의 순서대로 SQL 문을 실행하지 않습니다.&lt;/h1&gt;

&lt;p&gt;다음과 같은 코드가 있다고 예상할 경우&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;Person&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;person&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;entityManager&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;find&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Person&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1L&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;entityManager&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;remove&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;person&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;Person&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;newPerson&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Person&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;newPerson&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2L&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;newPerson&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;John Doe&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;entityManager&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;persist&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;newPerson&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;저희는 DELETE 질의 이후 INSERT 질의를 기대 합니다.&lt;/p&gt;

&lt;p&gt;하지만 동작은 아래와 같습니다.&lt;/p&gt;

&lt;div class=&quot;language-sql highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
&lt;span class=&quot;k&quot;&gt;INSERT&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;INTO&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Person&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;VALUES&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'John Doe'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;L&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;DELETE&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;FROM&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Person&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;WHERE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;SQL 문이 실행되는 순서는 엔티티의 상태 변화가 아닌, &lt;code class=&quot;highlighter-rouge&quot;&gt;ActionQueue&lt;/code&gt;에 의해서 지정됩니다.&lt;/p&gt;

&lt;p&gt;ActionQueue에서는 다음 순서로 모든 작업을 실행합니다 .&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;OrphanRemovalAction&lt;/li&gt;
  &lt;li&gt;EntityInsertAction또는EntityIdentityInsertAction&lt;/li&gt;
  &lt;li&gt;EntityUpdateAction&lt;/li&gt;
  &lt;li&gt;QueuedOperationCollectionAction&lt;/li&gt;
  &lt;li&gt;CollectionRemoveAction&lt;/li&gt;
  &lt;li&gt;CollectionUpdateAction&lt;/li&gt;
  &lt;li&gt;CollectionRecreateAction&lt;/li&gt;
  &lt;li&gt;EntityDeleteAction&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;만약, 꼭 삭제를 먼저 실행하고 싶다면 다음과 같이 강제로 flush를 호출 해야 합니다.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;Person&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;person&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;entityManager&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;find&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Person&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1L&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;entityManager&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;remove&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;person&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;entityManager&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;flush&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 강제 flush로 SQL 실행 &lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;Person&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;newPerson&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Person&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;newPerson&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2L&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;newPerson&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;John Doe&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;entityManager&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;persist&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;newPerson&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;마치며&quot;&gt;마치며&lt;/h2&gt;

&lt;p&gt;이 부분을 잘 이해 못해서 삽질을 오래 하였습니다.&lt;/p&gt;

&lt;p&gt;강제로 flush 하기 보다 &lt;code class=&quot;highlighter-rouge&quot;&gt;OrphanRemovalAction&lt;/code&gt; 를 활용하여 처리 하는게 좋게 보여지기도 합니다.&lt;/p&gt;

&lt;h2 id=&quot;참고-자료&quot;&gt;참고 자료&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.jboss.org/hibernate/orm/6.1/userguide/html_single/Hibernate_User_Guide.html#flushing-order&quot;&gt;6.5. Flush operation order&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name></name></author><category term="jpa" /><category term="flush" /><summary type="html">함수가 종료되고 영속성 데이터가 flush 될때, 순서가 있습니다.</summary></entry><entry><title type="html">Python 3.12 설치시 Openssl 모듈 버전 확인이 필요 합니다.</title><link href="https://lahuman.github.io/python-3.12_openssl-1.1.1/" rel="alternate" type="text/html" title="Python 3.12 설치시 Openssl 모듈 버전 확인이 필요 합니다." /><published>2024-05-30T00:00:00+00:00</published><updated>2024-05-30T00:00:00+00:00</updated><id>https://lahuman.github.io/python-3.12_openssl-1.1.1</id><content type="html" xml:base="https://lahuman.github.io/python-3.12_openssl-1.1.1/">&lt;h1 id=&quot;python-312-설치-시-openssl-모듈-버전-확인이-필요합니다&quot;&gt;Python 3.12 설치 시 OpenSSL 모듈 버전 확인이 필요합니다&lt;/h1&gt;

&lt;p&gt;Python 3.12을 설치할 때 발생할 수 있는 오류 중 하나는 SSL 인증서와 관련된 문제입니다. 
특히, pip 설치 시 다음과 같은 오류를 만날 수 있습니다:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Could not fetch URL https://pypi.org/simple/pip/: There was a problem confirming the ssl certificate: HTTPSConnectionPool&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;host&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'pypi.org'&lt;/span&gt;, &lt;span class=&quot;nv&quot;&gt;port&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;443&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;: Max retries exceeded with url: /simple/pip/ &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;Caused by SSLError&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Can't connect to HTTPS URL because the SSL module is not available.&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt; - skipping
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;이 오류는 Python 설치 시 SSL 모듈이 제대로 구성되지 않았기 때문에 발생합니다. Python 3.12 설치 후 SSL 모듈이 제대로 작동하는지 확인하는 것이 중요합니다.&lt;/p&gt;

&lt;p&gt;다음은 AWSLinux 기반의 Docker Container 설치시 명령어입니다.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;from amazonlinux &lt;span class=&quot;c&quot;&gt;# 1&lt;/span&gt;

RUN  yum update &lt;span class=&quot;nt&quot;&gt;--security&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--bugfix&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-y&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;# 2&lt;/span&gt;

RUN yum groupinstall &lt;span class=&quot;s2&quot;&gt;&quot;Development Tools&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-y&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;# 3&lt;/span&gt;
RUN yum install openssl11 openssl11-devel  libffi-devel bzip2-devel wget &lt;span class=&quot;nt&quot;&gt;-y&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;# 3 + opnessl 1.1.1 설치&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# 4&lt;/span&gt;
WORKDIR /usr/src
RUN wget https://www.python.org/ftp/python/3.12.2/Python-3.12.2.tgz 
RUN  &lt;span class=&quot;nb&quot;&gt;tar &lt;/span&gt;xzf Python-3.12.2.tgz 

&lt;span class=&quot;c&quot;&gt;# 5 &lt;/span&gt;
WORKDIR /usr/src/Python-3.12.2
RUN ./configure &lt;span class=&quot;nt&quot;&gt;--enable-optimizations&lt;/span&gt;
RUN make &lt;span class=&quot;nt&quot;&gt;-j&lt;/span&gt; 8
RUN make altinstall

RUN python3.12 &lt;span class=&quot;nt&quot;&gt;--version&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;# 6&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# 7&lt;/span&gt;
RUN curl https://bootstrap.pypa.io/get-pip.py &lt;span class=&quot;nt&quot;&gt;-o&lt;/span&gt; get-pip.py
RUN python3.12 get-pip.py  &lt;span class=&quot;nt&quot;&gt;--trusted-host&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;files.pythonhosted.org &lt;span class=&quot;nt&quot;&gt;--trusted-host&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;pypi.org
RUN pip3.12 &lt;span class=&quot;nt&quot;&gt;--version&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# 8 &lt;/span&gt;
RUN ln &lt;span class=&quot;nt&quot;&gt;-s&lt;/span&gt; /usr/local/bin/python3.12 /usr/bin/python3 &amp;amp; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    ln &lt;span class=&quot;nt&quot;&gt;-s&lt;/span&gt; /usr/local/bin/pip3 /usr/bin/pip3

&lt;span class=&quot;c&quot;&gt;# 9&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# datetime zone setting&lt;/span&gt;
RUN date
RUN mv /etc/localtime /etc/localtime_org
RUN ln &lt;span class=&quot;nt&quot;&gt;-s&lt;/span&gt; /usr/share/zoneinfo/Asia/Seoul /etc/localtime
RUN date

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;dockerfile은-다음-작업을-수행합니다&quot;&gt;Dockerfile은 다음 작업을 수행합니다&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;Amazon Linux 이미지를 사용하여 Docker 컨테이너를 생성합니다.&lt;/li&gt;
  &lt;li&gt;보안 및 버그 수정 업데이트를 수행합니다.&lt;/li&gt;
  &lt;li&gt;개발 도구 및 필요한 라이브러리를 설치합니다.&lt;/li&gt;
  &lt;li&gt;Python 3.12 소스 코드를 다운로드하고 압축을 해제합니다.&lt;/li&gt;
  &lt;li&gt;Python 3.12를 OpenSSL 지원과 함께 구성하고 컴파일합니다.&lt;/li&gt;
  &lt;li&gt;Python 및 Pip의 버전을 확인하여 설치가 올바르게 되었는지 검증합니다.&lt;/li&gt;
  &lt;li&gt;pip를 설치 하고 올바르게 설치 되었는지 검증합니다.&lt;/li&gt;
  &lt;li&gt;Python과 Pip에 대한 심볼릭 링크를 생성하여 /usr/bin 디렉토리에서 사용할 수 있도록 설정합니다.&lt;/li&gt;
  &lt;li&gt;시간대를 설정하여 시스템 시간대를 Asia/Seoul로 변경합니다.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;이 Dockerfile을 사용하면 Python 3.12와 Pip을 포함한 개발 환경을 AWS Linux 기반의 Docker 컨테이너에서 설정할 수 있습니다.&lt;/p&gt;

&lt;h2 id=&quot;참고-자료&quot;&gt;참고 자료&lt;/h2&gt;

&lt;p&gt;Python 3.12의 SSL 모듈에 대한 더 자세한 내용은 &lt;a href=&quot;https://docs.python.org/ko/3.12/library/ssl.html&quot;&gt;공식 문서&lt;/a&gt;를 참고하세요. 이 문서에는 SSL 모듈의 다양한 기능과 설정 방법이 자세히 설명되어 있습니다.&lt;/p&gt;</content><author><name></name></author><category term="python" /><category term="install" /><summary type="html">pip 로 모듈 설치 등에서 SSL 오류 발생</summary></entry></feed>
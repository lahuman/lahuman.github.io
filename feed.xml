<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.6.3">Jekyll</generator><link href="https://lahuman.github.io/feed.xml" rel="self" type="application/atom+xml" /><link href="https://lahuman.github.io/" rel="alternate" type="text/html" /><updated>2024-05-09T12:16:10+00:00</updated><id>https://lahuman.github.io/feed.xml</id><title type="html">lahuman</title><subtitle>열심히 사는 아저씨</subtitle><entry><title type="html">나의 IT 시계는 거꾸로 가는 중…</title><link href="https://lahuman.github.io/phase/" rel="alternate" type="text/html" title="나의 IT 시계는 거꾸로 가는 중..." /><published>2024-05-09T00:00:00+00:00</published><updated>2024-05-09T00:00:00+00:00</updated><id>https://lahuman.github.io/phase</id><content type="html" xml:base="https://lahuman.github.io/phase/">&lt;h1 id=&quot;답답하다&quot;&gt;답답하다&lt;/h1&gt;

&lt;p&gt;회사 내부 보안 파트에서 local pc에서 톰켓(서버)를 실행하면 안된다고 안내가 왔습니다.&lt;/p&gt;

&lt;p&gt;개발을 망분리 환경에서 해야 한다고 해서 욕을 하면서 준비를 하고 있는데, 오늘 다시 한번 바보가 된 기분이 드네요.&lt;/p&gt;

&lt;p&gt;개발 코드는 작성하되, 실제 실행은 개발 서버에서 하라고 안내를 받고 혼자 사용하는 서버도 아닌 여럿이 같이 사용하는 개발 서버의 용도를 모르는게 아닌가라는 생각도 했습니다.&lt;/p&gt;

&lt;p&gt;아니다 이건 잘못되었다고 외쳐보았자 혼자 헛소리 하는 사람이 되었네요.&lt;/p&gt;

&lt;p&gt;그냥 바보로 살아야 하나 고민중입니다.&lt;/p&gt;</content><author><name></name></author><category term="단상" /><summary type="html">금융권이 왜 IT의 무덤인지 다시 알게되는 날입니다.</summary></entry><entry><title type="html">kotlin + jdk21 몇가지 오류</title><link href="https://lahuman.github.io/kotlin_jdk21/" rel="alternate" type="text/html" title="kotlin + jdk21 몇가지 오류" /><published>2024-05-08T00:00:00+00:00</published><updated>2024-05-08T00:00:00+00:00</updated><id>https://lahuman.github.io/kotlin_jdk21</id><content type="html" xml:base="https://lahuman.github.io/kotlin_jdk21/">&lt;h1 id=&quot;최신-jdk-21을-사용하면서-만난-몇가지-오류&quot;&gt;최신 JDK 21을 사용하면서 만난 몇가지 오류&lt;/h1&gt;

&lt;p&gt;jdk21과 kotlin 1.9.22 에서 immutable type인 List에 addFirst와 addLast가동작 합니다&lt;/p&gt;

&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Error, as expected
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;addFirst&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Allowed
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;그 외에도 자잘한 버그가 있네요.&lt;/p&gt;

&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;mySet&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;kotlin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;collections&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;LinkedHashSet&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;()&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;mySet&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;addFirst&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// OK
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mySet&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;addLast&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// OK
//mySet.add(null) // null can not be a value of a non-null type String
&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;myMap&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;kotlin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;collections&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;LinkedHashMap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;()&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;myMap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;putFirst&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;myMap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;putLast&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//myMap[2] = null // null can not be a value of a non-null type TypeVariable(V)
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;kolin에서 jdk 21의 신규 method를 사용하는 건 확인이 필요합니다.&lt;/p&gt;

&lt;p&gt;아마 코틀린 2.0.0 이상에서 해결될 버그라고 되어 있네요.&lt;/p&gt;

&lt;h2 id=&quot;참고자료&quot;&gt;참고자료&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://youtrack.jetbrains.com/issue/KT-64640/Prevent-mutating-SequenceCollection-methods-from-JDK-21-be-available-on-read-only-collections?fbclid=IwZXh0bgNhZW0CMTAAAR1HBDcgUpHV9G4lonTIZCGrDSfCwmfllprNpMWZ7s-SoYxotLYib96Hk0c_aem_AdCwyzm0RzsjJxSLYzcvX9oitCBb6xuKwla2Zo9gH0xF5naFbweR7W12yGpnvpWAeKBMVFUP68hy9GvCDw1edbyB&quot;&gt;Prevent mutating SequenceCollection methods from JDK 21 be available on read-only collections&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://youtrack.jetbrains.com/issue/KT-61223/JDK-21-new-addFirst-addLast-and-putFirst-putLast-methods-allow-adding-nullable-value-for-non-null-types?fbclid=IwZXh0bgNhZW0CMTAAAR2d3AXtvhkRdxnzWmXedaYhmSrr7a3q9cTdtyEcNXrzVZ2sEjHXwt9IAKo_aem_AdD5avxC0u2j8gK3szuwFSoQFHqnuNt4wlEQu2NCgfjCIuAsFazQDJ2ANqQsNdIrNVYzA8hCXihu4xxcSJnc976x&quot;&gt;JDK 21: new addFirst/addLast and putFirst/putLast methods allow adding nullable value for non-null types&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;</content><author><name></name></author><category term="kotlin" /><category term="jdk21" /><summary type="html">이번 프로젝트는 kotlin + jdk21 입니다.</summary></entry><entry><title type="html">Gmail에서 smtp 사용 설정</title><link href="https://lahuman.github.io/gmail_smtp_setting/" rel="alternate" type="text/html" title="Gmail에서 smtp 사용 설정" /><published>2024-04-23T00:00:00+00:00</published><updated>2024-04-23T00:00:00+00:00</updated><id>https://lahuman.github.io/gmail_smtp_setting</id><content type="html" xml:base="https://lahuman.github.io/gmail_smtp_setting/">&lt;h1 id=&quot;gmail-smtp-setting&quot;&gt;Gmail Smtp Setting&lt;/h1&gt;

&lt;blockquote&gt;
  &lt;p&gt;2010년도에 SMTP 설정을 GMAIL내에서 간단하게 했었던 기억이 있습니다. 22년도에 변경 되었다는 내용이 있는데, 뭔가 복잡 복잡 하네요.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;gmail-설정-진행&quot;&gt;GMAIL 설정 진행&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;GMAIL &amp;gt; 톱니바퀴 &amp;gt; 모든 설정 보기 
&lt;img src=&quot;/assets/img/post_img/gmail-setting-1.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;설정 &amp;gt; 전달 및 POP/IMAP
&lt;img src=&quot;/assets/img/post_img/gmail-setting-2.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;app-password-추가&quot;&gt;APP PASSWORD 추가&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;이 메뉴가 검색시 &lt;code class=&quot;highlighter-rouge&quot;&gt;계정 &amp;gt; 보안 &amp;gt; 2단계 인증&lt;/code&gt;에 있다고 되어 있지만, 실제로 보이지 않고 주소 입력을 통해 접근해야 합니다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;https://myaccount.google.com/security 에서 &lt;code class=&quot;highlighter-rouge&quot;&gt;2-step verification&lt;/code&gt; 밑에 app password 메뉴가 존재 하지 않습니다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;https://myaccount.google.com/apppasswords 로 직접 접근해서 추가 하면 됩니다.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/post_img/google_app_password.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;이렇게 수정하고 나면 GMAIL SMTP를 사용할 수 있습니다.&lt;/p&gt;

&lt;p&gt;다음은 사용 예제 입니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/post_img/aultwarden_smtp_example.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;위 화면에서&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;username : xxx@gmail.com&lt;/li&gt;
  &lt;li&gt;password : app password&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;이렇게 설정 하면 됩니다.&lt;/p&gt;

&lt;h2 id=&quot;참고자료&quot;&gt;참고자료&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://support.google.com/mail/thread/4477145/no-app-passwords-under-security-signing-in-to-google-panel?hl=en&quot;&gt;No “App passwords” under “Security” -&amp;gt; “Signing in to Google” panel&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://kincoding.com/entry/Google-Gmail-SMTP-%EC%82%AC%EC%9A%A9%EC%9D%84-%EC%9C%84%ED%95%9C-%EC%84%B8%ED%8C%85&quot;&gt;Google - Gmail SMTP 사용을 위한 세팅&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;</content><author><name></name></author><category term="gmail" /><category term="smtp" /><summary type="html">예전엔 gmail 설정만 하면 되었는데, app password 등을 설정 해야 합니다.</summary></entry><entry><title type="html">git rebase를 알아 봅니다.</title><link href="https://lahuman.github.io/git_rebase_email_username/" rel="alternate" type="text/html" title="git rebase를 알아 봅니다." /><published>2024-04-17T00:00:00+00:00</published><updated>2024-04-17T00:00:00+00:00</updated><id>https://lahuman.github.io/git_rebase_email_username</id><content type="html" xml:base="https://lahuman.github.io/git_rebase_email_username/">&lt;h1 id=&quot;git-rebase-이해하기&quot;&gt;Git Rebase 이해하기&lt;/h1&gt;

&lt;p&gt;Git rebase는 기존 커밋 히스토리를 정리하거나 수정하는 데 사용되는 Git 명령어입니다. 이 명령어를 사용하면 기능 브랜치의 변경 사항을 기반 브랜치(예: master 또는 main)의 최신 상태로 옮겨, 마치 처음부터 그 상태에서 작업한 것처럼 만들 수 있습니다.&lt;/p&gt;

&lt;h2 id=&quot;rebase의-주요-활용&quot;&gt;Rebase의 주요 활용&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;프로젝트 히스토리 정리&lt;/strong&gt;: Rebase를 통해 작업 히스토리를 더 간결하고 명확하게 만듭니다.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;충돌 해결&lt;/strong&gt;: 기능 브랜치 개발 중 메인 브랜치에 발생한 다수의 변경사항을 통합하면서 충돌을 해결할 수 있습니다.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;코드 리뷰 개선&lt;/strong&gt;: 기반 브랜치의 최신 상태로 rebase를 진행하면 코드 리뷰어가 변경점을 더욱 명확하게 확인하고 이해할 수 있습니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;rebase-과정&quot;&gt;Rebase 과정&lt;/h2&gt;

&lt;h3 id=&quot;최신-상태로-브랜치-업데이트&quot;&gt;최신 상태로 브랜치 업데이트&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;strong&gt;Rebase 시작&lt;/strong&gt;: &lt;code class=&quot;highlighter-rouge&quot;&gt;git rebase origin/master&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;충돌 발생 시 해결&lt;/strong&gt;: Git은 충돌이 발생하면 rebase를 일시 중지하고 충돌 해결을 요구합니다. 충돌 해결 후, &lt;code class=&quot;highlighter-rouge&quot;&gt;git add&lt;/code&gt;를 사용해 변경 사항을 스테이징하고 &lt;code class=&quot;highlighter-rouge&quot;&gt;git rebase --continue&lt;/code&gt;를 실행하여 rebase를 계속합니다.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Rebase 완료&lt;/strong&gt;: 충돌이 없을 경우, rebase가 완료되며 로컬 브랜치는 업데이트된 기반 브랜치의 커밋 위에 위치하게 됩니다.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;예제-상황&quot;&gt;예제 상황&lt;/h2&gt;

&lt;h3 id=&quot;시나리오&quot;&gt;시나리오&lt;/h3&gt;

&lt;p&gt;개발자 A는 &lt;code class=&quot;highlighter-rouge&quot;&gt;feature&lt;/code&gt; 브랜치에서 작업 중입니다. 동시에 다른 개발자가 &lt;code class=&quot;highlighter-rouge&quot;&gt;master&lt;/code&gt; 브랜치에 새로운 커밋을 추가했습니다. 개발자 A는 자신의 &lt;code class=&quot;highlighter-rouge&quot;&gt;feature&lt;/code&gt; 브랜치를 &lt;code class=&quot;highlighter-rouge&quot;&gt;master&lt;/code&gt; 브랜치의 최신 상태로 업데이트하고자 합니다.&lt;/p&gt;

&lt;h3 id=&quot;단계별-명령어&quot;&gt;단계별 명령어&lt;/h3&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git checkout feature
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git fetch origin
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git rebase origin/master
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;ol&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;git checkout feature&lt;/code&gt;: 현재 작업 중인 브랜치를 feature로 변경합니다.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;git fetch origin&lt;/code&gt;: 원격 저장소 origin에서 최신 데이터를 로컬로 가져옵니다. 이 명령은 origin/master의 최신 상태를 로컬에 반영합니다.&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;git rebase origin/master&lt;/code&gt;: feature 브랜치의 커밋들을 origin/master의 최신 커밋 위로 재배치합니다.&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;충돌 발생 시: 충돌을 해결하고 git add로 스테이징 후, git rebase –continue로 rebase를 계속합니다.&lt;/li&gt;
      &lt;li&gt;충돌 없이 진행될 경우: 충돌 없이 모든 커밋이 적용되면, feature 브랜치의 헤드는 origin/master의 최신 커밋 다음 위치에 설정됩니다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;이 명령들을 실행함으로써 feature 브랜치는 master 브랜치의 최신 상태를 반영하게 되고, 브랜치 간의 통합이 용이해집니다. 이러한 절차는 팀 내에서 브랜치 관리를 더욱 체계적으로 할 수 있게 도와줍니다.&lt;/p&gt;</content><author><name></name></author><category term="git" /><category term="rebase" /><summary type="html">보통 merge를 많이 사용했는데, 로그가 지저분해져서 싫었다면 rebase를 이용해보셔요</summary></entry><entry><title type="html">리더쉽 그리고 성악설</title><link href="https://lahuman.github.io/leadership/" rel="alternate" type="text/html" title="리더쉽 그리고 성악설" /><published>2024-04-11T00:00:00+00:00</published><updated>2024-04-11T00:00:00+00:00</updated><id>https://lahuman.github.io/leadership</id><content type="html" xml:base="https://lahuman.github.io/leadership/">&lt;h1 id=&quot;리더쉽-그리고-성악설&quot;&gt;리더쉽 그리고 성악설&lt;/h1&gt;

&lt;p&gt;인간은 선한가? 악한가?&lt;/p&gt;

&lt;p&gt;성선설과 성악설이 있습니다.&lt;/p&gt;

&lt;p&gt;니콜로 마키아벨리의 “군주론”은 16세기 초 이탈리아의 정치 상황을 반영한 작품이다. 마키아벨리는 인간의 본성에 대한 성악설적 시각을 바탕으로, 군주가 권력을 유지하고 국가를 안정적으로 통치하기 위해 필요한 정치적 기술과 전략에 대해 논의합니다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;성악설은 인간이 본래부터 이기적이고 자신의 이익을 최우선으로 추구하는 성향을 가지고 있다는 관점입니다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;군주론에서 가장 유명한 내용 중 하나는 &lt;strong&gt;“목적이 수단을 정당화한다”&lt;/strong&gt; 입니다. 마키아벨리는 군주가 권력을 유지하고 국가의 이익을 위해 때로는 비윤리적이거나 잔인한 방법을 사용해야 할 수도 있다고 주장합니다. 이러한 관점은 그의 이름을 따서 &lt;strong&gt;“마키아벨리즘”&lt;/strong&gt;이라고 불리는 정치적 실용주의로 이어졌습니다.&lt;/p&gt;

&lt;p&gt;군주 또는 리더는 선해야 하는지에 대하여 아래와 같은 내용이 있습니다.&lt;/p&gt;

&lt;p&gt;“군주들은 그들이 선하게 행동해야 할지, 그렇지 않을지를 고민할 필요가 없다. 그들의 행동은 오직 권력을 유지하고 국가의 안녕을 증진하는 데에 그 목적이 있어야 한다. 따라서 필요할 때는 선을 행하되, 그 상황이 요구한다면 악행도 서슴지 않아야 한다.”&lt;/p&gt;

&lt;p&gt;어쩌면, 제가 좋은 리더는 선해야 한다고 생각하는것이 잘못된 생각이 아닐까 생각이 됩니다.&lt;/p&gt;

&lt;h2 id=&quot;참고-자료&quot;&gt;참고 자료&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://brunch.co.kr/@shortjisik/98&quot;&gt;쉽게 이해하는 마키아벨리 군주론&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.yes24.com/Product/Goods/122786298&quot;&gt;군주론&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name></name></author><category term="leadership" /><summary type="html">마키아벨리 군주론</summary></entry><entry><title type="html">ubuntu의 nginx의 ssl 인증서 설치</title><link href="https://lahuman.github.io/ssl_certbot_ubuntu_nginx/" rel="alternate" type="text/html" title="ubuntu의 nginx의 ssl 인증서 설치" /><published>2024-04-09T00:00:00+00:00</published><updated>2024-04-09T00:00:00+00:00</updated><id>https://lahuman.github.io/ssl_certbot_ubuntu_nginx</id><content type="html" xml:base="https://lahuman.github.io/ssl_certbot_ubuntu_nginx/">&lt;h1 id=&quot;lets-encrypt를-사용하여-https-자동-구성&quot;&gt;Let’s Encrypt를 사용하여 HTTPS 자동 구성&lt;/h1&gt;

&lt;p&gt;Certbot, Let’s Encrypt 및 ACME(자동 인증서 관리 환경) 프로토콜의 목적은 HTTPS 서버를 설정하고 사람의 개입 없이 브라우저에서 신뢰할 수 있는 인증서를 자동으로 얻을 수 있도록 하는 것입니다. 이는 웹 서버에서 인증서 관리 에이전트를 실행하여 수행됩니다.&lt;/p&gt;

&lt;h2 id=&quot;설치--설정--실행-명령어&quot;&gt;설치 &amp;amp; 설정 &amp;amp; 실행 명령어&lt;/h2&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# 설치&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;snap install &lt;span class=&quot;nt&quot;&gt;--classic&lt;/span&gt; certbot
certbot 2.10.0 from Certbot Project &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;certbot-eff✓&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; installed

&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;ln &lt;span class=&quot;nt&quot;&gt;-s&lt;/span&gt; /snap/bin/certbot /usr/bin/certbot

&lt;span class=&quot;c&quot;&gt;# 설정&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;certbot &lt;span class=&quot;nt&quot;&gt;--nginx&lt;/span&gt;
Saving debug log to /var/log/letsencrypt/letsencrypt.log
Enter email address &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;used &lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;urgent renewal and security notices&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;Enter &lt;span class=&quot;s1&quot;&gt;'c'&lt;/span&gt; to cancel&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;: lahuman@daum.net

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
Please &lt;span class=&quot;nb&quot;&gt;read &lt;/span&gt;the Terms of Service at
https://letsencrypt.org/documents/LE-SA-v1.4-April-3-2024.pdf. You must agree &lt;span class=&quot;k&quot;&gt;in
&lt;/span&gt;order to register with the ACME server. Do you agree?
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;Y&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;es/&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;N&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;o: y

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
Would you be willing, once your first certificate is successfully issued, to
share your email address with the Electronic Frontier Foundation, a founding
partner of the Let&lt;span class=&quot;s1&quot;&gt;'s Encrypt project and the non-profit organization that
develops Certbot? We'&lt;/span&gt;d like to send you email about our work encrypting the web,
EFF news, campaigns, and ways to support digital freedom.
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;Y&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;es/&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;N&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;o: y
Account registered.

Which names would you like to activate HTTPS &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;?
We recommend selecting either all domains, or all domains &lt;span class=&quot;k&quot;&gt;in &lt;/span&gt;a VirtualHost/server block.
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
1: lahuman.zapto.org
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
Select the appropriate numbers separated by commas and/or spaces, or leave input
blank to &lt;span class=&quot;k&quot;&gt;select &lt;/span&gt;all options shown &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;Enter &lt;span class=&quot;s1&quot;&gt;'c'&lt;/span&gt; to cancel&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;:
Requesting a certificate &lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;lahuman.zapto.org

Successfully received certificate.
Certificate is saved at: /etc/letsencrypt/live/lahuman.zapto.org/fullchain.pem
Key is saved at:         /etc/letsencrypt/live/lahuman.zapto.org/privkey.pem
This certificate expires on 2024-07-07.
These files will be updated when the certificate renews.
Certbot has &lt;span class=&quot;nb&quot;&gt;set &lt;/span&gt;up a scheduled task to automatically renew this certificate &lt;span class=&quot;k&quot;&gt;in &lt;/span&gt;the background.

Deploying certificate
Successfully deployed certificate &lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;lahuman.zapto.org to /etc/nginx/sites-enabled/default
Congratulations! You have successfully enabled HTTPS on https://lahuman.zapto.org

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
If you like Certbot, please consider supporting our work by:
 &lt;span class=&quot;k&quot;&gt;*&lt;/span&gt; Donating to ISRG / Let&lt;span class=&quot;s1&quot;&gt;'s Encrypt:   https://letsencrypt.org/donate
 * Donating to EFF:                    https://eff.org/donate-le
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

# nginx 설정 확인 및 재실행
$ sudo nginx -t
nginx: the configuration file /etc/nginx/nginx.conf syntax is ok
nginx: configuration file /etc/nginx/nginx.conf test is successful

$ sudo nginx -r reload

&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;마치며&quot;&gt;마치며&lt;/h2&gt;

&lt;p&gt;생각보다 설정이 쉬워서 이렇게만 하면 된다고 하고 놀랐네요. :)&lt;/p&gt;

&lt;h2 id=&quot;참고-자료&quot;&gt;참고 자료&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://snapcraft.io/install/certbot/ubuntu&quot;&gt;Install certbot on Ubuntu&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name></name></author><category term="ubuntu" /><category term="certbot" /><summary type="html">certbot을 이용한 인증서 설치 및 갱신</summary></entry><entry><title type="html">인피니티 게임</title><link href="https://lahuman.github.io/book_phase/" rel="alternate" type="text/html" title="인피니티 게임" /><published>2024-04-07T00:00:00+00:00</published><updated>2024-04-07T00:00:00+00:00</updated><id>https://lahuman.github.io/book_phase</id><content type="html" xml:base="https://lahuman.github.io/book_phase/">&lt;h1 id=&quot;유한-게임과-무한-게임&quot;&gt;유한 게임과 무한 게임&lt;/h1&gt;

&lt;h2 id=&quot;유한-게임&quot;&gt;유한 게임&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;참가자가 공개&lt;/li&gt;
  &lt;li&gt;규칙 존재&lt;/li&gt;
  &lt;li&gt;목적이 상호 합의로 존재&lt;/li&gt;
  &lt;li&gt;목적을 먼저 이루면 승리&lt;/li&gt;
  &lt;li&gt;예 - 축구, 농구, 배구 등&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;무한-게임&quot;&gt;무한 게임&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;참가자 공개 X&lt;/li&gt;
  &lt;li&gt;규칙 존재 X&lt;/li&gt;
  &lt;li&gt;시간 무제한&lt;/li&gt;
  &lt;li&gt;종료 없음&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;비지니스는-무한-게임&quot;&gt;비지니스는 무한 게임&lt;/h2&gt;

&lt;p&gt;무한 게임에서 성공하기 위해서는 누가 승자이고, 누가 최고인지 보다는 영속적으로 게임에서 살아남을 수 있는 강한 기업을 어떻게 만들지 고민 필요&lt;/p&gt;

&lt;p&gt;역설적으로 단기간 강성한 기업을 만들 수 있음&lt;/p&gt;

&lt;h2 id=&quot;참고-자료&quot;&gt;참고 자료&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.yes24.com/Product/Goods/110710700&quot;&gt;인피니티 게임 - 사이먼 시넥&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name></name></author><category term="book" /><category term="phase" /><summary type="html">세상에 없던 판도를 만든 사람들의 5가지 무한 원칙</summary></entry><entry><title type="html">비키던지, 따르던지, 이끌던지</title><link href="https://lahuman.github.io/20240404/" rel="alternate" type="text/html" title="비키던지, 따르던지, 이끌던지" /><published>2024-04-04T00:00:00+00:00</published><updated>2024-04-04T00:00:00+00:00</updated><id>https://lahuman.github.io/20240404</id><content type="html" xml:base="https://lahuman.github.io/20240404/">&lt;h1 id=&quot;비키던지-따르던지-이끌던지&quot;&gt;비키던지, 따르던지, 이끌던지&lt;/h1&gt;</content><author><name></name></author><category term="phase" /><summary type="html">수동적이기 보다 능동적으로 살아가자</summary></entry><entry><title type="html">spring boot jar 파일 실행시 application.yml 주입 하기</title><link href="https://lahuman.github.io/springboot_application_config/" rel="alternate" type="text/html" title="spring boot jar 파일 실행시 application.yml 주입 하기" /><published>2024-04-03T00:00:00+00:00</published><updated>2024-04-03T00:00:00+00:00</updated><id>https://lahuman.github.io/springboot_application_config</id><content type="html" xml:base="https://lahuman.github.io/springboot_application_config/">&lt;h1 id=&quot;spring-boot-실행시-설정-파일-외부-주입-방법&quot;&gt;spring boot 실행시 설정 파일 외부 주입 방법&lt;/h1&gt;

&lt;h2 id=&quot;실행-명령어를-이용한-주입&quot;&gt;실행 명령어를 이용한 주입&lt;/h2&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;java &lt;span class=&quot;nt&quot;&gt;-jar&lt;/span&gt; app.jar &lt;span class=&quot;nt&quot;&gt;--spring&lt;/span&gt;.config.location&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;file:///Users/home/config/jdbc.properties
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;디렉토리-기반-주입&quot;&gt;디렉토리 기반 주입&lt;/h2&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;java &lt;span class=&quot;nt&quot;&gt;-jar&lt;/span&gt; app.jar &lt;span class=&quot;nt&quot;&gt;--spring&lt;/span&gt;.config.name&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;application,jdbc &lt;span class=&quot;nt&quot;&gt;--spring&lt;/span&gt;.config.location&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;file:///Users/home/config
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;마치며&quot;&gt;마치며&lt;/h2&gt;

&lt;p&gt;다른 여러가지 방법이 있지만 위의 2가지 방법으로 대부분 처리가 가능합니다.&lt;/p&gt;

&lt;h2 id=&quot;참고자료&quot;&gt;참고자료&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.baeldung.com/spring-properties-file-outside-jar&quot;&gt;Spring Properties File Outside jar&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name></name></author><category term="springboot" /><category term="jar" /><category term="config" /><summary type="html">외부 파일 사용하기</summary></entry><entry><title type="html">windows 11에 WSL2 기반 kotlin 개발 환경 구축 하기!</title><link href="https://lahuman.github.io/window_wsl_intellij/" rel="alternate" type="text/html" title="windows 11에 WSL2 기반 kotlin 개발 환경 구축 하기!" /><published>2024-04-01T00:00:00+00:00</published><updated>2024-04-01T00:00:00+00:00</updated><id>https://lahuman.github.io/window_wsl_intellij</id><content type="html" xml:base="https://lahuman.github.io/window_wsl_intellij/">&lt;h1 id=&quot;kotlin-개발-환경을-구축해보자&quot;&gt;kotlin 개발 환경을 구축해보자!&lt;/h1&gt;

&lt;blockquote&gt;
  &lt;p&gt;N100 이라는 CPU를 가진 &lt;a href=&quot;https://www.clien.net/service/board/cm_nas/18406336&quot;&gt;미니 PC&lt;/a&gt;를 구매했습니다. 
가성비 좋고, 효율이 좋다고 해서 여기에 개발 환경까지 구축해보았습니다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;제가 구매한 제품은 &lt;a href=&quot;https://dpg.danawa.com/bbs/view?boardSeq=28&amp;amp;listSeq=5397452&quot;&gt;CHATREEY T8 PLUS [INTEL N100 CPU]&lt;/a&gt; 으로 512 SSD에 16GB 메모리를 가진 제품으로 선택하였습니다.&lt;/p&gt;

&lt;p&gt;이 제품은 메모리가 온보드라 구매 후 변경이 불가능하니 참고 하여주세요.
추가로 초기 메모리 클럭이 3200 으로 잡혀 있지만, 4800 을 지원하는 ddr5 메모리가 탑재되어 있어 bios에서 수정해줘야 합니다.&lt;/p&gt;

&lt;h2 id=&quot;wsl2-설치&quot;&gt;WSL2 설치&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://lahuman.github.io/wsl2_vagrant/&quot;&gt;WSL2에서 VAGRANT로 Windows VirutalBox에 ubuntu VM 실행
&lt;/a&gt; 를 참고해서 설치 합니다.&lt;/p&gt;

&lt;p&gt;또는 간단하게 윈도우 마켓 플레이스에서 ubuntu 22.x 를 설치하면 됩니다.&lt;/p&gt;

&lt;h2 id=&quot;java-21-설치&quot;&gt;java 21 설치&lt;/h2&gt;

&lt;p&gt;다음 명령어로 jdk를 설치 할 수 있습니다.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;apt update

&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;apt install openjdk-21-jdk
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;intllij-with-wsl&quot;&gt;intllij with WSL&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://www.jetbrains.com/help/idea/how-to-use-wsl-development-environment-in-product.html#create_project_for_wsl&quot;&gt;WSL&lt;/a&gt; 을 따라서 프로젝트 설정을 하면 됩니다.&lt;/p&gt;

&lt;h2 id=&quot;windows-11-보안-설정&quot;&gt;WINDOWS 11 보안 설정&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;intellij를 통해서 gradle/maven repository로 접속하여 관련 library를 받아오지 못하거나, indexing이 하루 종일 걸리는 경우가 있습니다. 이를 해결하기 위해서 다음의 보안 설정을 해야 합니다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;설정---개인정보-및-보안-탭---windows-보안-열기&quot;&gt;설정 - ‘개인정보 및 보안’ 탭 - ‘Windows 보안 열기’&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;/assets/img/post_img/setting-security1.png&quot; alt=&quot;&quot; /&gt;
&lt;img src=&quot;/assets/img/post_img/setting-security2.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;바이러스-및-위협-방지-탭---바이러스-및-위협-장지-설정-영역에-설정관리&quot;&gt;‘바이러스 및 위협 방지’ 탭 - ‘바이러스 및 위협 장지 설정’ 영역에 ‘설정관리’&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;/assets/img/post_img/setting-security3.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;제외-영역에-제외-추가-또는-제거&quot;&gt;‘제외’ 영역에 ‘제외 추가 또는 제거’&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;/assets/img/post_img/setting-security4.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;제외-사항-추가-또는-제거---프로세스&quot;&gt;‘제외 사항 추가 또는 제거’ - ‘프로세스’&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;/assets/img/post_img/setting-security5.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;상기 경로에 아래 프로세스 2개를 입력하여 제외를 추가합니다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;fsnotifier-wsl&lt;/li&gt;
  &lt;li&gt;idea64.exe&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;위와 같이 설정을 하면 intellij에서 빠르게 실행이 가능합니다.&lt;/p&gt;

&lt;h4 id=&quot;intellij에-hello-springboot-kotlin-프로젝트-화면&quot;&gt;intellij에 hello springboot kotlin 프로젝트 화면&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;/assets/img/post_img/intellij_wsl.jpeg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;podman-설치&quot;&gt;podman 설치&lt;/h2&gt;

&lt;p&gt;간단하게 로컬 개발 환경에서는 docker 보다는 podman을 사용하고 있습니다.&lt;/p&gt;

&lt;p&gt;설치 명령어는 아래와 같습니다.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# Ubuntu 20.10 and newer&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;apt-get update
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;apt-get &lt;span class=&quot;nt&quot;&gt;-y&lt;/span&gt; install podman
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;이후 root 권한으로 실행 하면 docker 와 동일하게 사용 할 수 있습니다.&lt;/p&gt;

&lt;h4 id=&quot;podman으로-nginx-실행-화면&quot;&gt;podman으로 NGINX 실행 화면&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;/assets/img/post_img/podman_wsl.jpeg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;마치며&quot;&gt;마치며&lt;/h2&gt;

&lt;p&gt;N100 CPU의 성능이 싱글 기준 i5-7500과 8500 사이라고 하는데, 꽤 부드럽게 동작하고 끊김을 느끼지 못했습니다.  물론 컴파일시에 기다림이 필요하지만요.&lt;/p&gt;

&lt;p&gt;가성비 미니 PC를 찾는 분이 계시다면 아주 추천해드립니다.&lt;/p&gt;</content><author><name></name></author><category term="windows" /><category term="wsl2" /><category term="kotlin" /><summary type="html">windows 환경 구축을 해보자!</summary></entry></feed>
<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.6.3">Jekyll</generator><link href="https://lahuman.github.io/feed.xml" rel="self" type="application/atom+xml" /><link href="https://lahuman.github.io/" rel="alternate" type="text/html" /><updated>2024-04-08T00:09:53+00:00</updated><id>https://lahuman.github.io/feed.xml</id><title type="html">lahuman</title><subtitle>열심히 사는 아저씨</subtitle><entry><title type="html">인피니티 게임</title><link href="https://lahuman.github.io/book_phase/" rel="alternate" type="text/html" title="인피니티 게임" /><published>2024-04-07T00:00:00+00:00</published><updated>2024-04-07T00:00:00+00:00</updated><id>https://lahuman.github.io/book_phase</id><content type="html" xml:base="https://lahuman.github.io/book_phase/">&lt;h1 id=&quot;유한-게임과-무한-게임&quot;&gt;유한 게임과 무한 게임&lt;/h1&gt;

&lt;h2 id=&quot;유한-게임&quot;&gt;유한 게임&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;참가자가 공개&lt;/li&gt;
  &lt;li&gt;규칙 존재&lt;/li&gt;
  &lt;li&gt;목적이 상호 합의로 존재&lt;/li&gt;
  &lt;li&gt;목적을 먼저 이루면 승리&lt;/li&gt;
  &lt;li&gt;예 - 축구, 농구, 배구 등&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;무한-게임&quot;&gt;무한 게임&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;참가자 공개 X&lt;/li&gt;
  &lt;li&gt;규칙 존재 X&lt;/li&gt;
  &lt;li&gt;시간 무제한&lt;/li&gt;
  &lt;li&gt;종료 없음&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;비지니스는-무한-게임&quot;&gt;비지니스는 무한 게임&lt;/h2&gt;

&lt;p&gt;무한 게임에서 성공하기 위해서는 누가 승자이고, 누가 최고인지 보다는 영속적으로 게임에서 살아남을 수 있는 강한 기업을 어떻게 만들지 고민 필요&lt;/p&gt;

&lt;p&gt;역설적으로 단기간 강성한 기업을 만들 수 있음&lt;/p&gt;

&lt;h2 id=&quot;참고-자료&quot;&gt;참고 자료&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.yes24.com/Product/Goods/110710700&quot;&gt;인피니티 게임 - 사이먼 시넥&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name></name></author><category term="book" /><category term="phase" /><summary type="html">세상에 없던 판도를 만든 사람들의 5가지 무한 원칙</summary></entry><entry><title type="html">비키던지, 따르던지, 이끌던지</title><link href="https://lahuman.github.io/20240404/" rel="alternate" type="text/html" title="비키던지, 따르던지, 이끌던지" /><published>2024-04-04T00:00:00+00:00</published><updated>2024-04-04T00:00:00+00:00</updated><id>https://lahuman.github.io/20240404</id><content type="html" xml:base="https://lahuman.github.io/20240404/">&lt;h1 id=&quot;비키던지-따르던지-이끌던지&quot;&gt;비키던지, 따르던지, 이끌던지&lt;/h1&gt;</content><author><name></name></author><category term="phase" /><summary type="html">수동적이기 보다 능동적으로 살아가자</summary></entry><entry><title type="html">spring boot jar 파일 실행시 application.yml 주입 하기</title><link href="https://lahuman.github.io/springboot_application_config/" rel="alternate" type="text/html" title="spring boot jar 파일 실행시 application.yml 주입 하기" /><published>2024-04-03T00:00:00+00:00</published><updated>2024-04-03T00:00:00+00:00</updated><id>https://lahuman.github.io/springboot_application_config</id><content type="html" xml:base="https://lahuman.github.io/springboot_application_config/">&lt;h1 id=&quot;spring-boot-실행시-설정-파일-외부-주입-방법&quot;&gt;spring boot 실행시 설정 파일 외부 주입 방법&lt;/h1&gt;

&lt;h2 id=&quot;실행-명령어를-이용한-주입&quot;&gt;실행 명령어를 이용한 주입&lt;/h2&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;java &lt;span class=&quot;nt&quot;&gt;-jar&lt;/span&gt; app.jar &lt;span class=&quot;nt&quot;&gt;--spring&lt;/span&gt;.config.location&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;file:///Users/home/config/jdbc.properties
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;디렉토리-기반-주입&quot;&gt;디렉토리 기반 주입&lt;/h2&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;java &lt;span class=&quot;nt&quot;&gt;-jar&lt;/span&gt; app.jar &lt;span class=&quot;nt&quot;&gt;--spring&lt;/span&gt;.config.name&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;application,jdbc &lt;span class=&quot;nt&quot;&gt;--spring&lt;/span&gt;.config.location&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;file:///Users/home/config
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;마치며&quot;&gt;마치며&lt;/h2&gt;

&lt;p&gt;다른 여러가지 방법이 있지만 위의 2가지 방법으로 대부분 처리가 가능합니다.&lt;/p&gt;

&lt;h2 id=&quot;참고자료&quot;&gt;참고자료&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.baeldung.com/spring-properties-file-outside-jar&quot;&gt;Spring Properties File Outside jar&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name></name></author><category term="springboot" /><category term="jar" /><category term="config" /><summary type="html">외부 파일 사용하기</summary></entry><entry><title type="html">windows 11에 WSL2 기반 kotlin 개발 환경 구축 하기!</title><link href="https://lahuman.github.io/window_wsl_intellij/" rel="alternate" type="text/html" title="windows 11에 WSL2 기반 kotlin 개발 환경 구축 하기!" /><published>2024-04-01T00:00:00+00:00</published><updated>2024-04-01T00:00:00+00:00</updated><id>https://lahuman.github.io/window_wsl_intellij</id><content type="html" xml:base="https://lahuman.github.io/window_wsl_intellij/">&lt;h1 id=&quot;kotlin-개발-환경을-구축해보자&quot;&gt;kotlin 개발 환경을 구축해보자!&lt;/h1&gt;

&lt;blockquote&gt;
  &lt;p&gt;N100 이라는 CPU를 가진 &lt;a href=&quot;https://www.clien.net/service/board/cm_nas/18406336&quot;&gt;미니 PC&lt;/a&gt;를 구매했습니다. 
가성비 좋고, 효율이 좋다고 해서 여기에 개발 환경까지 구축해보았습니다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;제가 구매한 제품은 &lt;a href=&quot;https://dpg.danawa.com/bbs/view?boardSeq=28&amp;amp;listSeq=5397452&quot;&gt;CHATREEY T8 PLUS [INTEL N100 CPU]&lt;/a&gt; 으로 512 SSD에 16GB 메모리를 가진 제품으로 선택하였습니다.&lt;/p&gt;

&lt;p&gt;이 제품은 메모리가 온보드라 구매 후 변경이 불가능하니 참고 하여주세요.
추가로 초기 메모리 클럭이 3200 으로 잡혀 있지만, 4800 을 지원하는 ddr5 메모리가 탑재되어 있어 bios에서 수정해줘야 합니다.&lt;/p&gt;

&lt;h2 id=&quot;wsl2-설치&quot;&gt;WSL2 설치&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://lahuman.github.io/wsl2_vagrant/&quot;&gt;WSL2에서 VAGRANT로 Windows VirutalBox에 ubuntu VM 실행
&lt;/a&gt; 를 참고해서 설치 합니다.&lt;/p&gt;

&lt;p&gt;또는 간단하게 윈도우 마켓 플레이스에서 ubuntu 22.x 를 설치하면 됩니다.&lt;/p&gt;

&lt;h2 id=&quot;java-21-설치&quot;&gt;java 21 설치&lt;/h2&gt;

&lt;p&gt;다음 명령어로 jdk를 설치 할 수 있습니다.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;apt update

&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;apt install openjdk-21-jdk
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;intllij-with-wsl&quot;&gt;intllij with WSL&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://www.jetbrains.com/help/idea/how-to-use-wsl-development-environment-in-product.html#create_project_for_wsl&quot;&gt;WSL&lt;/a&gt; 을 따라서 프로젝트 설정을 하면 됩니다.&lt;/p&gt;

&lt;h4 id=&quot;intellij에-hello-springboot-kotlin-프로젝트-화면&quot;&gt;intellij에 hello springboot kotlin 프로젝트 화면&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;/assets/img/post_img/intellij_wsl.jpeg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;podman-설치&quot;&gt;podman 설치&lt;/h2&gt;

&lt;p&gt;간단하게 로컬 개발 환경에서는 docker 보다는 podman을 사용하고 있습니다.&lt;/p&gt;

&lt;p&gt;설치 명령어는 아래와 같습니다.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# Ubuntu 20.10 and newer&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;apt-get update
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;apt-get &lt;span class=&quot;nt&quot;&gt;-y&lt;/span&gt; install podman
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;이후 root 권한으로 실행 하면 docker 와 동일하게 사용 할 수 있습니다.&lt;/p&gt;

&lt;h4 id=&quot;podman으로-nginx-실행-화면&quot;&gt;podman으로 NGINX 실행 화면&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;/assets/img/post_img/podman_wsl.jpeg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;마치며&quot;&gt;마치며&lt;/h2&gt;

&lt;p&gt;N100 CPU의 성능이 싱글 기준 i5-7500과 8500 사이라고 하는데, 꽤 부드럽게 동작하고 끊김을 느끼지 못했습니다.  물론 컴파일시에 기다림이 필요하지만요.&lt;/p&gt;

&lt;p&gt;가성비 미니 PC를 찾는 분이 계시다면 아주 추천해드립니다.&lt;/p&gt;</content><author><name></name></author><category term="windows" /><category term="wsl2" /><category term="kotlin" /><summary type="html">windows 환경 구축을 해보자!</summary></entry><entry><title type="html">행복한 개발자가 되기 위해서</title><link href="https://lahuman.github.io/20240311/" rel="alternate" type="text/html" title="행복한 개발자가 되기 위해서" /><published>2024-03-11T00:00:00+00:00</published><updated>2024-03-11T00:00:00+00:00</updated><id>https://lahuman.github.io/20240311</id><content type="html" xml:base="https://lahuman.github.io/20240311/">&lt;h1 id=&quot;행복한-백발의-개발자라는-제목으로-2024-03-06-어느-it-업체에서-직책자로-승진한-분들을-대상으로-한-강연-발표-자료-를-보고&quot;&gt;&lt;a href=&quot;https://www.slideshare.net/slideshows/20240306-it/266665622?fbclid=IwAR08GNtvVaIkfnpvWG6ovt3kIOPQ6YPLahDgQ09_I13bxV0zQAk9vsYZBDg&quot;&gt;“행복한 백발의 개발자”라는 제목으로 2024-03-06 어느 IT 업체에서 직책자로 승진한 분들을 대상으로 한 강연 발표 자료.&lt;/a&gt; 를 보고&lt;/h1&gt;

&lt;p&gt;케이타운포유에서 근무하시는 백명석님의 자료를 보고 생각을 정리 한 내용입니다&lt;/p&gt;

&lt;p&gt;위에 링크를 보면 상세한 자료를 확인할 수 있습니다.&lt;/p&gt;

&lt;p&gt;나 스스로에게 묻고 답하는 내용이라 반말로 작성되어 있습니다.&lt;/p&gt;

&lt;h2 id=&quot;나는-행복한가&quot;&gt;나는 행복한가?&lt;/h2&gt;

&lt;p&gt;우선 나의 &lt;code class=&quot;highlighter-rouge&quot;&gt;워라벨&lt;/code&gt;은 매우 훌륭하다. 다만, 매일이 즐겁냐라고 묻는다면, 워라벨이 안좋았던 때보단 즐겁지 않다.&lt;/p&gt;

&lt;p&gt;개발은 여전히 즐겁지만, 공감없이 해야하는 일들이 발목을 잡는다.&lt;/p&gt;

&lt;p&gt;주변 동료에게 지식과 경험을 공유하여 선한 영향력을 얻기 위해서 노력중이지만, 생각만큼 결과가 좋지 않다.&lt;/p&gt;

&lt;h2 id=&quot;나는-성장하고-있는가&quot;&gt;나는 성장하고 있는가?&lt;/h2&gt;

&lt;p&gt;아직도 성장을 위해 늘 노력 중이다.
다만, 30대의 내가 단거리 달리기처럼 뛰었다면 지금은 장거리 달리기처럼 천천히 달리고 있다.&lt;/p&gt;

&lt;p&gt;어제의 나보다 0.1 이라도 발전하려고 노력하는 중이다.&lt;/p&gt;

&lt;h2 id=&quot;나는-학습하고-있는가&quot;&gt;나는 학습하고 있는가?&lt;/h2&gt;

&lt;p&gt;소프트웨어는 지속적을 변화한다. 나는 여전히 새로운 기술도 사용해보고 도전하는 중이다. 성장을 위해서 학습을 한다.&lt;/p&gt;

&lt;p&gt;요즘은 기술 보다는 사람에 대한 학습을 한다. 조금 더 이해하고 변화시키는 방안을 고민한다.&lt;/p&gt;

&lt;h2 id=&quot;나의-활동이-다른-누군가에게-동기-부여가-되는가&quot;&gt;나의 활동이 다른 누군가에게 동기 부여가 되는가?&lt;/h2&gt;

&lt;p&gt;외적 동기 부여보다는 내적 동기 부여에 힘을 쏟고 있다.&lt;/p&gt;

&lt;p&gt;높다면 높은 자리에 있기에, 다른 동료가 보기에 롤모델이 되도록 노력을 하고 있다&lt;/p&gt;

&lt;h2 id=&quot;나는-일-잘하는-개발자-인가-개발-리더-인가&quot;&gt;나는 일 잘하는 개발자 인가? 개발 리더 인가?&lt;/h2&gt;

&lt;p&gt;아직까지 내 일은 잘한다.&lt;/p&gt;

&lt;p&gt;좋은 개발 리더인가는 누군가에겐 좋은, 누군가에겐 안 좋은 리더같다.&lt;/p&gt;

&lt;p&gt;빠르게 피드백하고, 결과물이 잘 나오는 동료에게는 좋은 리더가 되지만,&lt;/p&gt;

&lt;p&gt;피드백이 느리고, 결과물도 안나오는 동료에게는 마이크로매니징을 하는 리더가 된다.&lt;/p&gt;

&lt;h2 id=&quot;나는-우리팀-에이스-인가&quot;&gt;나는 우리팀 에이스 인가?&lt;/h2&gt;

&lt;p&gt;에이스까지는 아니고 오지랍이 넓다.&lt;/p&gt;

&lt;p&gt;너의 일과 나의 일로 나누어서 생각하지 않고 가능하면 우리 일로 생각하고 행동한다.&lt;/p&gt;

&lt;h2 id=&quot;의사-소통을-잘하는가&quot;&gt;의사 소통을 잘하는가?&lt;/h2&gt;

&lt;p&gt;성격이 급해서 잘될때는 일이 아주 빠르게 진행되지만,&lt;/p&gt;

&lt;p&gt;안될때는 짜증만 내는 것처럼 보여진다.&lt;/p&gt;

&lt;h2 id=&quot;문서는-잘-작성-하는가&quot;&gt;문서는 잘 작성 하는가?&lt;/h2&gt;

&lt;p&gt;기억에 의존하기 보다는 메모 또는 컨플런스 같이 문서를 작성하려고 노력한다.&lt;/p&gt;

&lt;p&gt;다만, 내가 읽고 이해 못하는 경우도 있기에 가능하면 6하원칙에 따라 작성하려고 노력한다.&lt;/p&gt;

&lt;h2 id=&quot;마지막으로-하고-싶은-말은&quot;&gt;마지막으로 하고 싶은 말은?&lt;/h2&gt;

&lt;p&gt;이전만큼 빠르진 않지만 지속적으로 발전하기 위해 노력중이다.&lt;/p&gt;

&lt;p&gt;내일의 내가 오늘의 나보다는 한발자국이라도 나아갔으면 좋겠다.&lt;/p&gt;</content><author><name></name></author><category term="단상" /><summary type="html">노력하고 노력하자!</summary></entry><entry><title type="html">spring security와 함께 테스트 하기!</title><link href="https://lahuman.github.io/spring_security_test/" rel="alternate" type="text/html" title="spring security와 함께 테스트 하기!" /><published>2024-02-26T00:00:00+00:00</published><updated>2024-02-26T00:00:00+00:00</updated><id>https://lahuman.github.io/spring_security_test</id><content type="html" xml:base="https://lahuman.github.io/spring_security_test/">&lt;h1 id=&quot;spring-security-for-spring-boot-integration-tests&quot;&gt;&lt;a href=&quot;https://www.baeldung.com/spring-security-integration-tests&quot;&gt;Spring Security for Spring Boot Integration Tests&lt;/a&gt;&lt;/h1&gt;

&lt;blockquote&gt;
  &lt;p&gt;Security 설정이 완료 되어 있다는 전재하에 작성했습니다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;아래와 같이 설정이 되어 있으면,&lt;/p&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@Configuration&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;WebSecurityConfigurer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@Bean&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;InMemoryUserDetailsManager&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;userDetailsService&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PasswordEncoder&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;passwordEncoder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;UserDetails&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;user&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;withUsername&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;spring&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;password&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;passwordEncoder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;encode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;secret&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;roles&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;USER&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;build&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;InMemoryUserDetailsManager&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@Bean&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SecurityFilterChain&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;filterChain&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;HttpSecurity&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;http&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Exception&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;http&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;authorizeRequests&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;antMatchers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/private/**&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;hasRole&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;USER&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;antMatchers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/public/**&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;permitAll&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;and&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;httpBasic&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;http&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;build&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@Bean&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BCryptPasswordEncoder&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;passwordEncoder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;BCryptPasswordEncoder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;테스트 코드를 다음과 같이 작성하면 됩니다.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@RunWith&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SpringRunner&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@WebMvcTest&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SecuredController&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;SecuredControllerWebMvcIntegrationTest&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@Autowired&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MockMvc&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mvc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// ... other methods&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@WithMockUser&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;spring&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@Test&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;givenAuthRequestOnPrivateService_shouldSucceedWith200&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Exception&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;mvc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;perform&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/private/hello&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;contentType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MediaType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;APPLICATION_JSON&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;
          &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;andExpect&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;status&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;isOk&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;위에서 중요한 몇가지 키워드는 &lt;code class=&quot;highlighter-rouge&quot;&gt;MockMvc&lt;/code&gt; 와 &lt;code class=&quot;highlighter-rouge&quot;&gt;WithMockUser&lt;/code&gt; 입니다.
2가지가 맞아아 user 정보가 Injection됩니다.&lt;/p&gt;

&lt;h2 id=&quot;참고-자료&quot;&gt;참고 자료&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.baeldung.com/spring-security-integration-tests&quot;&gt;Spring Security for Spring Boot Integration Tests&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name></name></author><category term="spring" /><category term="security" /><category term="test" /><summary type="html">인증 처리 방법</summary></entry><entry><title type="html">JDK21 + Spring 3.2 + virtual thread</title><link href="https://lahuman.github.io/jdk21_virtual_thread/" rel="alternate" type="text/html" title="JDK21 + Spring 3.2 + virtual thread" /><published>2024-02-20T00:00:00+00:00</published><updated>2024-02-20T00:00:00+00:00</updated><id>https://lahuman.github.io/jdk21_virtual_thread</id><content type="html" xml:base="https://lahuman.github.io/jdk21_virtual_thread/">&lt;h1 id=&quot;virtual-thread를-사용해보자&quot;&gt;Virtual Thread를 사용해보자!&lt;/h1&gt;

&lt;blockquote&gt;
  &lt;p&gt;이번 프로젝트는 kotlin + jdk21 + spring 3.2의 환경입니다. jdk21이면 많이 이야기되는 virtual thread를 사용할지를 이야기 하기 위한 사전 조사를 했습니다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;virtual-thread란&quot;&gt;Virtual Thread란?&lt;/h2&gt;

&lt;p&gt;우선 Virtual Thread를 이해하기 위해서는 몇가지 알아야 하는 사항이 있습니다.&lt;/p&gt;

&lt;h3 id=&quot;platform-thread&quot;&gt;Platform Thread&lt;/h3&gt;

&lt;h4 id=&quot;system-call&quot;&gt;System call&lt;/h4&gt;
&lt;div class=&quot;mermaid&quot;&gt; 
flowchart LR;
    A[CPU] --&amp;gt;B{Scheduler};
    subgraph OS-Linux;
    B --&amp;gt; C[Thread 1];
    B --&amp;gt; E[Thread 2];
    B --&amp;gt; F[Thread N];
    end;
    subgraph JNI;
    F --&amp;gt; G[[JNI]];
    E --&amp;gt; G;
    C --&amp;gt; G;
    end;
    subgraph JVM;
    G --&amp;gt; H[Thread 1];
    G --&amp;gt; I[Thread 2];
    G --&amp;gt; J[Thread N];
    end;
&lt;/div&gt;

&lt;p&gt;Platform Thread는 OS Thread를 감싼 형태로 구현됩니다.&lt;/p&gt;

&lt;h4 id=&quot;thread의-생애-주기&quot;&gt;Thread의 생애 주기&lt;/h4&gt;
&lt;div class=&quot;mermaid&quot;&gt; 
flowchart LR;
    A[NEW] --&amp;gt;|start| B[RUNNABLE];
    B --&amp;gt;|run| C[RUNNING];
    E[NON-RUNNABLE];
    subgraph context switch;
    C -.-&amp;gt;|yield| B;
    E -.-&amp;gt;|sleep end, i/o completes,  etc| B;
    C -.-&amp;gt;|sleep, block i/o, etc| E;
    end;
    C --&amp;gt;|stop| D[TERMINATIED];
&lt;/div&gt;

&lt;p&gt;자바에서는 Thread가 I/O 작업, 인터럽트 또는 sleep 명령을 만날 때 블로킹 또는 대기 상태로 들어갑니다. 이 기간 동안 다른 Thread가 운영 체제의 자원을 활용하여 작업을 수행할 수 있으며, 이를 &lt;code class=&quot;highlighter-rouge&quot;&gt;Context Switching&lt;/code&gt;이라고 합니다. 이 모델은 기존의 프로세스 모델을 작은 단위로 분할하여 프로세스 내에서 공유 자원을 허용하면서 작은 작업 단위를 번갈아 가며 실행하는 것을 의미합니다.&lt;/p&gt;

&lt;p&gt;다만, 요청량이 급격하기 증가하는 서버 환경에서는 갈수록 더 많은 Thread 수를 요구 하게 되어 이를 극복하기 위해서 나온 것이 경량 스레드 모델인 &lt;code class=&quot;highlighter-rouge&quot;&gt;Virutal Thread&lt;/code&gt;입니다.&lt;/p&gt;

&lt;p&gt;Virtual Thread의 가장 큰 특징은 &lt;code class=&quot;highlighter-rouge&quot;&gt;컨텍스트 스위칭 비용이 저렴&lt;/code&gt; 하다는 것입니다.&lt;/p&gt;

&lt;h4 id=&quot;virtual-thread&quot;&gt;Virtual Thread&lt;/h4&gt;
&lt;div class=&quot;mermaid&quot;&gt; 
flowchart LR;
    A[CPU] --&amp;gt;B{Scheduler};
    subgraph OS-Linux;
    B --&amp;gt; C[Thread 1];
    B --&amp;gt; E[Thread 2];
    B --&amp;gt; F[Thread N];
    end;
    subgraph JNI;
    F --&amp;gt; G[[JNI]];
    E --&amp;gt; G;
    C --&amp;gt; G;
    end;
    subgraph JVM;
    G --&amp;gt; H{Scheduler};
    G --&amp;gt; H;
    G --&amp;gt; H;
    H --&amp;gt; J[Platform Thread 1];
    H --&amp;gt; K[Platform Thread 2];
    H --&amp;gt; L[Platform Thread N];
    J --&amp;gt; M[Virtual Thread 1];
    J --&amp;gt; N[Virtual Thread 2];
    J --&amp;gt; O[Virtual Thread N];
    K --&amp;gt; P[Virtual Thread 4];
    K --&amp;gt; Q[Virtual Thread 5];
    K --&amp;gt; R[Virtual Thread N];
    L --&amp;gt; S[Virtual Thread 7];
    L --&amp;gt; T[Virtual Thread 8];
    L --&amp;gt; U[Virtual Thread N];
    end;
&lt;/div&gt;

&lt;h2 id=&quot;spring-32-에서-virtual-thread-사용하기&quot;&gt;Spring 3.2 에서 Virtual Thread 사용하기&lt;/h2&gt;
&lt;p&gt;Spring 3.2 부터는 Virtual Thread를 공식적으로 지원하기 시작하였습니다.&lt;/p&gt;

&lt;p&gt;사용 방법은 간단하게 properties에 아래와 같이 설정 하면 됩니다.&lt;/p&gt;

&lt;div class=&quot;language-properties highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;py&quot;&gt;spring.threads.virtual.enabled&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;true&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;위와 같이 설정할 경우 기본적으로 Tomcat에서 Virtual Thread를 사용하도록 설정이 변경 됩니다.&lt;/p&gt;

&lt;p&gt;기타 부분은 수동으로 교체 작업을 해야 합니다.&lt;/p&gt;

&lt;h2 id=&quot;마치며&quot;&gt;마치며&lt;/h2&gt;

&lt;p&gt;Virtual Threaad는 약 5년 가까이 준비되었던 JDK의 프로젝트였고, 기존 Platform Thread와 호환성을 최대한 맞춰서 개발되었습니다.&lt;/p&gt;

&lt;p&gt;물론 Virtual Thread에 대한 이해도가 있어야 하지만, 간단하게 위와 같이 설정으로 Virtual Thread를 활용할 수 있습니다.&lt;/p&gt;

&lt;p&gt;참고 자료에는 좋은 내용이 많으니 꼭 읽어 보시기를 추천 드립니다.&lt;/p&gt;

&lt;h2 id=&quot;참고-자료&quot;&gt;참고 자료&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://techblog.woowahan.com/15398/&quot;&gt;Java의 미래, Virtual Thread&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://tech.kakao.com/2023/12/22/techmeet-virtualthread/&quot;&gt;JDK 21의 신기능 Virtual Thread 알아보기 / 제4회 Kakao Tech Meet&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.oracle.com/en/java/javase/21/core/virtual-threads.html#GUID-DC4306FC-D6C1-4BCC-AECE-48C32C1A8DAA&quot;&gt;Virtual Thread&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://mangkyu.tistory.com/317&quot;&gt;[Spring] 가상 스레드(Virtual Thread)를 지원하기 위한 스프링의 작업들과 마이그레이션 시의 주의 사항&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name></name></author><category term="spring" /><category term="jdk21" /><summary type="html">일단 고! 써보자</summary></entry><entry><title type="html">spring security에서 로그인 된 사용자 정보 가져오는 몇가지 방법</title><link href="https://lahuman.github.io/spring_security_get_user/" rel="alternate" type="text/html" title="spring security에서 로그인 된 사용자 정보 가져오는 몇가지 방법" /><published>2024-02-07T00:00:00+00:00</published><updated>2024-02-07T00:00:00+00:00</updated><id>https://lahuman.github.io/spring_security_get_user</id><content type="html" xml:base="https://lahuman.github.io/spring_security_get_user/">&lt;h1 id=&quot;retrieve-user-information-in-spring-security&quot;&gt;&lt;a href=&quot;https://www.baeldung.com/get-user-in-spring-security&quot;&gt;Retrieve User Information in Spring Security&lt;/a&gt;&lt;/h1&gt;

&lt;blockquote&gt;
  &lt;p&gt;전제 조건으로 &lt;code class=&quot;highlighter-rouge&quot;&gt;security&lt;/code&gt;를 이용한 인증을 모두 완료 후 인증된 정보를 가져오는 방법입니다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;단순한-정보-호출-방법&quot;&gt;단순한 정보 호출 방법&lt;/h2&gt;

&lt;p&gt;아래와 같이 &lt;code class=&quot;highlighter-rouge&quot;&gt;SecurityContextHolder&lt;/code&gt;를 통해서 정보를 가져올 수 있습니다.&lt;/p&gt;

&lt;h3 id=&quot;인증된-정보를-가져오는-단순한-방법&quot;&gt;인증된 정보를 가져오는 단순한 방법&lt;/h3&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;Authentication&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;authentication&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SecurityContextHolder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getContext&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getAuthentication&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;currentPrincipalName&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;authentication&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;Authentication&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;authentication&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SecurityContextHolder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getContext&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getAuthentication&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(!(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;authentication&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;instanceof&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;AnonymousAuthenticationToken&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;currentUserName&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;authentication&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;currentUserName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;인증된-객체를-가져오는-방법&quot;&gt;인증된 객체를 가져오는 방법&lt;/h3&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;UserDetails&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;userDetails&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;UserDetails&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;authentication&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getPrincipal&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;User has authorities: &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;userDetails&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getAuthorities&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;controller에서-인증된-객체를-가져오는-방법&quot;&gt;Controller에서 인증된 객체를 가져오는 방법&lt;/h2&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@Controller&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;GetUserWithPrincipalController&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@RequestMapping&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;/username&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;method&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;RequestMethod&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;GET&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@ResponseBody&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;currentUserName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Principal&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;principal&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;principal&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@Controller&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;GetUserWithAuthenticationController&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@RequestMapping&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;/username&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;method&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;RequestMethod&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;GET&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@ResponseBody&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;currentUserName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Authentication&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;authentication&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;authentication&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;request-객체에서-직접-호출-하는-방법&quot;&gt;Request 객체에서 직접 호출 하는 방법&lt;/h3&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@Controller&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;GetUserWithHTTPServletRequestController&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@RequestMapping&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;/username&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;method&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;RequestMethod&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;GET&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@ResponseBody&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;currentUserNameSimple&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;HttpServletRequest&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;Principal&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;principal&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getUserPrincipal&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;principal&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;마지막으로-제가-가장-선호하는-annotation-기반으로-가져오는-방법&quot;&gt;마지막으로 제가 가장 선호하는 annotation 기반으로 가져오는 방법&lt;/h3&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@RestController&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;GetUserWithAuthenticationPrincipalAnnotationController&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    
    &lt;span class=&quot;nd&quot;&gt;@GetMapping&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/user&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getUser&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;@AuthenticationPrincipal&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;UserDetails&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;userDetails&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;User Details: &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;userDetails&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getUsername&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;여러 방식으로 필요할때, 현재 인증된 정보를 가져와서 사용하면 됩니다&lt;/p&gt;

&lt;h2 id=&quot;참고-자료&quot;&gt;참고 자료&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.baeldung.com/get-user-in-spring-security&quot;&gt;Retrieve User Information in Spring Security&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name></name></author><category term="spring" /><category term="security" /><summary type="html">Controller에서 annotation으로 가져올 수 도 있음!</summary></entry><entry><title type="html">[kotlin + Spring]swagger 를 설정하자!</title><link href="https://lahuman.github.io/spring_kotlin_swagger/" rel="alternate" type="text/html" title="[kotlin + Spring]swagger 를 설정하자!" /><published>2024-01-26T00:00:00+00:00</published><updated>2024-01-26T00:00:00+00:00</updated><id>https://lahuman.github.io/spring_kotlin_swagger</id><content type="html" xml:base="https://lahuman.github.io/spring_kotlin_swagger/">&lt;h1 id=&quot;springdoc-openapi-v230&quot;&gt;&lt;a href=&quot;https://springdoc.org/&quot;&gt;springdoc-openapi v2.3.0&lt;/a&gt;&lt;/h1&gt;

&lt;p&gt;springBoot 3.x 부터는 &lt;a href=&quot;https://springdoc.org/&quot;&gt;springdoc-openapi v2.3.0&lt;/a&gt; 모듈을 사용해야 합니다. 
이전 버젼은 &lt;code class=&quot;highlighter-rouge&quot;&gt;springdoc-openapi v1.7.0&lt;/code&gt;을 이용해야 합니다.&lt;/p&gt;

&lt;p&gt;설치는 &lt;code class=&quot;highlighter-rouge&quot;&gt;build.gradle.kts&lt;/code&gt; 에 아래 디펜던시를 추가 합니다.&lt;/p&gt;

&lt;div class=&quot;language-gradle highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;implementation&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;org.springdoc:springdoc-openapi-starter-webmvc-ui:2.3.0&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Swagger 설정은 다음과 같이 단순하게 class를 추가해서 설정할 수 있습니다.&lt;/p&gt;

&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;package&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;io.lahuman.config&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;io.swagger.v3.oas.annotations.OpenAPIDefinition&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;io.swagger.v3.oas.annotations.info.Info&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;io.swagger.v3.oas.annotations.servers.Server&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.springframework.context.annotation.Configuration&lt;/span&gt;


&lt;span class=&quot;n&quot;&gt;@OpenAPIDefinition&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;info&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Info&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;title&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;제목&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;description&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;설명&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;version&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;v1&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;servers&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;Server&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;url&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;\${springdoc.swagger-ui.server}&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;@Configuration&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;SwaggerConfig&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;추가로 &lt;code class=&quot;highlighter-rouge&quot;&gt;/resource/application.yml&lt;/code&gt;에 몇가지 설정을 넣어서 마무리 하면 됩니다.&lt;/p&gt;

&lt;div class=&quot;language-yml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
&lt;span class=&quot;na&quot;&gt;springdoc&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;default-consumes-media-type&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;application/json&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;default-produces-media-type&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;application/json&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;swagger-ui&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;tags-sorter&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;alpha&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;server&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;http://localhost:8080/&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;/swagger-ui.html&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;server&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;servlet&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;context-path&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;/&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;encoding&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;force&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;true&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;실제 swagger 화면을 보기 위한 접속 주소는 &lt;code class=&quot;highlighter-rouge&quot;&gt;http://localhost:8080/swagger-ui.html&lt;/code&gt; 으로 접근하면 swagger 화면을 확인 할 수 있습니다.&lt;/p&gt;

&lt;h2 id=&quot;참고자료&quot;&gt;참고자료&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://springdoc.org/&quot;&gt;springdoc-openapi v2.3.0&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name></name></author><category term="kotlin" /><category term="spring" /><category term="swagger" /><summary type="html">swagger 설정!</summary></entry><entry><title type="html">함께 일하고 싶은 동료, 그리고 함께 하면 피곤한 동료</title><link href="https://lahuman.github.io/20240125/" rel="alternate" type="text/html" title="함께 일하고 싶은 동료, 그리고 함께 하면 피곤한 동료" /><published>2024-01-25T00:00:00+00:00</published><updated>2024-01-25T00:00:00+00:00</updated><id>https://lahuman.github.io/20240125</id><content type="html" xml:base="https://lahuman.github.io/20240125/">&lt;h1 id=&quot;결국-사람인데&quot;&gt;결국 사람인데…&lt;/h1&gt;

&lt;p&gt;함께 일울 하면 힘이 되는 사람이 있고,&lt;/p&gt;

&lt;p&gt;함께 일을 하면 기운 빠지게 만드는 사람이 있습니다.&lt;/p&gt;

&lt;p&gt;서로 맞지 않는다고 생각하는데 어떻게 계속 함께 일하게 되네요.&lt;/p&gt;

&lt;p&gt;늘 사람이 가장 어렵고 힘드네요.&lt;/p&gt;</content><author><name></name></author><category term="phase" /><summary type="html">함께 하기 싫은 사람과 함께 해야 할 때도 있다</summary></entry></feed>
<?xml version="1.0" encoding="utf-8"?><?xml-stylesheet type="text/xml" href="https://lahuman.github.io/feed.xslt.xml"?><feed xmlns="http://www.w3.org/2005/Atom"><generator uri="http://jekyllrb.com" version="3.8.4">Jekyll</generator><link href="https://lahuman.github.io/feed.xml" rel="self" type="application/atom+xml" /><link href="https://lahuman.github.io/" rel="alternate" type="text/html" /><updated>2019-06-26T19:55:03+09:00</updated><id>https://lahuman.github.io/</id><title type="html">lahuman</title><subtitle>열심히 사는 아저씨</subtitle><entry><title type="html">휴가가 끝나고…</title><link href="https://lahuman.github.io/20190626/" rel="alternate" type="text/html" title="휴가가 끝나고..." /><published>2019-06-26T00:00:00+09:00</published><updated>2019-06-26T00:00:00+09:00</updated><id>https://lahuman.github.io/20190626</id><content type="html" xml:base="https://lahuman.github.io/20190626/">&lt;h1 id=&quot;놀이동산에-가서-아내랑도-하지-않은-많은-놀이-기구를-탔다&quot;&gt;놀이동산에 가서 아내랑도 하지 않은 많은 놀이 기구를 탔다.&lt;/h1&gt;

&lt;p&gt;휴가를 2일간 내서 아내와 아이들과 즐겁게 시간을 보냈다.&lt;/p&gt;

&lt;p&gt;힘들기도 하고 즐겁기도 했다.&lt;/p&gt;

&lt;p&gt;일정을 여유있게 잡았더니, 많이 힘들지도 않았다.&lt;/p&gt;

&lt;p&gt;다음 휴가도 이번처럼 가야겠다.&lt;/p&gt;

&lt;h2 id=&quot;2019년-여름휴가&quot;&gt;2019년 여름휴가&lt;/h2&gt;</content><category term="단상" /><summary type="html">2일간 아이들과 즐겁게 보냈다.</summary></entry><entry><title type="html">내 논문이 SCI 저널에 기재 되었다.</title><link href="https://lahuman.github.io/pager/" rel="alternate" type="text/html" title="내 논문이 SCI 저널에 기재 되었다." /><published>2019-06-20T00:00:00+09:00</published><updated>2019-06-20T00:00:00+09:00</updated><id>https://lahuman.github.io/pager</id><content type="html" xml:base="https://lahuman.github.io/pager/">&lt;h1 id=&quot;5개월간-많은-시행-착오를-겪었다&quot;&gt;5개월간 많은 시행 착오를 겪었다.&lt;/h1&gt;

&lt;p&gt;처음 방송통신 대학원에 입학하고 바로 ACT 랩을 찾아갔다.
이후 많은 선배들의 논문의 준비하는 과정을 지켜 보고 내 논문도 준비 하였다.&lt;/p&gt;

&lt;p&gt;많은 시행 착오를 겪었고 2018년 8월 졸업 논문을 작성하여 졸업하였다. 
2016년에 입학하여 5학기 만에 논문을 작성하였고 그 과정에는 ACT랩의 선배들과 교수님들의 지원과 조언이 있었다.&lt;/p&gt;

&lt;p&gt;2018년 12월에는 CSA 컨플런스에서 최우수 논문상을 받았다.&lt;/p&gt;

&lt;p&gt;해당 논문을 더욱 발전시켜 2019년 6월 18일에 SCI 저널에 기재 할 수 있었다.&lt;/p&gt;

&lt;p&gt;이는 손진곤 교수님과 박지수 박사님의 도움으로 가능하다고 생각 한다.&lt;/p&gt;

&lt;p&gt;특히 박지수 박사님의 끝없는 지원이야 말로 내가 포기 하지 않고 마무리 할수 있었다고 생각 한다.&lt;/p&gt;

&lt;p&gt;이 논문이 END가 아닌 AND로 더 많은 것을 시도하는 내 첫 걸음이 되었으면 좋겠다.&lt;/p&gt;

&lt;h2 id=&quot;논문-정보&quot;&gt;논문 정보&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://link.springer.com/article/10.1007%2Fs11227-019-02932-4&quot;&gt;Differential data processing technique to improve the performance of wireless sensor networks&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="pager" /><summary type="html">2019/06/18 기재됨!</summary></entry><entry><title type="html">vim upgrade or 업그레이드 내역 확인 하기!</title><link href="https://lahuman.github.io/vim-upgrade/" rel="alternate" type="text/html" title="vim upgrade or 업그레이드 내역 확인 하기!" /><published>2019-06-19T00:00:00+09:00</published><updated>2019-06-19T00:00:00+09:00</updated><id>https://lahuman.github.io/vim-upgrade</id><content type="html" xml:base="https://lahuman.github.io/vim-upgrade/">&lt;h1 id=&quot;vim-upgrade-or-업그레이드-내역-확인-하기&quot;&gt;vim upgrade or 업그레이드 내역 확인 하기!&lt;/h1&gt;

&lt;h2 id=&quot;vim과-neovim-편집기에서-os-명령어-실행-취약점-발견-20190613&quot;&gt;Vim과 Neovim 편집기에서 OS 명령어 실행 취약점 발견 2019.06.13&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;보안 연구원 Armin Razmjou는 최근 리눅스에서 가장 인기 있는 커맨드라인 텍스트 편집 유틸리티인 Vim과 Neovim에서 심각도 높은 임의 OS 명령 실행 취약점(CVE-2019-12735)을 발견
    &lt;ul&gt;
      &lt;li&gt;Vim 편집기 : 사용자들이 리눅스에서 텍스트, 스크립트, 문서를 포함한 파일을 생성하고, 열람하거나 수정할 수 있는 프로그램
        &lt;ul&gt;
          &lt;li&gt;Neovim 편집기 : 플러그인, GUI 등이 개선된 Vim 확장 버전 프로그램&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;이 취약점은 “modlines”를 처리하는 과정에서 발견됨
    + modelines : 문서의 시작과 마지막 라인 근처에 파일의 제작자가 언급한 커스텀 설정 세트를 자동으로 찾아 적용하는 기능으로 기본으로
                          활성화되어 있음&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;비록 보안상의 이유로 modelines의 서브셋만을 허용하고 샌드박스 보호를 사용할지라도 “:source!” 명령어를 사용하면 샌드박스를
  우회할 수 있음&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;따라서, Vim이나 Neovim을 사용해 특별히 제작된 파일을 열람하는 것만으로도 공격자가 피해자의 리눅스 시스템에서 명령을 실행하고
  제어권을 탈취할 수 있음&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Vim(8.1.1365)과 Neovim(v0.3.6)은 해당 취약점 문제 해결을 위해 최근 업데이트를 발표&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;해결 방안
    &lt;ul&gt;
      &lt;li&gt;modelines 기능 비활성화&lt;/li&gt;
      &lt;li&gt;modelines의 수식을 비활성화 하기 위한 “modelineexpr” 비활성화&lt;/li&gt;
      &lt;li&gt;Vim modelines의 대한인 “securemodelines plugin” 사용&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;시사점&quot;&gt;시사점&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;리눅스 및 Vim과 Neovim 에디터를 최신 버전으로 업데이트하고, 주기적인 권한 탈취 여부 확인&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;vim-확인-하기&quot;&gt;vim 확인 하기&lt;/h2&gt;

&lt;h3 id=&quot;vim-upgrade-하기&quot;&gt;vim upgrade 하기&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;sudo apt-get upgrade vim&lt;/strong&gt; 명령어를 이용해서 업그레이드를 할 수 있다.&lt;/p&gt;

&lt;p&gt;만약 업그레이드를 할 내용이 없으면 다음과 같은 결과가 확이 된다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$&amp;gt; sudo apt-get upgrade vim
Reading package lists... Done
Building dependency tree
Reading state information... Done
vim is already the newest version (2:8.0.1453-1ubuntu1.1).
Calculating upgrade... Done
The following package was automatically installed and is no longer required:
  linux-aws-headers-4.15.0-1035
Use 'sudo apt autoremove' to remove it.
The following packages have been kept back:
  linux-aws linux-headers-aws linux-image-aws
0 upgraded, 0 newly installed, 0 to remove and 0 not upgraded.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;vim-최신-버젼으로-강제-업데이트-하기&quot;&gt;vim 최신 버젼으로 강제 업데이트 하기&lt;/h3&gt;

&lt;p&gt;PPA를 이용해서 최신 버젼으로 업데이트를 한다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$&amp;gt; sudo add-apt-repository ppa:jonathonf/vim
$&amp;gt; sudo apt update
$&amp;gt; sudo apt install vim
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h3 id=&quot;vim-upgrade-내역-확인-하기&quot;&gt;vim upgrade 내역 확인 하기&lt;/h3&gt;

&lt;p&gt;changelog를 확인하면 업데이트 기록이 확인 된다. 다음과 같인 로그가 있다면, CVE-2019-12735.patch에 대한 패치가 되어 있는 것이다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$&amp;gt; apt changelog vim
vim (2:8.0.1453-1ubuntu1.1) bionic-security; urgency=medium

  * SECURITY UPDATE: Arbitrary code execution
    - debian/patches/CVE-2019-12735.patch: disallow
      sourcing a file in the sandbox in src/getchar.c
    - CVE-2019-12735

 -- Leonidas S. Barbosa &amp;lt;leo.barbosa@canonical.com&amp;gt;  Thu, 06 Jun 2019 14:31:41 -0300

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;대부분 서비스를 확인하니 이미 패치가 되어 있었다.&lt;/p&gt;

&lt;h2 id=&quot;참고자료&quot;&gt;참고자료&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://thehackernews.com/2019/06/linux-vim-vulnerability.html?fbclid=IwAR2Z6XgBENCk2c2SGgyvAJE9ZIFv1UiyQzJAw45w8-fzGcSOuYxv2X821W0&quot;&gt;“Your Linux Can Get Hacked Just by Opening a File in Vim or Neovim Editor”, 2019. 6. 10&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://vi.stackexchange.com/questions/10817/how-can-i-get-a-newer-version-of-vim-on-ubuntu?fbclid=IwAR3b75m_fA2NBbKtmjwO_3dinZ2hq4Teu7n3bv3TgDXhrznEUIgLAzl3nDQ&quot;&gt;How can I get a newer version of Vim on Ubuntu?&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="vim" /><category term="upgrade" /><summary type="html">CVE-2019-12735 취약점으로 인해 확인 진행</summary></entry><entry><title type="html">이직하고 처음 짜증나는 날이다.</title><link href="https://lahuman.github.io/20190607/" rel="alternate" type="text/html" title="이직하고 처음 짜증나는 날이다." /><published>2019-06-07T00:00:00+09:00</published><updated>2019-06-07T00:00:00+09:00</updated><id>https://lahuman.github.io/20190607</id><content type="html" xml:base="https://lahuman.github.io/20190607/">&lt;h1 id=&quot;원하는-일을-하는게-문제인가&quot;&gt;원하는 일을 하는게 문제인가?&lt;/h1&gt;

&lt;p&gt;얼마전 본부장에게 들은 말이다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;너는 너가 원하는 일만 하는거 아니냐?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;그렇다 나는 내가 좋아하고 하고 싶은 일을 한다.&lt;/p&gt;

&lt;p&gt;이게 문제인가??&lt;/p&gt;

&lt;p&gt;개발팀에게 마케팅을 바라고, 퍼실레이팅을 바라는게 이상한거 아닌가?&lt;/p&gt;

&lt;p&gt;설사 개발팀이 마케팅을 한다 처도 전문 마케터를 이길수 없을 것이고, 퍼실레이트를 한다 처도 전문 퍼실레이터를 이실수 없을 텐데…&lt;/p&gt;

&lt;p&gt;개발자에게 개발을 못한다고 무어라 할수 있는건 이해하는데… 지금 문제는 모르겠다.&lt;/p&gt;

&lt;p&gt;포장은 &lt;strong&gt;소통과 공감&lt;/strong&gt;이라는데, 무엇에 대해 소통을 하지 못하였는지 공감을 못하였는지가 아니라&lt;/p&gt;

&lt;p&gt;협업하는 사람에게서 우리의 이야기가 나오지 않았다는 이야기를 들었다.&lt;/p&gt;

&lt;p&gt;못한단는 이야기를 들은게 아니라 문제 없으니 아무 이야기가 없는건데….&lt;/p&gt;

&lt;h2 id=&quot;어쩌라는건지-모르겠다&quot;&gt;어쩌라는건지 모르겠다.&lt;/h2&gt;</content><category term="단상" /><summary type="html">원하는 일을 하는게 무슨 문제인가?</summary></entry><entry><title type="html">Maven을 이용한 Springboot 프로젝트 repackage 하기</title><link href="https://lahuman.github.io/maven_springboot_repackage/" rel="alternate" type="text/html" title="Maven을 이용한 Springboot 프로젝트 repackage 하기" /><published>2019-06-04T00:00:00+09:00</published><updated>2019-06-04T00:00:00+09:00</updated><id>https://lahuman.github.io/maven_springboot_repackage</id><content type="html" xml:base="https://lahuman.github.io/maven_springboot_repackage/">&lt;h1 id=&quot;maven을-이용한-springboot-프로젝트-repackage-하기&quot;&gt;Maven을 이용한 Springboot 프로젝트 repackage 하기&lt;/h1&gt;

&lt;p&gt;다른 분이 작성한 Springboot 프로젝트를 패키징하게 되었다.&lt;/p&gt;

&lt;p&gt;해당 프로젝트는 maven으로 되어 있었기에 큰 문제가 없을꺼라 생각했다.&lt;/p&gt;

&lt;p&gt;내 업무 환경은 JDK 12가 설치되어 있었는데, spring-repackage를 하면 다음과 같은 오류가 발생하였다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ERROR] Failed to execute goal org.apache.maven.plugins:maven-jar-plugin:2.6:jar (default-jar) on project my-test-utils: Execution default-jar of goal org.apache.maven.plugins:maven-jar-plugin:2.6:jar failed: An API incompatibility was encountered while executing org.apache.maven.plugins:maven-jar-plugin:2.6:jar: java.lang.ExceptionInInitializerError: null
[ERROR] -----------------------------------------------------
[ERROR] realm =    plugin&amp;gt;org.apache.maven.plugins:maven-jar-plugin:2.6

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;에러 발생의 원인은 maven-plugin 버전 문제로, 다음과 같이 pom.xml에 추가 하면 된다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;build&amp;gt;
	&amp;lt;plugins&amp;gt;
		&amp;lt;plugin&amp;gt;
			&amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt;
			&amp;lt;artifactId&amp;gt;spring-boot-maven-plugin&amp;lt;/artifactId&amp;gt;
		&amp;lt;/plugin&amp;gt;
		&amp;lt;plugin&amp;gt;
			&amp;lt;groupId&amp;gt;org.apache.maven.plugins&amp;lt;/groupId&amp;gt;
			&amp;lt;artifactId&amp;gt;maven-jar-plugin&amp;lt;/artifactId&amp;gt;
			&amp;lt;version&amp;gt;3.1.0&amp;lt;/version&amp;gt;
		&amp;lt;/plugin&amp;gt;
	&amp;lt;/plugins&amp;gt;
&amp;lt;/build&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;추가로 다음과 같은 오류가 발생하면,&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;[ERROR] Failed to execute goal org.springframework.boot:spring-boot-maven-plugin:1.5.21.RELEASE:repackage (default-cli) on project lahuman: Execution default-cli of goal org.springframework.boot:spring-boot-maven-plugin:1.5.21.RELEASE:repackage failed: Source file must be provided -&amp;gt; [Help 1]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;a href=&quot;https://lahuman.github.io/maven_build_with_local_jar/&quot;&gt;Maven 배포시 Local Jar 파일과 함께 하기!&lt;/a&gt;내용과 같이 spring:repackage에 -U 옵션을 추가하면 해결 된다.&lt;/p&gt;

&lt;h3 id=&quot;오랜만에-java-보는듯-하다-요즘은-개인-프로젝트도-그냥-node로-개발-하게-된다&quot;&gt;오랜만에 JAVA 보는듯 하다. 요즘은 개인 프로젝트도 그냥 NODE로 개발 하게 된다.&lt;/h3&gt;

&lt;h2 id=&quot;참고자료&quot;&gt;참고자료&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://lahuman.github.io/maven_build_with_local_jar/&quot;&gt;Maven 배포시 Local Jar 파일과 함께 하기!&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://stackoverflow.com/questions/46353477/jdk9-and-maven-jar-plugin&quot;&gt;JDK9 and maven-jar-plugin&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="reactjs" /><category term="init" /><summary type="html">Failed to execute goal org.apache.maven.plugins:maven-jar-plugin:2.6:jar</summary></entry><entry><title type="html">Reactjs 초기 프로젝트 구성하기</title><link href="https://lahuman.github.io/reactjs_init/" rel="alternate" type="text/html" title="Reactjs 초기 프로젝트 구성하기" /><published>2019-05-26T00:00:00+09:00</published><updated>2019-05-26T00:00:00+09:00</updated><id>https://lahuman.github.io/reactjs_init</id><content type="html" xml:base="https://lahuman.github.io/reactjs_init/">&lt;h1 id=&quot;reactjs-초기-프로젝트-구성하기&quot;&gt;Reactjs 초기 프로젝트 구성하기&lt;/h1&gt;

&lt;p&gt;Reactjs 초기 프로젝트를 구성하려는 방법 중 가장 쉽고 널리 알려진 것은  &lt;a href=&quot;https://github.com/facebook/create-react-app&quot;&gt;Create React App&lt;/a&gt;를 이용하는 방법이다. 아래와 같이 실행하면 바로 프로젝트 구성이 완료된다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;npx create-react-app my-app
cd my-app
npm start
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;아쉬운 점은 무엇이 설치 되었는지 내가 알지 못하고, 또한 컴파일에 오랜 시간이 걸린다.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://facebook.github.io/create-react-app/docs/available-scripts#npm-run-eject&quot;&gt;npm run eject&lt;/a&gt;를 이용해서 묶음을 풀어 보면 너무 많은 것들이 설치 되어 있다.&lt;/p&gt;

&lt;p&gt;그래서 방법을 찾아 보던 중 &lt;a href=&quot;https://www.youtube.com/watch?v=LoMFC4kdrnQ&amp;amp;list=PLcqDmjxt30RtqbStQqk-eYMK8N-1SYIFn&amp;amp;index=17&quot;&gt;@babel/preset-env와 plugins&lt;/a&gt;이라는 유튜브를 보고 한땀씩 진행을 해보았다.&lt;/p&gt;

&lt;p&gt;우선 나에게 필요한 기본 모듈은 다음과 같다.&lt;/p&gt;

&lt;h3 id=&quot;기본-모듈&quot;&gt;기본 모듈&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;react&lt;/li&gt;
  &lt;li&gt;react-dom&lt;/li&gt;
  &lt;li&gt;react&lt;/li&gt;
  &lt;li&gt;react-router-dom&lt;/li&gt;
  &lt;li&gt;dotenv&lt;/li&gt;
  &lt;li&gt;axois&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;이들을 모두 설치하고 기본 테스트까지 된 프로젝트를 만들어 보았다.&lt;/p&gt;

&lt;p&gt;진행하면서 수정사항이 바로 바로 반영되는 &lt;a href=&quot;http://gaearon.github.io/react-hot-loader/&quot;&gt;React Hot Loader&lt;/a&gt;도 알게되어 추가 하였다.&lt;/p&gt;

&lt;p&gt;또한 컴파일을 위해 웹팩 설정을 하고 한땀 한땀 진행해보았다.&lt;/p&gt;

&lt;p&gt;어려운듯 쉬운듯 꽤 많은 시간이 소비 하고야 내가 원하는 결과를 확인 할 수 있었다.&lt;/p&gt;

&lt;h3 id=&quot;reactjs-start&quot;&gt;&lt;a href=&quot;https://github.com/lahuman/ReactJS-Start&quot;&gt;ReactJS-Start&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;많이 삽질하면서 많이 배운 시간이었다.&lt;/p&gt;

&lt;h2 id=&quot;참고자료&quot;&gt;참고자료&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/facebook/create-react-app&quot;&gt;Create React App&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=LoMFC4kdrnQ&amp;amp;list=PLcqDmjxt30RtqbStQqk-eYMK8N-1SYIFn&amp;amp;index=17&quot;&gt;@babel/preset-env와 plugins&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://velog.io/@padakim/Webpack4-for-React-%EB%A6%AC%EC%95%A1%ED%8A%B8%EB%A5%BC-%EC%9C%84%ED%95%9C-%EC%9B%B9%ED%8C%A94-1-&quot;&gt;Webpack4 for React (리액트를 위한 웹팩4) - 1&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://medium.com/@trekinbami/using-environment-variables-in-react-6b0a99d83cf5&quot;&gt;Using environment variables in React&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://gaearon.github.io/react-hot-loader/&quot;&gt;React Hot Loader&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="reactjs" /><category term="init" /><summary type="html">'npx create-react-app my-app' 는 너무 무겁다.</summary></entry><entry><title type="html">NodeJs에서 Parse Error: HPE_HEADER_OVERFLOW 발생</title><link href="https://lahuman.github.io/nodejs_HEP_HEADER_OVERFLOW/" rel="alternate" type="text/html" title="NodeJs에서 Parse Error: HPE_HEADER_OVERFLOW 발생" /><published>2019-05-18T00:00:00+09:00</published><updated>2019-05-18T00:00:00+09:00</updated><id>https://lahuman.github.io/nodejs_HEP_HEADER_OVERFLOW</id><content type="html" xml:base="https://lahuman.github.io/nodejs_HEP_HEADER_OVERFLOW/">&lt;h1 id=&quot;nodejs에서-parse-error-hpe_header_overflow-발생&quot;&gt;NodeJs에서 Parse Error: HPE_HEADER_OVERFLOW 발생&lt;/h1&gt;

&lt;p&gt;&lt;a href=&quot;https://www.npmjs.com/package/x-ray&quot;&gt;x-ray(node moudle)&lt;/a&gt;를 이용해서 크롤링을 개발하고 있던 중, 다음과 같은 오류를 만나게 되었다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;(node:63533) UnhandledPromiseRejectionWarning: Error: Parse Error
    at Socket.socketOnData (_http_client.js:442:20)
    at Socket.emit (events.js:189:13)
    at addChunk (_stream_readable.js:284:12)
    at readableAddChunk (_stream_readable.js:265:11)
    at Socket.Readable.push (_stream_readable.js:220:10)
    at TCP.onStreamRead (internal/stream_base_commons.js:94:17)
     bytesParsed: 6545,
  code: 'HPE_HEADER_OVERFLOW',
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;이 오류는 3개의 사이트중 1개의 사이트에서만 발생하였다.&lt;/p&gt;

&lt;p&gt;원인을 파악하기 위해 검색을 하다 다음과 같은 내용을 확인하였다.&lt;/p&gt;

&lt;p&gt;Node.js의 http 80KB의 Header 크기 제한을 가지고 있고 만약 큰 Header 크기가 필요 하다면, 명령을 실행시 특정 argument를 추가 해야 한다.&lt;/p&gt;

&lt;h3 id=&quot;해결책은-다음과-같다&quot;&gt;해결책은 다음과 같다!&lt;/h3&gt;

&lt;p&gt;실행하는 node 명령와 함께 &lt;strong&gt;–max-http-header-size=크기&lt;/strong&gt; argument를 추가 해라&lt;/p&gt;

&lt;p&gt;예제)&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$&amp;gt; node --max-http-header-size=81000 app.js
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;에러가 안날때 까지 최대 http header 크기를 키우면 된다.&lt;/p&gt;

&lt;p&gt;&lt;del&gt;근데… 이건 에러나는 사이트가 문제 아닌가? 80KB를 넘는 헤더를 왜 넘기지??&lt;/del&gt;&lt;/p&gt;

&lt;h2 id=&quot;참고자료&quot;&gt;참고자료&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/Azure/azure-cosmos-js/issues/221&quot;&gt;Trying to query documents results in a Parse Error: HPE_HEADER_OVERFLOW #221&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://stackoverflow.com/questions/35328725/hpe-header-overflow-exception-when-make-http-request/35330480#35330480&quot;&gt;HPE_HEADER_OVERFLOW exception when make http.request&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/nodejs/http-parser/blob/678a9e21f11e5ea93e5e17a2302390f88a6a8c46/http_parser.h#L64&quot;&gt;nodejs/http-parser&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.npmjs.com/package/x-ray&quot;&gt;x-ray(node moudle)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="error" /><category term="nodejs" /><summary type="html">처음 보는 에러가 발생하였다.</summary></entry><entry><title type="html">Google Docs Sheets 연동 하기</title><link href="https://lahuman.github.io/google_sheet_api/" rel="alternate" type="text/html" title="Google Docs Sheets 연동 하기" /><published>2019-05-15T00:00:00+09:00</published><updated>2019-05-15T00:00:00+09:00</updated><id>https://lahuman.github.io/google_sheet_api</id><content type="html" xml:base="https://lahuman.github.io/google_sheet_api/">&lt;h1 id=&quot;google-docs-sheets-연동-하기&quot;&gt;google docs Sheets 연동 하기&lt;/h1&gt;

&lt;p&gt;이번에 진행되는 프로젝트에서 데이터를 Google Docs의 Sheets에 넣어 두고 해당 데이터를 활용하여 대시보드를 구현하게 되었다.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://developers.google.com/sheets/guides/concepts?hl=ko&quot;&gt;Google Sheets API 소개&lt;/a&gt;에도 잘 나와 있듯이, API를 활용하여 쉽게 이용할 수 있다.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://developers.google.com/sheets/api/quickstart/nodejs&quot;&gt;Node.js Quickstart&lt;/a&gt;에서 제공되는 소스는 아래와 같다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;const fs = require('fs');
const readline = require('readline');
const {google} = require('googleapis');

// If modifying these scopes, delete token.json.
const SCOPES = ['https://www.googleapis.com/auth/spreadsheets.readonly'];
// The file token.json stores the user's access and refresh tokens, and is
// created automatically when the authorization flow completes for the first
// time.
const TOKEN_PATH = 'token.json';

// Load client secrets from a local file.
fs.readFile('credentials.json', (err, content) =&amp;gt; {
  if (err) return console.log('Error loading client secret file:', err);
  // Authorize a client with credentials, then call the Google Sheets API.
  authorize(JSON.parse(content), listMajors);
});

/**
 * Create an OAuth2 client with the given credentials, and then execute the
 * given callback function.
 * @param {Object} credentials The authorization client credentials.
 * @param {function} callback The callback to call with the authorized client.
 */
function authorize(credentials, callback) {
  const {client_secret, client_id, redirect_uris} = credentials.installed;
  const oAuth2Client = new google.auth.OAuth2(
      client_id, client_secret, redirect_uris[0]);

  // Check if we have previously stored a token.
  fs.readFile(TOKEN_PATH, (err, token) =&amp;gt; {
    if (err) return getNewToken(oAuth2Client, callback);
    oAuth2Client.setCredentials(JSON.parse(token));
    callback(oAuth2Client);
  });
}

/**
 * Get and store new token after prompting for user authorization, and then
 * execute the given callback with the authorized OAuth2 client.
 * @param {google.auth.OAuth2} oAuth2Client The OAuth2 client to get token for.
 * @param {getEventsCallback} callback The callback for the authorized client.
 */
function getNewToken(oAuth2Client, callback) {
  const authUrl = oAuth2Client.generateAuthUrl({
    access_type: 'offline',
    scope: SCOPES,
  });
  console.log('Authorize this app by visiting this url:', authUrl);
  const rl = readline.createInterface({
    input: process.stdin,
    output: process.stdout,
  });
  rl.question('Enter the code from that page here: ', (code) =&amp;gt; {
    rl.close();
    oAuth2Client.getToken(code, (err, token) =&amp;gt; {
      if (err) return console.error('Error while trying to retrieve access token', err);
      oAuth2Client.setCredentials(token);
      // Store the token to disk for later program executions
      fs.writeFile(TOKEN_PATH, JSON.stringify(token), (err) =&amp;gt; {
        if (err) return console.error(err);
        console.log('Token stored to', TOKEN_PATH);
      });
      callback(oAuth2Client);
    });
  });
}

/**
 * Prints the names and majors of students in a sample spreadsheet:
 * @see https://docs.google.com/spreadsheets/d/1BxiMVs0XRA5nFMdKvBdBZjgmUUqptlbs74OgvE2upms/edit
 * @param {google.auth.OAuth2} auth The authenticated Google OAuth client.
 */
function listMajors(auth) {
  const sheets = google.sheets({version: 'v4', auth});
  sheets.spreadsheets.values.get({
    spreadsheetId: '1BxiMVs0XRA5nFMdKvBdBZjgmUUqptlbs74OgvE2upms',
    range: 'Class Data!A2:E',
  }, (err, res) =&amp;gt; {
    if (err) return console.log('The API returned an error: ' + err);
    const rows = res.data.values;
    if (rows.length) {
      console.log('Name, Major:');
      // Print columns A and E, which correspond to indices 0 and 4.
      rows.map((row) =&amp;gt; {
        console.log(`${row[0]}, ${row[4]}`);
      });
    } else {
      console.log('No data found.');
    }
  });
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;참 좋은 세상이다!&lt;/p&gt;

&lt;h2 id=&quot;참고자료&quot;&gt;참고자료&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://developers.google.com/sheets/guides/concepts?hl=ko&quot;&gt;Google Sheets API 소개&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://developers.google.com/sheets/api/quickstart/nodejs&quot;&gt;Node.js Quickstart&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="sheets" /><category term="google" /><summary type="html">Google Docs Sheets를 이용하면 DB도 필요 없겠다!!</summary></entry><entry><title type="html">express에서 File Upload 구현 하기</title><link href="https://lahuman.github.io/express_fileupload/" rel="alternate" type="text/html" title="express에서 File Upload 구현 하기" /><published>2019-05-12T00:00:00+09:00</published><updated>2019-05-12T00:00:00+09:00</updated><id>https://lahuman.github.io/express_fileupload</id><content type="html" xml:base="https://lahuman.github.io/express_fileupload/">&lt;h1 id=&quot;express에서-file-upload-구현-하기&quot;&gt;express에서 File Upload 구현 하기&lt;/h1&gt;

&lt;p&gt;업로드는 복잡하게 구현 하지 않고 모듈을 사용하면 쉽게 할 수 있다.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.npmjs.com/package/express-fileupload&quot;&gt;express-fileupload&lt;/a&gt;를 이용하면 된다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# express 의 app.js 에서 다음과 같이 사용 
const fileUpload = require('express-fileupload');
const cors = require('cors');
const fs = require('fs');

app.use(cors());
app.use(fileUpload());

app.post('/upload', (req, res, next) =&amp;gt; {
  let uploadFile = req.files.file
  const fileName = req.files.file.name
  uploadFile.mv(
    `${__dirname}/public/files/${fileName}`,
    function (err) {
      if (err) {
        return res.status(500).send(err);
      }

      res.json(JSON.parse(fs.readFileSync(`${__dirname}/public/files/${fileName}`, 'utf8')));
    }
  );
})
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;그게 어렵지 않게 한다.&lt;/p&gt;

&lt;h2 id=&quot;참고자료&quot;&gt;참고자료&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.npmjs.com/package/express-fileupload&quot;&gt;express-fileupload&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="upload" /><category term="express" /><summary type="html">업로드</summary></entry><entry><title type="html">express에서 stream을 이용하여 파일 다운로드 하기</title><link href="https://lahuman.github.io/express_filedownload/" rel="alternate" type="text/html" title="express에서 stream을 이용하여 파일 다운로드 하기" /><published>2019-05-09T00:00:00+09:00</published><updated>2019-05-09T00:00:00+09:00</updated><id>https://lahuman.github.io/express_filedownload</id><content type="html" xml:base="https://lahuman.github.io/express_filedownload/">&lt;h1 id=&quot;express에서-stream을-이용하여-파일-다운로드-하기&quot;&gt;express에서 stream을 이용하여 파일 다운로드 하기&lt;/h1&gt;

&lt;p&gt;파일다운로드를 하기위해서는 스트림을 이용해야 한다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;const mime = require('mime-types');

// set header for download
let mimeType = mime.lookup('news_20190501.pdf');
res.setHeader('Content-disposition', 'attachment; filename=' + 'news_20190501.pdf');
res.setHeader('Content-type', mimeType);
fs.createReadStream(__basedir + '/public/files/download/pdf/news_20190501.pdf').pipe(res);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;다음과 같이 하면 파일을 스트림을 통해서 다운로드할수 있다.&lt;/p&gt;

&lt;h2 id=&quot;같이-일하는-분이-알려주심&quot;&gt;같이 일하는 분이 알려주심!&lt;/h2&gt;</content><category term="download" /><category term="express" /><summary type="html">다운로드!</summary></entry></feed>

<?xml version="1.0" encoding="utf-8"?><?xml-stylesheet type="text/xml" href="https://lahuman.github.io/feed.xslt.xml"?><feed xmlns="http://www.w3.org/2005/Atom"><generator uri="http://jekyllrb.com" version="3.8.4">Jekyll</generator><link href="https://lahuman.github.io/feed.xml" rel="self" type="application/atom+xml" /><link href="https://lahuman.github.io/" rel="alternate" type="text/html" /><updated>2019-09-15T16:25:29+09:00</updated><id>https://lahuman.github.io/</id><title type="html">lahuman</title><subtitle>열심히 사는 아저씨</subtitle><entry><title type="html">에세이를 써보자</title><link href="https://lahuman.github.io/20190915/" rel="alternate" type="text/html" title="에세이를 써보자" /><published>2019-09-15T00:00:00+09:00</published><updated>2019-09-15T00:00:00+09:00</updated><id>https://lahuman.github.io/20190915</id><content type="html" xml:base="https://lahuman.github.io/20190915/">&lt;h1 id=&quot;에세이를-써보자&quot;&gt;에세이를 써보자&lt;/h1&gt;

&lt;blockquote&gt;
  &lt;p&gt;나는 그 이층 방에서 내가 알고 있는 것 한 가지에 단편을 하나씩 쓰기로 결심했다. 글을 쓸 때마다 이렇게 하려고 노력했다. 그것은 엄격하고 효과적인 훈련 방법이었다.&lt;/p&gt;
  &lt;ul&gt;
    &lt;li&gt;어니스트 헤밍웨어&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;나는 욕심이 많다. 문제는 욕심은 많은데 비해 능력도 적고 게으르기까지 하다. 욕심이 있어서 여러 가지 일을 시도하다 포기하기를 수백 번씩 하였다. 하지만 “인간의 욕심은 끝이 없고 같은 실수를 반복한다”라고 누군가 이야기하지 않았던가, 회사 내 동아리 같은 뭉클(‘뭉치면 클 수 있다’의 줄임말)에서 글쓰기 강좌가 있다고 하여 능력은 없지만 욕심을 내서 신청하였다. 다행히 가입이 되었고, 2019년 8월 22일 첫 뭉클 이 시작되었다. 
강사로 오신 분은 편집자를 거쳐 에세이 쓰기 워크숍을 진행하시며 책을 내신 김은경 작가님이다.&lt;/p&gt;

&lt;h2 id=&quot;첫-시간에는-일기와-에세이의-차이점-글쓰기를-즐겨야-한다-등을-알려주셨고-가장-기억에-남는-다음과-같은-말씀을-하셨다&quot;&gt;첫 시간에는 일기와 에세이의 차이점, 글쓰기를 즐겨야 한다 등을 알려주셨고, 가장 기억에 남는 다음과 같은 말씀을 하셨다.&lt;/h2&gt;

&lt;p&gt;“나만의 유니크한 글을 쓰세요. 내가 신경 쓰이는 것에 집중하셔요.”&lt;/p&gt;

&lt;p&gt;나만의 글을 쓴다는 건 어떤 의미일지 많은 고민을 해보았다. 내가 잘하는 것과 관심 있는 무언가에 대하여 글을 쓰는 일이 쉽지 않았다. 물론 이런 문제에 대한 해답도 주셨다.&lt;/p&gt;

&lt;p&gt;“우선 글을 써보세요. 시작이 어려우면 생각나는 데로 작성해보셔요.”&lt;/p&gt;

&lt;p&gt;글을 작성하기 위해 많은 생각을 하기보다는 내가 알고 있는 한 가지에 집중해서 글을 써보는 작업이 어니스트 헤밍웨이도 시도한 훈련 방법이었다고 한다. 뭐 그렇게 대단한 글은 아니지만 생각나는 대로 일단 써보기로 다짐하고 글을 쓰기 시작했다.&lt;/p&gt;

&lt;p&gt;처음 쓴 글은 논문을 작성하면서 겪었던 일에 대한 경험이다. 당시에는 국어가 정말 어렵다고 느꼈으며, 나의 국어 실력이 많이 부족해서 교수님을 비롯해 선배님들에게 많은 도움을 받았다. 가장 어려웠던 부분은 내 생각을 전달하기 위한 문장을 만드는 작업이었다. 시간이 지나서 지금이 되었을 때, 크게 발전하지는 못하였지만 글을 보는 눈이 넓어졌다는 내용의 글을 작성하였다.
“하나의 문장이 너무 길어도 안되고, 너무 많은 뜻을 가져서도 안된다. 하나의 문장은 하나의 뜻을 가지는 게 가장 좋다.”라는 내용을 두 번째 강의 시간에 들었다. 또한 내용에서 제목을 뽑아내는 방식을 알려주시고 몇 가지 글을 가지고 연습을 하였다. 다른 분들과 의견을 나누면서 생각지도 못한 제목을 뽑는 능력에 감탄할 수밖에 없었다.&lt;/p&gt;

&lt;h2 id=&quot;두-번째-쓴-글은-내가-할-때-행복하다라는-내용의-문장을-만드는-연습을-하였고-나는-육아에서-느끼는-행복한-순간을-작성하였다-아이가-퇴근-후-문을-열었을-때-아빠-하며-달려온다거나-새우잠을-자고-있는-아내와-아이를-볼-때-느끼는-행복에-대하여-작성하였다&quot;&gt;두 번째 쓴 글은 “내가 ~할 때 행복하다.”라는 내용의 문장을 만드는 연습을 하였고 나는 육아에서 느끼는 행복한 순간을 작성하였다. 아이가 퇴근 후 문을 열었을 때 “아빠~” 하며 달려온다거나, 새우잠을 자고 있는 아내와 아이를 볼 때 느끼는 행복에 대하여 작성하였다.&lt;/h2&gt;

&lt;h2 id=&quot;세-번째-시간에는-정확한-문장을-작성하고-단어의-선택과-띄어쓰기-마침표-기호의-의미-등에-대해서-배웠다-개인적으로는-가장-어려운-시간이었다-마침표를-빼먹은-문장을-찾아내는-분은-정말-대단하셨다-문장을-이해하기-쉽게-수정하는-연습-또한-쉽지-않았고-국어가-참-어렵다고-다시-느끼는-시간이-되었다&quot;&gt;세 번째 시간에는 정확한 문장을 작성하고 단어의 선택과 띄어쓰기, 마침표, 기호의 의미 등에 대해서 배웠다. 개인적으로는 가장 어려운 시간이었다. 마침표를 빼먹은 문장을 찾아내는 분은 정말 대단하셨다. 문장을 이해하기 쉽게 수정하는 연습 또한 쉽지 않았고, 국어가 참 어렵다고 다시 느끼는 시간이 되었다.&lt;/h2&gt;

&lt;p&gt;9월 15일 자정까지 과제로 글을 써서 이메일로 보내드려야 한다. 세 번의 강의를 듣고 내 글쓰기 실력이 눈에 보이게 향상되었거나, 스타일이 달라지지는 않았다. 하지만 글을 쓰는데 느끼는 두려움과 부끄러움은 작아졌다. 용기 또는 만용으로 글을 쓰고 있다.&lt;/p&gt;

&lt;h2 id=&quot;다-쓴-글을-읽고-수정하고-다시-읽고를-반복하는데-에세이라기보다는-일기로-느껴진다-무엇이-문제인지-첫-술에-배가-부르면-천재이겠지라는-위안을-하면서-글을-마친다&quot;&gt;다 쓴 글을 읽고 수정하고 다시 읽고를 반복하는데 에세이라기보다는 일기로 느껴진다. 무엇이 문제인지… 첫 술에 배가 부르면 &lt;strong&gt;천재&lt;/strong&gt;이겠지라는 위안을 하면서 글을 마친다.&lt;/h2&gt;</content><category term="단상" /><summary type="html">에세이일까? 일기일까?</summary></entry><entry><title type="html">회사에서 테니스 동호회를 가입하였다.</title><link href="https://lahuman.github.io/20190909/" rel="alternate" type="text/html" title="회사에서 테니스 동호회를 가입하였다." /><published>2019-09-09T00:00:00+09:00</published><updated>2019-09-09T00:00:00+09:00</updated><id>https://lahuman.github.io/20190909</id><content type="html" xml:base="https://lahuman.github.io/20190909/">&lt;h1 id=&quot;회사에서-테니스-동호회에-가입했다&quot;&gt;회사에서 테니스 동호회에 가입했다&lt;/h1&gt;

&lt;p&gt;이번에 3번째 참석인데, 오늘은 사람이 없어서 알려주시는 분에게 오랜 시간 동안 1:1 개인 레슨을 받았다.&lt;/p&gt;

&lt;p&gt;“앞으로 나아가면서 이렇게 빵~ 치셔요.” 라는 강사분의 말씀을 머리로는 이해하지만,&lt;/p&gt;

&lt;p&gt;내 몸은 웃푼 춤을 춘다.&lt;/p&gt;

&lt;p&gt;공 없이 자세로는 어떻게 따라 하는데 막상 공이 넘어서 나에게 돌진하면 뻣뻣한 로보트 마냥 이상한 자세로 친다.&lt;/p&gt;

&lt;p&gt;가르쳐 주시는 강사분도 많이 힘들었을꺼다.&lt;/p&gt;

&lt;h2 id=&quot;그래도-재미있게-잘-놀았다&quot;&gt;그래도 재미있게 잘 놀았다!&lt;/h2&gt;</content><category term="단상" /><summary type="html">운동 부족인데 헬스는 너무 재미 없어서...</summary></entry><entry><title type="html">javascript에서 제공되는 console methods</title><link href="https://lahuman.github.io/javascript_console/" rel="alternate" type="text/html" title="javascript에서 제공되는 console methods" /><published>2019-08-31T00:00:00+09:00</published><updated>2019-08-31T00:00:00+09:00</updated><id>https://lahuman.github.io/javascript_console</id><content type="html" xml:base="https://lahuman.github.io/javascript_console/">&lt;h1 id=&quot;javascript에서-제공되는-console-methods&quot;&gt;javascript에서 제공되는 console methods&lt;/h1&gt;

&lt;p&gt;오늘 javascript 강좌를 보다가 다음과 같은 코드를 보았다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;console.time('Label');
... 성능측정(시간 측정)을 하려는 코드
console.timeEnd('Label');

... 결과
Label: 13998.528076171875ms
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;time이라는 method는 인자로 받은 문자열을 기준으로 실행 시간의 시작을 의미하고, timerEnd method는 인자로 받은 문자열을 기준으로 실행 시간을 화면에 표출하고 종료 한다.
이외에 timeLog도 제공하며 시작이후 지금가지 시간을 표기한다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;console.time('Label');
... 성능측정(시간 측정)을 하려는 코드

console.timeLog('Label');
... 출력
Label: 7327.245849609375ms

console.timeEnd('Label');

... 결과
Label: 13998.528076171875ms
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;기본적으로 console의 info, debug, trace, log, warn 과 같이 로그 레벨을 기준으로 사용하거나, 특별하게 dir(object 형식으로 출력) method 정도 사용해보았다.&lt;/p&gt;

&lt;p&gt;금일 알게된건 console에 더 많은 옵션들이 존재 한다는 것이다.&lt;/p&gt;

&lt;h2 id=&quot;console의-옵션-정리&quot;&gt;console의 옵션 정리&lt;/h2&gt;

&lt;p&gt;### - Console.assert()
    + 첫 번째 매개변수가 false인 경우 메시지와 스택 추적을 출력합니다.
 ### - Console.clear()
    + 콘솔의 내용을 지웁니다.
 ### - Console.count()
    + 주어진 라벨로 메서드를 호출한 횟수를 출력합니다.
 ### - Console.countReset()
    + 주어진 라벨의 횟수를 초기화합니다.
 ### - Console.debug()
    + “debug” 중요도로 메시지를 출력합니다.
참고: Chromium 브라우저는 58 버전 이후 브라우저 콘솔의 “Verbose” 레벨을 선택하지 않으면 이 메서드의 출력 결과가 보이지 않습니다.
 ### - Console.dir()
    + 주어진 JavaScript 객체의 속성 목록을 상호작용 가능한 형태로 표시합니다. 속성 값이 다른 객체라면 펼쳐서 살펴볼 수 있습니다.
 ### - Console.dirxml()
    + 객체를 XML/HTML 요소 형태로 나타낼 수 있으면 그렇게 표시하고, 아닐 경우 JavaScript 객체 형태로 표시합니다.&lt;/p&gt;

&lt;p&gt;### - Console.error()
    + 오류 메시지를 출력합니다. 추가 매개변수와 함께 문자열 치환을 사용할 수 있습니다.
 ### - Console.exception()  표준 아님, 사용하지 않기를 권고
    + error()의 별칭입니다.
 ### - Console.group()
    + 새로운 인라인 그룹을 생성해, 이후 모든 출력을 한 단계 들여씁니다. 그룹을 나오려면 groupEnd()를 호출하세요.
 ### - Console.groupCollapsed()
    + 새로운 인라인 그룹을 생성해, 이후 모든 출력을 한 단계 들여씁니다. 그러나 group()과 달리, groupCollapsed()로 생성한 그룹은 처음에 접혀 있습니다. 그룹을 나오려면 groupEnd()를 호출하세요.
 ### - Console.groupEnd()
    + 현재 인라인 그룹을 나옵니다.
 ### - Console.info()
    + 정보 메시지를 출력합니다. 추가 매개변수와 함께 문자열 치환을 사용할 수 있습니다.
 ### - Console.log()
    + 일반 메시지를 출력합니다. 추가 매개변수와 함께 문자열 치환을 사용할 수 있습니다.
 ### - Console.profile()
    + 브라우저의 내장 프로파일러(Firefox 성능 측정 도구 등)를 실행합니다. 선택 사항으로 프로파일에 이름을 붙일 수 있습니다.
 ### - Console.profileEnd()
    + 프로파일러를 멈춥니다. 프로파일 결과는 브라우저의 성능 측정 도구(Firefox 성능 측정 도구 등)에서 확인할 수 있습니다.
 ### - Console.table()
    + 표 형태의 데이터를 표에 그립니다.
 ### - Console.time()
    + 주어진 이름의 타이머를 실행합니다. 하나의 페이지에서는 최대 10,000개의 타이머를 동시에 실행할 수 있습니다.
 ### - Console.timeEnd()
    + 지정한 타이머를 멈추고, 소요시간을 출력합니다.
 ### - Console.timeStamp() 표준 아님
    + 브라우저의 타임라인이나 워터폴에 마커를 추가합니다.
 ### - Console.trace()
    + 스택 추적을 출력합니다.
 ### - Console.warn()
    + 경고 메시지를 출력합니다. 추가 매개변수와 함께 문자열 치환을 사용할 수 있습니다.&lt;/p&gt;

&lt;p&gt;몰라서 쓰지 못했던 옵션이 6개도 넘는다. 앞으로 프로젝트에서 많이 사용해보자!&lt;/p&gt;

&lt;h2 id=&quot;출처&quot;&gt;출처&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Console&quot;&gt;console&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="console" /><category term="javascript" /><summary type="html">생각보다 많은 기능을 제공하는데, 제대로 알지 못했다.</summary></entry><entry><title type="html">휴일 관리  feat.ORACLE DBMS</title><link href="https://lahuman.github.io/holiday_oracle/" rel="alternate" type="text/html" title="휴일 관리  feat.ORACLE DBMS" /><published>2019-08-27T00:00:00+09:00</published><updated>2019-08-27T00:00:00+09:00</updated><id>https://lahuman.github.io/holiday_oracle</id><content type="html" xml:base="https://lahuman.github.io/holiday_oracle/">&lt;h1 id=&quot;휴일-관리--featoracle-dbms&quot;&gt;휴일 관리  feat.ORACLE DBMS&lt;/h1&gt;

&lt;p&gt;휴일 관리를 할때, 오라클 DBMS를 가지고 있을 경우 다음과 같은 형식의 테이블을 기반으로 처리 하며 쉽다!&lt;/p&gt;

&lt;h2 id=&quot;테이블-구조&quot;&gt;테이블 구조&lt;/h2&gt;

&lt;p&gt;일반적으로 다음과 같은 데이터 구조를 가지고 있다고 생각하자&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;CREATE TABLE HOLIDAY (
	SEQ NUMBER PRIMARY KEY,   -- 일련번호
	DT DATE, 									-- 일자
	WEEK_NM VARCHAR(50),      -- 요일명
	HOLI_NM VARCHAR(50),      -- 휴일명
	HOLI_YN VARCHAR(1),       -- 휴일 여부
	REG_DATE DATE,  					-- 등록자 
	REG_USER VARCHAR(50),     -- 등록일
	REG_DATE DATE,     				-- 수정자
	REG_USER VARCHAR(50)      -- 수정일
)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;휴일-구하는-sql&quot;&gt;휴일 구하는 SQL&lt;/h2&gt;

&lt;p&gt;함께 일하는 분이 알려주신 SQL, 복잡한듯 쉬운듯 하다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;/*특정일(&amp;amp;stdDate) 기준 N영업일수(&amp;amp;dayCnt) 전/후 영업일 구하기*/
SELECT MAX(DT) AS DT
  FROM (SELECT /*+ INDEX_ASC(CCC(DT)) */
               MAX(TO_CHAR(CCC.DT, 'YYYYMMDD')) AS DT
          FROM HOLIDAY CCC
         WHERE TO_NUMBER(&amp;amp;dayCnt) &amp;gt; 0
           AND CCC.DT &amp;gt; TO_DATE(&amp;amp;stdDate, 'YYYYMMDD')
           AND (CASE WHEN CCC.WEEK_NM IN ('Sat', 'Sun') THEN 'Y'
                     ELSE CCC.HOLI_YN
                 END) = 'N'
           AND ROWNUM &amp;lt;= (SELECT MAX(LEVEL)
                            FROM DUAL
                         CONNECT BY LEVEL &amp;lt;= TO_NUMBER(&amp;amp;dayCnt))
         UNION ALL
        SELECT MAX(TO_CHAR(CCC.DT, 'YYYYMMDD')) AS DT
          FROM HOLIDAY CCC
         WHERE TO_NUMBER(&amp;amp;dayCnt) = 0
           AND CCC.DT = TO_DATE(&amp;amp;stdDate, 'YYYYMMDD')
         UNION ALL
        SELECT /*+ INDEX_DESC(CCC(DT)) */
               MIN(TO_CHAR(CCC.DT, 'YYYYMMDD')) AS DT
          FROM HOLIDAY CCC
         WHERE TO_NUMBER(&amp;amp;dayCnt) &amp;lt; 0
           AND CCC.DT &amp;lt; TO_DATE(&amp;amp;stdDate, 'YYYYMMDD')
           AND (CASE WHEN CCC.WEEK_NM IN ('Sat', 'Sun') THEN 'Y'
                     ELSE CCC.HOLI_YN
                 END) = 'N'
           AND ROWNUM &amp;lt;= (SELECT MAX(LEVEL)
                            FROM DUAL
                         CONNECT BY LEVEL &amp;lt;= ABS(TO_NUMBER(&amp;amp;dayCnt)))
       );


/*두 날짜사이(&amp;amp;frDt ~ &amp;amp;toDt) 영업일수 구하기*/
SELECT MAX(WOKING_DDCNT) AS WOKING_DDCNT
  FROM (SELECT MAX(WOKING_DDCNT) AS WOKING_DDCNT
          FROM (SELECT COUNT(*) AS WOKING_DDCNT
                  FROM HOLIDAY CCC
                 WHERE CCC.DT &amp;gt;= TO_DATE(TO_CHAR(TO_DATE(&amp;amp;frDt, 'YYYYMMDD') 1, 'YYYYMMDD') || '000000', 'YYYYMMDDHH24MISS')
                   AND CCC.DT &amp;lt;= TO_DATE(TO_CHAR(TO_DATE(&amp;amp;toDt, 'YYYYMMDD')    , 'YYYYMMDD') || '235959', 'YYYYMMDDHH24MISS')
                   AND (CASE WHEN CCC.WEEK_NM IN ('Sat', 'Sun') THEN 'Y'
                             ELSE CCC.HOLI_YN
                         END) = 'N')
         WHERE TO_DATE(&amp;amp;frDt, 'YYYYMMDD') &amp;lt; TO_DATE(&amp;amp;toDt, 'YYYYMMDD')
         UNION ALL
        SELECT MAX(WOKING_DDCNT) * -1 AS WOKING_DDCNT
          FROM (SELECT COUNT(*) AS WOKING_DDCNT
                  FROM HOLIDAY CCC
                 WHERE CCC.DT &amp;gt;= TO_DATE(TO_CHAR(TO_DATE(&amp;amp;frDt, 'YYYYMMDD') 1, 'YYYYMMDD') || '000000', 'YYYYMMDDHH24MISS')
                   AND CCC.DT &amp;lt;= TO_DATE(TO_CHAR(TO_DATE(&amp;amp;toDt, 'YYYYMMDD')    , 'YYYYMMDD') || '235959', 'YYYYMMDDHH24MISS')
                   AND (CASE WHEN CCC.WEEK_NM IN ('Sat', 'Sun') THEN 'Y'
                             ELSE CCC.HOLI_YN
                         END) = 'N')
         WHERE TO_DATE(&amp;amp;frDt, 'YYYYMMDD') &amp;gt; TO_DATE(&amp;amp;toDt, 'YYYYMMDD')
         UNION ALL
        SELECT 0 AS WOKING_DDCNT
          FROM DUAL
         WHERE TO_DATE(&amp;amp;frDt, 'YYYYMMDD') = TO_DATE(&amp;amp;toDt, 'YYYYMMDD')
       );
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;휴일-관리는-어느-서비스이든-필요하게-된다-요즘은-공공-api의-공휴일을-제공하여-쉽게-사용할-수-있다&quot;&gt;휴일 관리는 어느 서비스이든 필요하게 된다. 요즘은 공공 API의 공휴일을 제공하여 쉽게 사용할 수 있다.&lt;/h2&gt;</content><category term="oracle" /><category term="holiday" /><summary type="html">오라클 DBMS 기반하에 휴일 관리</summary></entry><entry><title type="html">글쓰기 클래스 - 1 과제</title><link href="https://lahuman.github.io/write_class_1_homework/" rel="alternate" type="text/html" title="글쓰기 클래스 - 1 과제" /><published>2019-08-26T00:00:00+09:00</published><updated>2019-08-26T00:00:00+09:00</updated><id>https://lahuman.github.io/write_class_1_homework</id><content type="html" xml:base="https://lahuman.github.io/write_class_1_homework/">&lt;h1 id=&quot;1장-일기-말고-에세이-쓰기&quot;&gt;1장 일기 말고 에세이 쓰기!&lt;/h1&gt;

&lt;blockquote&gt;
  &lt;p&gt;지난 시간에 배운 내용 정리&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ol&gt;
  &lt;li&gt;아무 것이나 매일 써라!&lt;/li&gt;
  &lt;li&gt;글쓰기 == 즐겁다
    &lt;ul&gt;
      &lt;li&gt;자신이 즐거운 글을 쓴다.&lt;/li&gt;
      &lt;li&gt;글을 완성한다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;신경 쓰이는 것에 집중 하라
    &lt;ul&gt;
      &lt;li&gt;일상에서 특별한 것을 찾아내는 기술&lt;/li&gt;
      &lt;li&gt;일상을 잘 관찰 하자&lt;/li&gt;
      &lt;li&gt;나만의 유니크한 글을 쓰자
        &lt;ul&gt;
          &lt;li&gt;남이 생각하지 않은 메시지를 쓰자&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;에세이란?
    &lt;ul&gt;
      &lt;li&gt;제 3자에게 전달하기 위해 작성&lt;/li&gt;
      &lt;li&gt;모르는 사람도 이해하기 쉽게 자세히 작성&lt;/li&gt;
      &lt;li&gt;감정을 움직이는 글이 좋음&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;글 쓸때 추가 팁
    &lt;ul&gt;
      &lt;li&gt;감정 V.S 메시지
        &lt;ul&gt;
          &lt;li&gt;둘중 하나는 글에 담자&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;다른 유명인의 글을 인용&lt;/li&gt;
      &lt;li&gt;첫 문장을 “ 로 시작&lt;/li&gt;
      &lt;li&gt;한(큰) 주제를 관통하게 쓰자&lt;/li&gt;
      &lt;li&gt;타겟을 명확히 하자&lt;/li&gt;
      &lt;li&gt;클라이맥스에서 논리적/상세한 묘사/느리게 등으로 증폭 하자&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;과제로는-마음에-드는-문장-하나-가져오기-입니다&quot;&gt;과제로는 마음에 드는 문장 하나 가져오기 입니다.&lt;/h2&gt;

&lt;p&gt;개인적으로 준비한 내용은 다음과 같습니다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;There are only two ways to live your life. One is as though nothing is a miracle. The other is as though everything is.

 - Albert Einstein

인생을 살아가는 데는 오직 두가지 방법밖에 없다. 하나는 아무것도 기적이 아닌 것처럼, 다른 하나는 모든 것이 기적인 것처럼 살아가는 것이다.
 - 알베르트 아인슈타인
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;강사님--김은경&quot;&gt;강사님 : &lt;a href=&quot;http://www.yes24.com/SearchCorner/Search?author_yn=y&amp;amp;query=&amp;amp;auth_no=224730&amp;amp;domain=all&quot;&gt;김은경&lt;/a&gt;&lt;/h2&gt;</content><category term="write" /><category term="class" /><summary type="html">인상 깊은 문구 가져오기</summary></entry><entry><title type="html">글쓰기 클래스 - 1</title><link href="https://lahuman.github.io/write_class_1/" rel="alternate" type="text/html" title="글쓰기 클래스 - 1" /><published>2019-08-22T00:00:00+09:00</published><updated>2019-08-22T00:00:00+09:00</updated><id>https://lahuman.github.io/write_class_1</id><content type="html" xml:base="https://lahuman.github.io/write_class_1/">&lt;h1 id=&quot;글쓰기를-배우고-있다&quot;&gt;글쓰기를 배우고 있다.&lt;/h1&gt;

&lt;blockquote&gt;
  &lt;p&gt;2017년 대학원 논문을 작성할 당시 교수님에게 많이 배웠으나, 내 실력은 여전히 안좋다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;왜-글을-쓰는가&quot;&gt;왜 글을 쓰는가?&lt;/h2&gt;

&lt;p&gt;내가 생각한 것을 다른 사람에게 정확하게 전달 하고 싶다.&lt;/p&gt;

&lt;h2 id=&quot;첫번째-시간에-무엇을-배웠는가&quot;&gt;첫번째 시간에 무엇을 배웠는가?&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;일기와 에세이의 차이점
    &lt;ul&gt;
      &lt;li&gt;일기 : 나만 알고 이해하도록 내용을 작성한다.&lt;/li&gt;
      &lt;li&gt;에세이 : 제 3자가 이해할 수 있도록 내용을 작성한다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;논리적인 글을 쓰는 방법
    &lt;ul&gt;
      &lt;li&gt;큰 주제를 가진 글을 쓴다.&lt;/li&gt;
      &lt;li&gt;타겟이 명확한 글을 쓴다.&lt;/li&gt;
      &lt;li&gt;클라이맥스는 느리게/감정적으로 티나게 한다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;첫번째-연슴한-글쓰기&quot;&gt;첫번째 연슴한 글쓰기&lt;/h2&gt;

&lt;p&gt;내가 경험했던 글쓰기가 필요한 내용을 에세이 형식으로 작성 하였으나, 글의 마무리가 어설펐다.&lt;/p&gt;

&lt;h2 id=&quot;총평&quot;&gt;총평&lt;/h2&gt;

&lt;p&gt;재미있는 시간이었다. 다음 시간까지 가장 감명 깊었던 카피라이터를 준비해야 한다.&lt;/p&gt;

&lt;p&gt;무엇이 나에게 좋았는지 작성해보자.&lt;/p&gt;</content><category term="write" /><category term="class" /><summary type="html">회사에서 진행하는 뭉클로 글쓰기를 해보고 있다.</summary></entry><entry><title type="html">package-lock.json은 왜 필요 한가?</title><link href="https://lahuman.github.io/what_is_package-lock_json/" rel="alternate" type="text/html" title="package-lock.json은 왜 필요 한가?" /><published>2019-08-18T00:00:00+09:00</published><updated>2019-08-18T00:00:00+09:00</updated><id>https://lahuman.github.io/what_is_package-lock_json</id><content type="html" xml:base="https://lahuman.github.io/what_is_package-lock_json/">&lt;h1 id=&quot;package-lockjson은-왜-필요-한가&quot;&gt;package-lock.json은 왜 필요 한가?&lt;/h1&gt;

&lt;p&gt;npm install을 이용해서 package를 인스톨하면 자동으로 &lt;strong&gt;package-lock.json&lt;/strong&gt;이라는 파일이 생성된다.&lt;/p&gt;

&lt;p&gt;용도를 몰라서 그냥 두고 있었는데, 가끔씩 이 파일이 형상관리 과정에서 충돌이 일어나 &lt;strong&gt;.gitignore&lt;/strong&gt;에 추가해버렸었다.&lt;/p&gt;

&lt;p&gt;함께 일하시는 분이 package-lock.json은 꼭 필요하다는 이야기를 해주셔서 검색을 해보니 다음과 같은 경우에 사용된다.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;npm의 버전의 다른 경우&lt;/li&gt;
  &lt;li&gt;의존성을 가진 패키지의 버전이 업데이터 되는 경우&lt;/li&gt;
  &lt;li&gt;의존성을 가진 패키지가 의존하는 패키지의 버전이 업데이트되는 경우&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;node_modules의 폴더의 스냅샷을 저장하여, 다른 곳에서 npm install 명령어를 실행시 package-lock.json에 명시된 의존 패키지들을 통해 node_modules를 만들어 낸다. 다만, package.json의 변경은 package-lock.json 보다 우선 된다.&lt;/p&gt;

&lt;p&gt;주요 사항은 &lt;strong&gt;package-lock.json&lt;/strong&gt;은 꼭 형상 관리에 포함 시켜야 한다.&lt;/p&gt;

&lt;h3 id=&quot;그러하다&quot;&gt;그러하다&lt;/h3&gt;

&lt;h2 id=&quot;참고자료&quot;&gt;참고자료&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://dschci.tistory.com/108&quot;&gt;Npm 거슬리는 pacakge-lock.json?&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="npm" /><category term="package" /><summary type="html">결론은 필요 하다! 꼭 형상 관리에 추가 할 것!</summary></entry><entry><title type="html">브라우저의 쿠키와 로컬스토리지 차이</title><link href="https://lahuman.github.io/browser_cookie_localstorage/" rel="alternate" type="text/html" title="브라우저의 쿠키와 로컬스토리지 차이" /><published>2019-08-17T00:00:00+09:00</published><updated>2019-08-17T00:00:00+09:00</updated><id>https://lahuman.github.io/browser_cookie_localstorage</id><content type="html" xml:base="https://lahuman.github.io/browser_cookie_localstorage/">&lt;h1 id=&quot;broswer의-cookie-와-localstorage-의-차이점-정리&quot;&gt;Broswer의 Cookie 와 localstorage 의 차이점 정리&lt;/h1&gt;

&lt;p&gt;쿠키는 오랫동안 사용된 클라이언트에 저장하는 정보이다.&lt;/p&gt;

&lt;p&gt;로컬 스토리지는 웹 스토리지의 하나로 기본적으로 key와 value 형태이다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Web_Storage_API/Using_the_Web_Storage_API&quot;&gt;웹 스토리지&lt;/a&gt;는 &lt;a href=&quot;https://developer.mozilla.org/ko/docs/Web/API/Window/sessionStorage&quot;&gt;세션 스토리지&lt;/a&gt;와 &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Web_Storage_API/Local_storage&quot;&gt;로컬 스토리지&lt;/a&gt;가 존재한다.
세션 스토리지와 로컬 스토리지의 차이는 세션이 종료되는 경우 스토리지 내용의 삭제 유무이다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;쿠키와-로컬스토리지와의-가장-큰-차이점&quot;&gt;쿠키와 로컬스토리지와의 가장 큰 차이점&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;쿠키는 서버에서 읽을수 있음&lt;/li&gt;
  &lt;li&gt;로컬 스토리지는 클라이언트에서만 읽고 쓸수 있음&lt;/li&gt;
  &lt;li&gt;쿠키는 4Kb 까지만 지원&lt;/li&gt;
  &lt;li&gt;로컬 스토리지는 5Mb 까지 지원&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;참고자료&quot;&gt;참고자료&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Web_Storage_API/Using_the_Web_Storage_API&quot;&gt;웹 스토리지&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://developer.mozilla.org/ko/docs/Web/API/Window/sessionStorage&quot;&gt;세션 스토리지&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Web_Storage_API/Local_storage&quot;&gt;로컬 스토리지&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://stackoverflow.com/questions/3220660/local-storage-vs-cookies?source=post_page-----2f3732c7d977----------------------&quot;&gt;ocal Storage vs Cookies&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://kadamon.tistory.com/8&quot;&gt;쿠키 vs 로컬스토리지 vs 세션스토리지&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="cookie" /><category term="localstorage" /><summary type="html">쿠키는 오래전부터 사용해보았는데 로컬스토리지는 무엇인가??</summary></entry><entry><title type="html">Loop와 함께 async, await 사용하기</title><link href="https://lahuman.github.io/loop_with_async_await/" rel="alternate" type="text/html" title="Loop와 함께 async, await 사용하기" /><published>2019-08-12T00:00:00+09:00</published><updated>2019-08-12T00:00:00+09:00</updated><id>https://lahuman.github.io/loop_with_async_await</id><content type="html" xml:base="https://lahuman.github.io/loop_with_async_await/">&lt;h1 id=&quot;loop와-함께-async-await-사용하기&quot;&gt;Loop와 함께 async, await 사용하기&lt;/h1&gt;

&lt;p&gt;함께 일하는 분이 while 과 함께 async를 사용하면 동작 하지 않는다고 하셔서 확인을 해보았다.&lt;/p&gt;

&lt;p&gt;결론은 동작은 잘된다.&lt;/p&gt;

&lt;p&gt;다만, array를 이용해서 forEach, map 등을 할경우는 동작 하지 않는다.&lt;/p&gt;

&lt;p&gt;그래서 array는 for 문을 이용해서 직렬로 처리 하거나, map으로 모든 오브젝트를 promise로 변환하여 병렬로 처리 하여야 한다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;const sleep = (ms) =&amp;gt; {
  return new Promise(resolve =&amp;gt; setTimeout(resolve, ms));
}
const wrapSlept = async () =&amp;gt; { await sleep(2000) };

function delay(item) { return new Promise(resolve =&amp;gt; setTimeout(() =&amp;gt; { console.log(item); resolve(); }, 500)); }

const testAwait = async () =&amp;gt; {
  //동작
  let i = 0;
  while (i &amp;lt; 5) {
    console.log('i: ', i);
    i++;
    await wrapSlept(3000);
  }
  console.log(&quot;Done!&quot;);
  
  //동작
  for (var f = 0; f &amp;lt; 5; f++) {
    console.log('f: ', f);
    await wrapSlept(3000);
  }
  console.log(&quot;Done!&quot;);
  
  //동작 안함
  [1, 2, 3].forEach(async (n) =&amp;gt; {
    console.log('n: ', n);
    await wrapSlept(3000);
  });
  console.log(&quot;Done!&quot;);
  
  //직렬 처리
  for (const item of [1,2,3]) {
    await delay(item);
  }
  console.log(&quot;Done!&quot;);

  //병렬
  const promises = [1, 2, 3].map(item =&amp;gt; delay(item));
  await Promise.all(promises);
  console.log(&quot;Done!&quot;);

}

testAwait();
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;기억해두자&quot;&gt;기억해두자&lt;/h2&gt;

&lt;h2 id=&quot;참고자료&quot;&gt;참고자료&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://mygumi.tistory.com/328&quot;&gt;[Async function] async/await 비동기 처리 :: 마이구미&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="async" /><category term="loop" /><summary type="html">루프와 함께 async, await 사용기</summary></entry><entry><title type="html">아이가 짜증내고 화내고 바보 같이 구는 행동을 받아주기 너무 힘들다.</title><link href="https://lahuman.github.io/20190807/" rel="alternate" type="text/html" title="아이가 짜증내고 화내고 바보 같이 구는 행동을 받아주기 너무 힘들다." /><published>2019-08-07T00:00:00+09:00</published><updated>2019-08-07T00:00:00+09:00</updated><id>https://lahuman.github.io/20190807</id><content type="html" xml:base="https://lahuman.github.io/20190807/">&lt;h1 id=&quot;아이의-짜증과-화를-받아주기-힘들다&quot;&gt;아이의 짜증과 화를 받아주기 힘들다.&lt;/h1&gt;

&lt;p&gt;미친 아이처럼 소리 지르고 물건을 던지고 짜증내는 아이를 보고 있으면… 싫다.&lt;/p&gt;

&lt;p&gt;왜 저러는지도 모르겠다.&lt;/p&gt;

&lt;p&gt;내가 아이를 이해하지 못해 아이도 힘들고 나도 힘든거 같다.&lt;/p&gt;

&lt;p&gt;나는 아직 아빠의 자격이 없는지도 모르겠다.&lt;/p&gt;

&lt;p&gt;아이를 사랑으로만 대하려고 노력하지만 순간 순간마다, 나도 아이에게 소리를 지르고 짜증을 내고 만다.&lt;/p&gt;

&lt;p&gt;어떻게 해야할지 모르겠다.&lt;/p&gt;

&lt;p&gt;아이에게 좋게 이야기 하려고 하다가 소리를 지르게 된다.&lt;/p&gt;

&lt;h2 id=&quot;이런-내가-싫다&quot;&gt;이런 내가 싫다.&lt;/h2&gt;

&lt;h2 id=&quot;아이를-키우는-것도-너무-힘들고-싫다&quot;&gt;아이를 키우는 것도 너무 힘들고 싫다.&lt;/h2&gt;

&lt;h2 id=&quot;늘-좋을-수-많은-없겠지만-오늘은-정말-싫고-힘들다&quot;&gt;늘 좋을 수 많은 없겠지만, 오늘은 정말 싫고 힘들다.&lt;/h2&gt;</content><category term="단상" /><summary type="html">아이가 싫어진다.</summary></entry></feed>

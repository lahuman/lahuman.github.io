<?xml version="1.0" encoding="utf-8"?><?xml-stylesheet type="text/xml" href="https://lahuman.github.io/feed.xslt.xml"?><feed xmlns="http://www.w3.org/2005/Atom"><generator uri="http://jekyllrb.com" version="3.8.4">Jekyll</generator><link href="https://lahuman.github.io/feed.xml" rel="self" type="application/atom+xml" /><link href="https://lahuman.github.io/" rel="alternate" type="text/html" /><updated>2021-06-13T23:27:46+09:00</updated><id>https://lahuman.github.io/</id><title type="html">lahuman</title><subtitle>열심히 사는 아저씨</subtitle><entry><title type="html">jest를 이용한 테스트 케이스를 작성해보고 있다.</title><link href="https://lahuman.github.io/20210613/" rel="alternate" type="text/html" title="jest를 이용한 테스트 케이스를 작성해보고 있다." /><published>2021-06-13T00:00:00+09:00</published><updated>2021-06-13T00:00:00+09:00</updated><id>https://lahuman.github.io/20210613</id><content type="html" xml:base="https://lahuman.github.io/20210613/">&lt;h1 id=&quot;백문이불여일타라는-개발자의-말이-있듯해보는-중이다&quot;&gt;백문이불여일타라는 개발자의 말이 있듯해보는 중이다.&lt;/h1&gt;

&lt;p&gt;일단 해보고 이상하다고 느껴지는 부분을 다시 고찰하여 보자!&lt;/p&gt;

&lt;p&gt;일단 고~&lt;/p&gt;

&lt;h2 id=&quot;못먹어도-고&quot;&gt;못먹어도 고!&lt;/h2&gt;</content><category term="단상" /><summary type="html">DB 연결을 직접 하지 않고, Mock 객체를 주입하여 테스트를 해보고 있다.</summary></entry><entry><title type="html">이해를 못하는건가? 이해가 안되는건가?</title><link href="https://lahuman.github.io/20210608/" rel="alternate" type="text/html" title="이해를 못하는건가? 이해가 안되는건가?" /><published>2021-06-08T00:00:00+09:00</published><updated>2021-06-08T00:00:00+09:00</updated><id>https://lahuman.github.io/20210608</id><content type="html" xml:base="https://lahuman.github.io/20210608/">&lt;h1 id=&quot;이해를-못하는건지-안-하는건지&quot;&gt;이해를 못하는건지, 안 하는건지…&lt;/h1&gt;

&lt;p&gt;어떤 문제에 대하여 이해를 못하는 건지, 안하는 건지…&lt;/p&gt;

&lt;p&gt;계속 같은 실수를 반복하는 건지?&lt;/p&gt;

&lt;p&gt;나는 여기서 무엇을 하고 있는건지?&lt;/p&gt;

&lt;p&gt;답답한 마음에 아무것도 하기 싫어진다.&lt;/p&gt;

&lt;h2 id=&quot;답답함아-물러가라&quot;&gt;답답함아 물러가라!&lt;/h2&gt;</content><category term="단상" /><summary type="html">답답한 마음에 일이 안된다.</summary></entry><entry><title type="html">쉬운데 어렵다.</title><link href="https://lahuman.github.io/20210606/" rel="alternate" type="text/html" title="쉬운데 어렵다." /><published>2021-06-06T00:00:00+09:00</published><updated>2021-06-06T00:00:00+09:00</updated><id>https://lahuman.github.io/20210606</id><content type="html" xml:base="https://lahuman.github.io/20210606/">&lt;h1 id=&quot;요즘-모든-일들이-쉬운데-어렵다&quot;&gt;요즘 모든 일들이 쉬운데 어렵다.&lt;/h1&gt;

&lt;p&gt;일 자체는 쉽지만, 욕심을 부리게 되어서 어려워 진다.&lt;/p&gt;

&lt;p&gt;쉽게 할 수 있는 일을 어렵게 하게 되는 욕심을 내려놓자.&lt;/p&gt;

&lt;h2 id=&quot;욕심아-사라져라&quot;&gt;욕심아 사라져라!&lt;/h2&gt;</content><category term="단상" /><summary type="html">요즘 일들이 쉬운데 어렵다.</summary></entry><entry><title type="html">관점을 변경하는 쉬운 방법은 실행 + 경험이다.</title><link href="https://lahuman.github.io/20210605/" rel="alternate" type="text/html" title="관점을 변경하는 쉬운 방법은 실행 + 경험이다." /><published>2021-06-05T00:00:00+09:00</published><updated>2021-06-05T00:00:00+09:00</updated><id>https://lahuman.github.io/20210605</id><content type="html" xml:base="https://lahuman.github.io/20210605/">&lt;h1 id=&quot;관점을-변경하는-쉬운-방법&quot;&gt;관점을 변경하는 쉬운 방법&lt;/h1&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;들은 것은 잊어버리고, 본 것은 기억하고, 직접 해본 것은 이해한다.
- 공자
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;관점을 변경하는 일은 쉽지 않다.&lt;/p&gt;

&lt;p&gt;새로운 관점을 받아 들이기 위해서는 경험해야 한다.&lt;/p&gt;

&lt;p&gt;들은 것은 잊기 쉽고, 본 것은 이해하지 못할 수 있다.
마지막으로 직접 해본 일 이어야만 이해할 수 있다.&lt;/p&gt;

&lt;p&gt;내 경우는 공자의 말씀처럼 해보지 못한 일은 쉽게 잊거나, 이해를 못하게 된다.&lt;/p&gt;

&lt;p&gt;실패를 두려워하지 않고 시도해보자! 그리고 즐기자!&lt;/p&gt;</content><category term="단상" /><category term="관점" /><summary type="html">책으로만 경험해본 관점은 죽은 지식과 같다.</summary></entry><entry><title type="html">육아가 힘들다.</title><link href="https://lahuman.github.io/20210528/" rel="alternate" type="text/html" title="육아가 힘들다." /><published>2021-05-28T00:00:00+09:00</published><updated>2021-05-28T00:00:00+09:00</updated><id>https://lahuman.github.io/20210528</id><content type="html" xml:base="https://lahuman.github.io/20210528/">&lt;h1 id=&quot;아이를-키우는-일이-쉽지-않다&quot;&gt;아이를 키우는 일이 쉽지 않다.&lt;/h1&gt;

&lt;p&gt;정말 어렵다. 어려워.&lt;/p&gt;

&lt;p&gt;이젠 2춘기부터 시작인지.. 벌써부터 피곤하게 만든다&lt;/p&gt;</content><category term="단상" /><category term="육아" /><summary type="html">이젠 2춘기부터 시작인가</summary></entry><entry><title type="html">nodejs에서 middleware 처리 방법</title><link href="https://lahuman.github.io/nodejs_middleware/" rel="alternate" type="text/html" title="nodejs에서 middleware 처리 방법" /><published>2021-05-25T00:00:00+09:00</published><updated>2021-05-25T00:00:00+09:00</updated><id>https://lahuman.github.io/nodejs_middleware</id><content type="html" xml:base="https://lahuman.github.io/nodejs_middleware/">&lt;h1 id=&quot;nodejs에서-middleware-처리-방법&quot;&gt;nodejs에서 middleware 처리 방법&lt;/h1&gt;

&lt;p&gt;기존 function에서 오류가 날 경우 봇으로 메시지 발송 기능을 구현 하려고 합니다.&lt;/p&gt;

&lt;p&gt;express에서는 middleware를 활용했었는데, 순수한 javascript에서는 어떻게 해야할지 검색을 해보니 &lt;a href=&quot;https://stackoverflow.com/questions/11742067/is-there-a-way-to-add-try-catch-to-every-function-in-javascript&quot;&gt;Is there a way to add try-catch to every function in Javascript?&lt;/a&gt; 를 확인 할 수 있었습니다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;var tcWrapper = function(f) {
    return function() {
        try {
            f.apply(this, arguments);
        } catch(e) {
            customErrorHandler(e)
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;위 예제의 문제는&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;결과 값 return 처리가 안되었다.&lt;/li&gt;
  &lt;li&gt;async (비동기) 처리에서 오류 발생시 catch가 안됩니다.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;이를 해결하기 위해서 다음과 같이 해결하였습니다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;// 예제 function
const example = function ({ data }) {
  return new Promise((res, rej) =&amp;gt; setTimeout(() =&amp;gt; { rej({ status: 100, id: data.id, name: &quot;임광규&quot; }) }, 1000));
}

// middleware 구현
const wrapper = function (f) {
  return async function () {
    try {
      return await f.apply(this, arguments);
    } catch (err) {
      try {
        const { statusCode: status } = JSON.parse(err);
        if (status &amp;gt; 400) {
          console.log(&quot;status is over the 400&quot;)
        }
      } catch (e) { console.log(e) };

      throw err;
    }
  }
};

// 사용 예제 
(async () =&amp;gt; {
  const fnc = wrapper(example);
  const result = await fnc({ data: { id: &quot;23201&quot; } });
  console.log(result)
})();
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ol&gt;
  &lt;li&gt;return 구문 추가로 최종 결과값 전달&lt;/li&gt;
  &lt;li&gt;async, await 키워드 추가로 비동기에 오류 누락 문제 해결&lt;/li&gt;
  &lt;li&gt;throw 구문으로 오류 전파&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;사용은 &lt;code class=&quot;highlighter-rouge&quot;&gt;module.export&lt;/code&gt; 시 &lt;code class=&quot;highlighter-rouge&quot;&gt;function을 감싸서 처리&lt;/code&gt; 합니다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;module.exports = {
  getUsers: wrapper(getUsers),
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;참고자료&quot;&gt;참고자료&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://stackoverflow.com/questions/11742067/is-there-a-way-to-add-try-catch-to-every-function-in-javascript&quot;&gt;Is there a way to add try-catch to every function in Javascript?&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="nodejs" /><category term="middleware" /><summary type="html">express 없이 순수 javascript 에서 처리 하는 방법</summary></entry><entry><title type="html">ReactJS composition(합성) 사용하기</title><link href="https://lahuman.github.io/react_composition/" rel="alternate" type="text/html" title="ReactJS composition(합성) 사용하기" /><published>2021-05-24T00:00:00+09:00</published><updated>2021-05-24T00:00:00+09:00</updated><id>https://lahuman.github.io/react_composition</id><content type="html" xml:base="https://lahuman.github.io/react_composition/">&lt;h1 id=&quot;reactjs-합성-사용하기&quot;&gt;reactjs 합성 사용하기&lt;/h1&gt;

&lt;p&gt;Reactjs에서는 상속보다 더 강력한 합성을 제공합니다.
상속 대신 합성을 사용하면 컴포넌트 간에 코드를 재활용하기 펼리합니다.&lt;/p&gt;

&lt;p&gt;합성의 사용 예제는 아래와 같습니다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;function SplitPane(props) {
  return (
    &amp;lt;div className=&quot;SplitPane&quot;&amp;gt;
      &amp;lt;div className=&quot;SplitPane-left&quot;&amp;gt;
        {props.left}
      &amp;lt;/div&amp;gt;
      &amp;lt;div className=&quot;SplitPane-right&quot;&amp;gt;
        {props.right}
      &amp;lt;/div&amp;gt;
    &amp;lt;/div&amp;gt;
  );
}

function App() {
  return (
    &amp;lt;SplitPane
      left={
        &amp;lt;Contacts /&amp;gt;
      }
      right={
        &amp;lt;Chat /&amp;gt;
      } /&amp;gt;
  );
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;Contacts /&gt;
&lt;p&gt;와 &lt;Chat&gt;&lt;/Chat&gt; 동일한 React 엘리먼트는 단지 객체이기 때문에 다른 데이터처럼 props로 전달할 수 있습니다.&lt;/p&gt;

&lt;h2 id=&quot;참고자료&quot;&gt;참고자료&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://ko.reactjs.org/docs/composition-vs-inheritance.html&quot;&gt;합성 (Composition) vs 상속 (Inheritance)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="reactjs" /><category term="composition" /><summary type="html">컴포넌트에서 상속보다 합성 사용하기</summary></entry><entry><title type="html">좋은 문화를 가진 팀의 문화를 다른 팀에 전파를 할 수 있을까?</title><link href="https://lahuman.github.io/20210522/" rel="alternate" type="text/html" title="좋은 문화를 가진 팀의 문화를 다른 팀에 전파를 할 수 있을까?" /><published>2021-05-22T00:00:00+09:00</published><updated>2021-05-22T00:00:00+09:00</updated><id>https://lahuman.github.io/20210522</id><content type="html" xml:base="https://lahuman.github.io/20210522/">&lt;h1 id=&quot;문화를-어떻게-전파-할-수-있을까&quot;&gt;문화를 어떻게 전파 할 수 있을까?&lt;/h1&gt;

&lt;p&gt;특정 팀의 문화를 다른 팀에 전파하려면 어떻게 해야 할까요?&lt;/p&gt;

&lt;p&gt;저희 팀의 문화가 좋다며, 다른 팀에 전파를 하라는 미션이 떨어졌습니다.&lt;/p&gt;

&lt;p&gt;개인적으로는 팀의 문화는 해당 팀의 상황과 환경 그리고 사람에 따라 달라진다고 생각됩니다.&lt;/p&gt;

&lt;p&gt;한명의 사람이 팀을 변화시키지 위해서는 많은 권한을 제공해야 합니다.&lt;/p&gt;

&lt;p&gt;하지만 이는 자발적인 변화가 아닌 강제적인 변화로 기존 팀원들에게 부담감과 변화에 대한 반발이 생기게 됩니다.&lt;/p&gt;

&lt;p&gt;이것들이 변화를 위한 과정일까요? 그리고 변화가 가능한 걸까요?&lt;/p&gt;

&lt;p&gt;마지막으로 특정 특출난 동료가 있다는 건 좋은 일일까요? 나쁜 일일까요?&lt;/p&gt;

&lt;h2 id=&quot;많은-생각이-드는-저녁&quot;&gt;많은 생각이 드는 저녁&lt;/h2&gt;</content><category term="단상" /><category term="문화" /><summary type="html">모종 처럼 좋은 문화를 가진 팀원을 다른 팀에 넣으면 변할까?</summary></entry><entry><title type="html">JAVA 1.5 에서 TLS 1.2 를 사용하는 HTTPS 통신 하는 방법</title><link href="https://lahuman.github.io/jdk5_tls1_2/" rel="alternate" type="text/html" title="JAVA 1.5 에서 TLS 1.2 를 사용하는 HTTPS 통신 하는 방법" /><published>2021-05-19T00:00:00+09:00</published><updated>2021-05-19T00:00:00+09:00</updated><id>https://lahuman.github.io/jdk5_tls1_2</id><content type="html" xml:base="https://lahuman.github.io/jdk5_tls1_2/">&lt;h1 id=&quot;하루-종일-jdk5와-https-tls12-랑-씨름을-하고-있다&quot;&gt;하루 종일 jdk5와 https tls1.2 랑 씨름을 하고 있다.&lt;/h1&gt;

&lt;p&gt;우선 jdk5에서 tls1.2 연결을 위해서 &lt;a href=&quot;https://www.bouncycastle.org/&quot;&gt;bouncy castle&lt;/a&gt;를 사용해보았습니다.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.bouncycastle.org/docs/tlsdocs1.5on/org/bouncycastle/tls/test/TlsClientTest.html&quot;&gt;TlsClientTest&lt;/a&gt; 소스로 테스트를 해보았지만, 결국 아래와 같은 오류를 만나고 말았습니다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;TLS client negotiated TLS 1.2
TLS client received server certificate chain of length 3
    fingerprint:SHA-256 83:9E:08:A5:4F:CC:73:F7:F8:DE:2E:23:89:DB:40:E1:B5:E1:E4:9E:6C:33:4C:A8:EE:30:68:01:76:4F:ED:69 (C=KR,ST=Seoul,L=Yeongdeungpo-gu,O=GS Ho                                                                              me Shopping Inc.,OU=IT Team,CN=*.gsshop.com)
    fingerprint:SHA-256 9A:5E:EC:EE:9C:7D:89:8B:D8:1D:C3:BF:06:6D:AF:6A:EF:B8:DB                                                                              :1C:59:67:62:06:D2:BF:DD:68:23:12:C6:F6 (C=US,O=DigiCert Inc,OU=www.digicert.com                                                                              ,CN=Thawte RSA CA 2018)
    fingerprint:SHA-256 43:48:A0:E9:44:4C:78:CB:26:5E:05:8D:5E:89:44:B4:D8:4F:96                                                                              :62:BD:26:DB:25:7F:89:34:A4:43:C7:01:61 (C=US,O=DigiCert Inc,OU=www.digicert.com                                                                              ,CN=DigiCert Global Root CA)
TLS client raised alert: fatal(2), internal_error(80)
&amp;gt; Failed to read record
java.lang.NullPointerException
        at java.io.Reader.&amp;lt;init&amp;gt;(Reader.java:61)
        at java.io.InputStreamReader.&amp;lt;init&amp;gt;(InputStreamReader.java:55)
        at TlsTestUtils.loadPemResource(TlsTestUtils.java:478)
        at TlsTestUtils.loadCertificateResource(TlsTestUtils.java:368)
        at TlsTestUtils.getTrustedCertPath(TlsTestUtils.java:502)
        at MockTlsClient$1.notifyServerCertificate(MockTlsClient.java:128)
        at org.bouncycastle.tls.TlsUtils.processServerCertificate(Unknown Source                                                                              )
        at org.bouncycastle.tls.TlsClientProtocol.handleServerCertificate(Unknow                                                                              n Source)
        at org.bouncycastle.tls.TlsClientProtocol.handleHandshakeMessage(Unknown                                                                               Source)
        at org.bouncycastle.tls.TlsProtocol.processHandshakeQueue(Unknown Source                                                                              )
        at org.bouncycastle.tls.TlsProtocol.processRecord(Unknown Source)
        at org.bouncycastle.tls.RecordStream.readRecord(Unknown Source)
        at org.bouncycastle.tls.TlsProtocol.safeReadRecord(Unknown Source)
        at org.bouncycastle.tls.TlsProtocol.blockForHandshake(Unknown Source)
        at org.bouncycastle.tls.TlsClientProtocol.connect(Unknown Source)
        at TlsClientTest.openTlsConnection(TlsClientTest.java:62)
        at TlsClientTest.main(TlsClientTest.java:30)
Exception in thread &quot;main&quot; org.bouncycastle.tls.TlsFatalAlert: internal_error(80)
        at org.bouncycastle.tls.TlsProtocol.safeReadRecord(Unknown Source)
        at org.bouncycastle.tls.TlsProtocol.blockForHandshake(Unknown Source)
        at org.bouncycastle.tls.TlsClientProtocol.connect(Unknown Source)
        at TlsClientTest.openTlsConnection(TlsClientTest.java:62)
        at TlsClientTest.main(TlsClientTest.java:30)
Caused by: java.lang.NullPointerException
        at java.io.Reader.&amp;lt;init&amp;gt;(Reader.java:61)
        at java.io.InputStreamReader.&amp;lt;init&amp;gt;(InputStreamReader.java:55)
        at TlsTestUtils.loadPemResource(TlsTestUtils.java:478)
        at TlsTestUtils.loadCertificateResource(TlsTestUtils.java:368)
        at TlsTestUtils.getTrustedCertPath(TlsTestUtils.java:502)
        at MockTlsClient$1.notifyServerCertificate(MockTlsClient.java:128)
        at org.bouncycastle.tls.TlsUtils.processServerCertificate(Unknown Source)
        at org.bouncycastle.tls.TlsClientProtocol.handleServerCertificate(Unknown Source)
        at org.bouncycastle.tls.TlsClientProtocol.handleHandshakeMessage(Unknown Source)
        at org.bouncycastle.tls.TlsProtocol.processHandshakeQueue(Unknown Source)
        at org.bouncycastle.tls.TlsProtocol.processRecord(Unknown Source)
        at org.bouncycastle.tls.RecordStream.readRecord(Unknown Source)
        ... 5 more

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;많은 삽질을 하며 시간을 보내다가, 
다시 원점으로 돌아가서 &lt;strong&gt;왜&lt;/strong&gt;와 &lt;strong&gt;환경&lt;/strong&gt;에 대하여 고민하였습니다.&lt;/p&gt;

&lt;p&gt;꼭 jdk5 에서 접근해야 할까? Linux환경이라면 curl이라는 훌륭한 툴을 이용하면 어떨까?&lt;/p&gt;

&lt;p&gt;결국 Curl을 Java에서 Command Line으로 실행하는 코드를 만들었습니다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;import java.lang.Process;
import java.lang.Runtime;
import java.io.InputStreamReader;
import java.io.BufferedReader;
import java.io.IOException;

public class CurlJavaTest {
    public static void main(String[] args) throws java.lang.InterruptedException {
        String output = &quot;&quot;;
        String command = &quot;curl -k http://gsshop.com&quot;;
        try {
            Process p = Runtime.getRuntime().exec(command);
            p.waitFor();
            BufferedReader reader = new BufferedReader(new InputStreamReader(p.getInputStream()));
            String line = &quot;&quot;;
            while ((line = reader.readLine()) != null) {
                output = output.concat(line + &quot;\n&quot;);
            }
        } catch (IOException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }
        System.out.println(output);
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;생각의-관점을-바꾸어서-시도해보면-좋은-결과가-나오기도-하네요&quot;&gt;생각의 관점을 바꾸어서 시도해보면 좋은 결과가 나오기도 하네요.&lt;/h2&gt;</content><category term="jdk5" /><category term="tls" /><category term="https" /><summary type="html">개똥 손이 많이 간다고 하는 내용이 많습니다.</summary></entry><entry><title type="html">예의를 지키는 사람들이 많았으면 좋겠다.</title><link href="https://lahuman.github.io/20210519/" rel="alternate" type="text/html" title="예의를 지키는 사람들이 많았으면 좋겠다." /><published>2021-05-19T00:00:00+09:00</published><updated>2021-05-19T00:00:00+09:00</updated><id>https://lahuman.github.io/20210519</id><content type="html" xml:base="https://lahuman.github.io/20210519/">&lt;h1 id=&quot;다르다는-것은-틀린-것이-아니다&quot;&gt;다르다는 것은 틀린 것이 아니다.&lt;/h1&gt;

&lt;p&gt;누군가와 불쾌한 경험을 하게 되면 이후 나의 행동은 2가지로 나뉘게 됩니다.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;회피 한다.&lt;/li&gt;
  &lt;li&gt;싸운다.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;가능하면 1번을 선택하고 있습니다. 
싸우고 살기엔 제 인생과 시간은 짧으니까요.
물론 상대방과 싸우기도 하는데,&lt;br /&gt;
싸워서 이기기 보다는 상대방이 나를 회피하게 만드는 것을 목적으로 싸우게 됩니다.
가장 좋은 방법은 서로 지켜야 할 선을 지키고, 예의를 가지고 행동하면 됩니다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;“매너가 사람을 만든다.” - 킹스맨&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;똥은-피해라&quot;&gt;똥은 피해라&lt;/h2&gt;</content><category term="단상" /><summary type="html">다른 관점이 존재한다는 것을 이해하고 받아들여야 한다.</summary></entry></feed>

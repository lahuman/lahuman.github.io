<?xml version="1.0" encoding="utf-8"?><?xml-stylesheet type="text/xml" href="https://lahuman.github.io/feed.xslt.xml"?><feed xmlns="http://www.w3.org/2005/Atom"><generator uri="http://jekyllrb.com" version="3.8.4">Jekyll</generator><link href="https://lahuman.github.io/feed.xml" rel="self" type="application/atom+xml" /><link href="https://lahuman.github.io/" rel="alternate" type="text/html" /><updated>2021-05-18T00:27:30+09:00</updated><id>https://lahuman.github.io/</id><title type="html">lahuman</title><subtitle>열심히 사는 아저씨</subtitle><entry><title type="html">성과라는 말의 의미</title><link href="https://lahuman.github.io/20210518/" rel="alternate" type="text/html" title="성과라는 말의 의미" /><published>2021-05-18T00:00:00+09:00</published><updated>2021-05-18T00:00:00+09:00</updated><id>https://lahuman.github.io/20210518</id><content type="html" xml:base="https://lahuman.github.io/20210518/">&lt;h1 id=&quot;성과가-좋다는-이야기를-많이-들었습니다-하지만&quot;&gt;성과가 좋다는 이야기를 많이 들었습니다. 하지만,&lt;/h1&gt;

&lt;p&gt;회사에서 성과가 좋다는 의미가 어떤 뜻일까요?&lt;/p&gt;

&lt;p&gt;해낸 일이 많다는 뜻일까요?&lt;/p&gt;

&lt;p&gt;연봉 상승율 높거나 또는 인센을 많이 준다는 뜻일까요?&lt;/p&gt;

&lt;p&gt;여러 의미를 가지고 있는 성과에 대한 거부감이 생겼습니다.&lt;/p&gt;

&lt;p&gt;그냥 일은 일이고, 일이 되게 하면 된다고 생각하고 있습니다.&lt;/p&gt;

&lt;p&gt;성과가 좋다는 이야기를 많이 듣다보니 주위 시선도 부담스럽게 변합니다.&lt;/p&gt;

&lt;p&gt;정작 제가 실제로 얻은 것은 없는데요.&lt;/p&gt;

&lt;p&gt;괜한 성과이야기로 마음도 몸도 불편해지는 날입니다.&lt;/p&gt;

&lt;h2 id=&quot;어려운-성과-이야기&quot;&gt;어려운 성과 이야기&lt;/h2&gt;</content><category term="단상" /><summary type="html">일이 이루어진 결과. 순화어는 `보람'.</summary></entry><entry><title type="html">Linux] find 명령어를 이용해서 5개가 넘는 디렉토리 중 1개만 지우기</title><link href="https://lahuman.github.io/linux_find_count_remove/" rel="alternate" type="text/html" title="Linux] find 명령어를 이용해서 5개가 넘는 디렉토리 중 1개만 지우기" /><published>2021-05-17T00:00:00+09:00</published><updated>2021-05-17T00:00:00+09:00</updated><id>https://lahuman.github.io/linux_find_count_remove</id><content type="html" xml:base="https://lahuman.github.io/linux_find_count_remove/">&lt;h1 id=&quot;linux-find-명령어를-이용해서-오래된-디렉토리-중-1개만-지우기&quot;&gt;Linux] find 명령어를 이용해서 오래된 디렉토리 중 1개만 지우기&lt;/h1&gt;

&lt;p&gt;오래된 디렉토리을 5개만 남겨놓고 지우고 싶을때 사용합니다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;if [[ $(find /build/${PRJ_NAME}_* -type d | wc -l) -gt 5 ]]
then
  find /build/${PRJ_NAME}_* -type d | head -n 1 | xargs rm -rf
fi
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;command로 넣어도 되고, shell script로 사용해도 됩니다. :)&lt;/p&gt;</content><category term="find" /><category term="linux" /><category term="command" /><summary type="html">디렉토리명에 날짜가 붙어서 정렬이 필요 없는 경우</summary></entry><entry><title type="html">couchDB –&amp;gt; logstash –&amp;gt; kafka</title><link href="https://lahuman.github.io/couchdb_logstash_kafka/" rel="alternate" type="text/html" title="couchDB --&gt; logstash --&gt; kafka" /><published>2021-05-17T00:00:00+09:00</published><updated>2021-05-17T00:00:00+09:00</updated><id>https://lahuman.github.io/couchdb_logstash_kafka</id><content type="html" xml:base="https://lahuman.github.io/couchdb_logstash_kafka/">&lt;h1 id=&quot;logstash가-모든-일을-다합니다&quot;&gt;logstash가 모든 일을 다합니다.&lt;/h1&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/post_img/couchdb_logstash_kafka.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;couchDB의 변경내역이 발생할 경우 kafka로 해당 데이터를 전송해야 하는 연계성 요청이 들어왔습니다.&lt;/p&gt;

&lt;p&gt;여러 가지 방안을 고민하였으나, 확장성과 유연성을 위해서 logstash를 선택하였습니다.&lt;/p&gt;

&lt;p&gt;실제로 가능한지 테스트 하기 위해서 개발 환경을 docker 기반으로 구성하여 테스트 했습니다.&lt;/p&gt;

&lt;h2 id=&quot;시작하기-전에&quot;&gt;시작하기 전에&lt;/h2&gt;

&lt;p&gt;docker 간의 통신을 위해서 docker network를 추가 합니다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;myHome&lt;/strong&gt; 이름으로 네트워크를 생성 합니다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ docker network create myHome
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;자세한 docker network 설명은 &lt;a href=&quot;https://www.daleseo.com/docker-networks/&quot;&gt;Docker 네트워크 사용법&lt;/a&gt;을 참조하셔요.&lt;/p&gt;

&lt;h2 id=&quot;couchdb-설정&quot;&gt;couchdb 설정&lt;/h2&gt;

&lt;p&gt;couchdb는 docker에서 bitnami 에서 제공하는 이미지로 생성하였습니다.&lt;/p&gt;

&lt;p&gt;다음 명령어로 image를 다운받고 실행합니다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ docker run --network myHome  -p 5984:5984 --name  couchdb bitnami/couchdb:latest
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;추후 테스트를 위해서 5984 port를 연결합니다.&lt;/p&gt;

&lt;p&gt;docker가 온전하게 기동되었다면, http://localhost:5984 에 접근하면 아래와 같은 내용을 확인 할 수 있습니다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;{
  &quot;couchdb&quot;: &quot;Welcome&quot;,
  &quot;version&quot;: &quot;3.1.1&quot;,
  &quot;git_sha&quot;: &quot;ce596c65d&quot;,
  &quot;uuid&quot;: &quot;b7449ad8eda14515e4e0782a84c41f5d&quot;,
  &quot;features&quot;: [
    &quot;access-ready&quot;,
    &quot;partitioned&quot;,
    &quot;pluggable-storage-engines&quot;,
    &quot;reshard&quot;,
    &quot;scheduler&quot;
  ],
  &quot;vendor&quot;: {
    &quot;name&quot;: &quot;The Apache Software Foundation&quot;
  }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;kafka-설정&quot;&gt;kafka 설정&lt;/h2&gt;

&lt;p&gt;kafka의 경우 기본적으로 zookeeper가 필요 하게 됩니다. 
이를 쉽게 처리 하기 위해서 docker-compose를 이용합니다.&lt;/p&gt;

&lt;p&gt;docker-compose.yml 파일을 생성합니다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;version: &quot;2&quot;

networks:
  default:
    external: true
    name: myHome

services:
  zookeeper:
    image: docker.io/bitnami/zookeeper:3
    ports:
      - &quot;2181:2181&quot;
    volumes:
      - &quot;zookeeper_data:/bitnami&quot;
    environment:
      - ALLOW_ANONYMOUS_LOGIN=yes
  kafka:
    image: docker.io/bitnami/kafka:2
    ports:
      - &quot;9092:9092&quot;
    volumes:
      - &quot;kafka_data:/bitnami&quot;
    environment:
      - KAFKA_CFG_ZOOKEEPER_CONNECT=zookeeper:2181
      - ALLOW_PLAINTEXT_LISTENER=yes
    depends_on:
      - zookeeper

volumes:
  zookeeper_data:
    driver: local
  kafka_data:
    driver: local
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;해당 파일의 생성이 완료 되었다면, 다음 명령어로 기동 합니다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ docker-compose up
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;기동이 문제 없이 되었다면 아래와 같은 로그가 확인 됩니다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;kafka_1      | [2021-05-17 03:39:13,937] INFO [GroupMetadataManager brokerId=1001] Finished loading offsets and group metadata from __consumer_offsets-48 in 103 milliseconds, of which 102 milliseconds was spent in the scheduler. (kafka.coordinator.group.GroupMetadataManager)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;logstash-설정&quot;&gt;logstash 설정&lt;/h2&gt;

&lt;p&gt;먼저 pipline 디렉토리를 생성한 후 &lt;strong&gt;logstash.conf&lt;/strong&gt; 파일을 생성합니다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ mkdir pipline
$ vi logstash.conf
# logstash.conf 파일 내용
input {
  couchdb_changes {
    id =&amp;gt; &quot;my_plugin_id&quot;
    host =&amp;gt; &quot;couchdb&quot;
    username =&amp;gt; &quot;admin&quot;
    password =&amp;gt; &quot;couchdb&quot;
    port =&amp;gt; &quot;5984&quot;
    db =&amp;gt; &quot;test&quot;
  }
}

output {
	stdout { codec =&amp;gt; &quot;rubydebug&quot; }

     kafka {
       codec =&amp;gt; &quot;json&quot;
       topic_id =&amp;gt; &quot;test_topic&quot;
       bootstrap_servers =&amp;gt; &quot;logstash_kafka_1:9092&quot;
     }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;주요 정보는 input과 output에 대한 정의 이며, 이후 db 종류가 많이 생기면, input에 추가 하면 됩니다.
kafka 나, couchdb의 host는 docker ps 정보에서 이름을 활용하면 됩니다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ docker ps
CONTAINER ID   IMAGE                                            COMMAND                  CREATED          STATUS          PORTS                                                                     NAMES
03bb311bf431   docker.elastic.co/logstash/logstash-oss:7.12.1   &quot;/usr/local/bin/dock…&quot;   50 seconds ago   Up 48 seconds   5044/tcp, 9600/tcp                                                        compassionate_yonath
28a0315d2422   bitnami/kafka:2                                  &quot;/opt/bitnami/script…&quot;   4 days ago       Up 4 minutes    0.0.0.0:9092-&amp;gt;9092/tcp, :::9092-&amp;gt;9092/tcp                                 logstash_kafka_1
fa1b5e62784b   bitnami/zookeeper:3                              &quot;/opt/bitnami/script…&quot;   4 days ago       Up 4 minutes    2888/tcp, 3888/tcp, 0.0.0.0:2181-&amp;gt;2181/tcp, :::2181-&amp;gt;2181/tcp, 8080/tcp   logstash_zookeeper_1
786c603b9ae2   bitnami/couchdb:latest                           &quot;/opt/bitnami/script…&quot;   4 days ago       Up 3 hours      4369/tcp, 9100/tcp, 0.0.0.0:5984-&amp;gt;5984/tcp, :::5984-&amp;gt;5984/tcp             couchdb
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;준비가 다 되었다면, pipeline 디렉토리 주소를 알맞게 설정후 다음 명령어로 docker 를 기동 합니다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ docker run --rm -it -v /Users/admin/DEV/test/logstash/pipeline/:/usr/share/logstash/pipeline/ --network myHome  docker.elastic.co/logstash/logstash-oss:7.12.1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;테스트&quot;&gt;테스트&lt;/h2&gt;

&lt;p&gt;couchdb의 utils를 이용해서 데이터를 적제 할 수 있습니다.&lt;/p&gt;

&lt;p&gt;접근 주소 : http://localhost:5984/_utils/&lt;/p&gt;

&lt;p&gt;해당 주소에 접근하여 &lt;strong&gt;test&lt;/strong&gt; database를 생성하고 documents를 생성합니다.&lt;/p&gt;

&lt;p&gt;데이터를 생성 하였으면, kafka에 제대로 적재 되었는지 확인해봅니다.&lt;/p&gt;

&lt;p&gt;docker exec 명령어를 이용해서 kafka 내부로 접근합니다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ docker exec -it  logstash_kafka_1 /bin/bash
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;첫번째로 topic의 목록을 조회 해봅니다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ kafka-topics.sh --list --bootstrap-server localhost:9092
__consumer_offsets
mytopic
test_topic
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;logstash를 이용하여 생성한 &lt;strong&gt;test_topic&lt;/strong&gt; 이 확인되었다면, 데이터도 console로 확인해봅니다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ kafka-console-consumer.sh --bootstrap-server localhost:9092 --topic test_topic --from-beginning
{&quot;@timestamp&quot;:&quot;2021-05-12T09:22:28.111Z&quot;,&quot;doc_as_upsert&quot;:true,&quot;doc&quot;:{&quot;test&quot;:&quot;test&quot;},&quot;@version&quot;:&quot;1&quot;}
{&quot;@timestamp&quot;:&quot;2021-05-17T00:35:33.135Z&quot;,&quot;doc_as_upsert&quot;:true,&quot;doc&quot;:{&quot;helo&quot;:&quot;kafka&quot;},&quot;@version&quot;:&quot;1&quot;}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;이로서 연동 테스트가 완료 되었습니다.&lt;/p&gt;

&lt;h2 id=&quot;참고-자료&quot;&gt;참고 자료&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.daleseo.com/docker-networks/&quot;&gt;Docker 네트워크 사용법&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/bitnami/bitnami-docker-couchdb&quot;&gt;bitnami-docker-couchdb&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://kimseunghyun76.tistory.com/463&quot;&gt;Kafka 한번 살펴보자… Quickstart&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="kafka" /><category term="logstash" /><category term="couchDB" /><summary type="html">변경 내역을 logstash를 통해서 kafka에 전송하기</summary></entry><entry><title type="html">말을 조심해야 합니다.</title><link href="https://lahuman.github.io/20210515/" rel="alternate" type="text/html" title="말을 조심해야 합니다." /><published>2021-05-15T00:00:00+09:00</published><updated>2021-05-15T00:00:00+09:00</updated><id>https://lahuman.github.io/20210515</id><content type="html" xml:base="https://lahuman.github.io/20210515/">&lt;h1 id=&quot;누군가를-믿고-이야기-하면-소문이-이미-나있다&quot;&gt;누군가를 믿고 이야기 하면… 소문이 이미 나있다.&lt;/h1&gt;

&lt;p&gt;세상에 비밀은 없다. 또 말 조심을 해야 한다.&lt;/p&gt;

&lt;p&gt;내 속마음을 누군가에게 털어 놓는다는 건 그 속마음이 다른 사람에게 퍼질 수 있다는 걸 다시 깨달았다.&lt;/p&gt;

&lt;p&gt;꼭 속마음을 이야기 해야 한다면, 부모님 또는 배우자에게만 털어 놓자.&lt;/p&gt;

&lt;h2 id=&quot;화가-나기-보다는-당황스럽다&quot;&gt;화가 나기 보다는 당황스럽다.&lt;/h2&gt;</content><category term="단상" /><summary type="html">발 없는 말이 천리 간다.</summary></entry><entry><title type="html">KOOFA 교육 후기</title><link href="https://lahuman.github.io/koofa/" rel="alternate" type="text/html" title="KOOFA 교육 후기" /><published>2021-05-14T00:00:00+09:00</published><updated>2021-05-14T00:00:00+09:00</updated><id>https://lahuman.github.io/koofa</id><content type="html" xml:base="https://lahuman.github.io/koofa/">&lt;h1 id=&quot;모든-의견은-동등하게-귀중하다&quot;&gt;모든 의견은 동등하게 귀중하다.&lt;/h1&gt;

&lt;p&gt;5/13 ~ 5/14 2일간 KOOFA에서 퍼실리테이터 교육을 받았습니다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;모든 의견은 동등하게 귀중하다&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;라는 그라운드 룰로 시작하는 교육입니다.&lt;/p&gt;

&lt;h2 id=&quot;퍼실리테이션&quot;&gt;퍼실리테이션&lt;/h2&gt;

&lt;p&gt;목적은 사람들은 그 자체로 고유하고 다양성을 지는 존재이므로 다양한 참여자가 함께 소통하여 시너지를 창출하여 합의를 이루어 나가도록 돕습니다.&lt;/p&gt;

&lt;p&gt;그러나, 소통의 과정 자체게 불완전하여 오해가 생기고 갈등이 초래될 수 있으므로, 질문을 통한 탐색과 기록 등을 통하여 소통을 증진 해야 합니다.&lt;/p&gt;

&lt;p&gt;이런 과정에서 중재자와 조율자 역활을 하는 퍼실리테이터가 필요 합니다.&lt;/p&gt;

&lt;h2 id=&quot;퍼실리테이터&quot;&gt;퍼실리테이터&lt;/h2&gt;

&lt;p&gt;퍼실리테이터가 가자야 하는 가장 중요한 덕목은 &lt;strong&gt;중립성&lt;/strong&gt; 입니다.&lt;/p&gt;

&lt;h3 id=&quot;퍼실리테이터가-가져야-하는-태도&quot;&gt;퍼실리테이터가 가져야 하는 태도&lt;/h3&gt;

&lt;p&gt;참여자들의 생각에 정답 또는 옳고/그름은 없다. 다만 각자 바라보는 다른 관점들이 있다.&lt;/p&gt;

&lt;p&gt;또한 속도 보다 중요한것은 &lt;strong&gt;방향&lt;/strong&gt; 이며, 회의의 &lt;strong&gt;목적&lt;/strong&gt;과 &lt;strong&gt;결과물&lt;/strong&gt;을 &lt;strong&gt;명확&lt;/strong&gt;히 해야 한다.&lt;/p&gt;

&lt;h3 id=&quot;퍼실리테이터-필요-역량&quot;&gt;퍼실리테이터 필요 역량&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;지식&lt;/li&gt;
  &lt;li&gt;태도&lt;/li&gt;
  &lt;li&gt;기술&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;이외에도 여러가지 기술과 Tool을 배우는 즐거운 시간이었습니다.&lt;/p&gt;
&lt;/blockquote&gt;</content><category term="koofa" /><category term="퍼실리테이터" /><summary type="html">구기욱 퍼실리테이터님에게 교육을 받은 후기입니다.</summary></entry><entry><title type="html">IT 직군 직무 소개 영상</title><link href="https://lahuman.github.io/20210509/" rel="alternate" type="text/html" title="IT 직군 직무 소개 영상" /><published>2021-05-09T00:00:00+09:00</published><updated>2021-05-09T00:00:00+09:00</updated><id>https://lahuman.github.io/20210509</id><content type="html" xml:base="https://lahuman.github.io/20210509/">&lt;h1 id=&quot;it-직군-직무-소개-영상을-촬영하였습니다&quot;&gt;IT 직군 직무 소개 영상을 촬영하였습니다.&lt;/h1&gt;

&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/xN_E_UvR2Nk?start=275&quot; title=&quot;YouTube video player&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;

&lt;p&gt;입사한지 3년이 다 되어가는 시점에 회사에서 IT 직군 소개의 기회를 받아서 진행하였습니다.&lt;/p&gt;

&lt;p&gt;촬영을 진행하는 동안에 도움을 주신 분들이 많이 있습니다.&lt;/p&gt;

&lt;p&gt;잠시지만, 연애인이 되어본 기분이었네요. :)&lt;/p&gt;</content><category term="단상" /><summary type="html">4분 35초부터 출연하였습니다</summary></entry><entry><title type="html">Raspberry PI 64bit 에서 REALVNC 사용하기</title><link href="https://lahuman.github.io/raspberry_pi64_realvnc/" rel="alternate" type="text/html" title="Raspberry PI 64bit 에서 REALVNC 사용하기" /><published>2021-04-26T00:00:00+09:00</published><updated>2021-04-26T00:00:00+09:00</updated><id>https://lahuman.github.io/raspberry_pi64_realvnc</id><content type="html" xml:base="https://lahuman.github.io/raspberry_pi64_realvnc/">&lt;h1 id=&quot;raspberry-pi-64bit-에서-realvnc-사용하기&quot;&gt;Raspberry PI 64bit 에서 REALVNC 사용하기&lt;/h1&gt;

&lt;p&gt;Raspberry PI 에서 &lt;a href=&quot;https://www.realvnc.com/en/&quot;&gt;realvnc&lt;/a&gt;를 무료로 사용할 수 있습니다. 또한 기본적으로 VNC가 설치되어 사용할 수 있습니다.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.realvnc.com/en/raspberrypi/&quot;&gt;realvnc는 Raspberry PI에 대하여 개인용으로 최대 5개의 기기까지 무료로 사용할 수 있습니다.&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Control your Raspberry PI from anywhere with VNC Connect remote access software: it’s completely free for personal use and up to 5 devices. If you need to use VNC Connect commercially or you want to connect to more than 5 devices, start a trial today.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;그런데-말입니다&quot;&gt;그런데 말입니다,&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://downloads.raspberrypi.org/raspios_arm64/images/&quot;&gt;Raspberry PI 64bit OS&lt;/a&gt;에서는 VNC가 동작하지 않습니다.
이를 해결 하기 위해서는 다음의 명령어를 이용해서 기존의 realvnc server를 삭제 하고 arm64 용으로 재설치 해야 합니다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo apt remove realvnc-vnc-server
sudo apt install realvnc-vnc-server:arm64
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;다음 작업으로 vnc를 활성화 시켜야합니다.&lt;/p&gt;

&lt;p&gt;시작 메뉴 &amp;gt; 기본 설정 &amp;gt; Raspberry Pi Configuration &amp;gt; Interface &amp;gt; VNC ==&amp;gt; Enable&lt;/p&gt;

&lt;p&gt;재부팅을 하고 나면 VNC 아이콘이 오른쪽 상단에 보입니다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;realvnc에 로그인하면, public IP를 가지지 않아도 외부에서 접근이 가능&lt;/strong&gt;합니다.&lt;/p&gt;</content><category term="raspberry" /><category term="realvnc" /><category term="64bit" /><summary type="html">64bit 용 OS를 설치했을 경우 REALVNC가 기본적으로 동작 하지 않는다.</summary></entry><entry><title type="html">SpringBoot 프로젝트에서 Maven Build 시 profile 선택</title><link href="https://lahuman.github.io/maven_build_spring_profile/" rel="alternate" type="text/html" title="SpringBoot 프로젝트에서 Maven Build 시 profile 선택" /><published>2021-04-23T00:00:00+09:00</published><updated>2021-04-23T00:00:00+09:00</updated><id>https://lahuman.github.io/maven_build_spring_profile</id><content type="html" xml:base="https://lahuman.github.io/maven_build_spring_profile/">&lt;h1 id=&quot;springboot-프로젝트에서-maven-build-시-profile-선택&quot;&gt;SpringBoot 프로젝트에서 Maven Build 시 profile 선택&lt;/h1&gt;

&lt;p&gt;프로젝트 내에 여러 profile이 있을 경우 Mavne 빌드시 하나를 선택해야 합니다.&lt;/p&gt;

&lt;p&gt;Maven 프로젝트의 Root 디렉토리에서 다음 명령어로 packaging 을 하면 TEST 코드에 대하여 profile을 적용하게 됩니다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# dev profile을 사용하여 packaging 진행
./mvnw clean package -Dspring.profiles.active=dev
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;이후 결과 jar 파일을 실행시 profile을 설정하는 것도 동일 합니다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# dev profile을 사용하여 packaging 진행
java -jar -Dspring.profiles.active=dev result.jar 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><category term="springboot" /><category term="maven" /><summary type="html">이후 실행시도 해당 옵션을 동일하게 사용합니다.</summary></entry><entry><title type="html">Raspberry PI를 게임기로 사용하기 위한 ROM 다운로드</title><link href="https://lahuman.github.io/raspberry_pi_game_rom/" rel="alternate" type="text/html" title="Raspberry PI를 게임기로 사용하기 위한 ROM 다운로드" /><published>2021-04-17T00:00:00+09:00</published><updated>2021-04-17T00:00:00+09:00</updated><id>https://lahuman.github.io/raspberry_pi_game_rom</id><content type="html" xml:base="https://lahuman.github.io/raspberry_pi_game_rom/">&lt;h1 id=&quot;raspberry-pi를-게임기로-사용하기-위한-rom-다운로드&quot;&gt;Raspberry PI를 게임기로 사용하기 위한 ROM 다운로드&lt;/h1&gt;

&lt;p&gt;https://www.arcadepunks.com 라는 사이트에서 GAME ROM을 다운로드 할 수 있습니다.&lt;/p&gt;

&lt;h3 id=&quot;pi-3용-게임-다운로드-바로가기&quot;&gt;&lt;a href=&quot;https://www.arcadepunks.com/pi-images-downloads-page/&quot;&gt;PI 3용 게임 다운로드 바로가기&lt;/a&gt;&lt;/h3&gt;

&lt;h3 id=&quot;pi-4용-게임-다운로드-바로가기&quot;&gt;&lt;a href=&quot;https://www.arcadepunks.com/download-raspberry-pi-4-images/&quot;&gt;PI 4용 게임 다운로드 바로가기&lt;/a&gt;&lt;/h3&gt;</content><category term="raspberry" /><category term="game" /><category term="rom" /><summary type="html">PI 3/4 에서 사용이 가능한 ROM 정보 입니다.</summary></entry><entry><title type="html">현재의 나에 대하여 간략하게 소개하여 봅니다.</title><link href="https://lahuman.github.io/20210417/" rel="alternate" type="text/html" title="현재의 나에 대하여 간략하게 소개하여 봅니다." /><published>2021-04-17T00:00:00+09:00</published><updated>2021-04-17T00:00:00+09:00</updated><id>https://lahuman.github.io/20210417</id><content type="html" xml:base="https://lahuman.github.io/20210417/">&lt;h1 id=&quot;간략한-자기소개&quot;&gt;간략한 자기소개&lt;/h1&gt;

&lt;p&gt;안녕하세요. GSSHOP IT 개발팀에서 근무하고 있는 임광규입니다.
GSSHOP에는 2018년 11월에 입사하였습니다.&lt;/p&gt;

&lt;h2 id=&quot;q1-현재-하는-일은-어떤-것인지&quot;&gt;Q1. 현재 하는 일은 어떤 것인지?&lt;/h2&gt;

&lt;p&gt;현재 하는 일은 회사 내에서 발생하는 문제에 대하여 공감하고 함께 고민하고 해결하는 파트에서 근무하고 있습니다.&lt;/p&gt;

&lt;p&gt;진행했던 프로젝트는&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;상품 상태를 한눈에 볼 수 있게 하는 &lt;strong&gt;상품360&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;쇼핑호스트, PD, MD에게 방송 심의 정보를 제공하는 &lt;strong&gt;심의 포털&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;복잡한 CSR 대신 간편하가 요청 하는 &lt;strong&gt;행봇&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;생방송 주문/SR/시청율을 한눈에 볼수 있는 &lt;strong&gt;스르르&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;생방송 자막을 적재 하고, 심의에 문제가 되는 정보를 제공하는 &lt;strong&gt;진정방송봇&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;등이 있습니다.&lt;/p&gt;

&lt;h2 id=&quot;q2-회사를-다니면서-언제-가장-보람을-느끼는지&quot;&gt;Q2. 회사를 다니면서 언제 가장 보람을 느끼는지?&lt;/h2&gt;

&lt;p&gt;제가 만든 서비스를 사람들이 유용하게 사용할때 보람을 느끼고 있습니다.
또 동료와 함께 일을 하면서 동료에게 도움이 될때도 보람을 느낍니다.&lt;/p&gt;

&lt;h2 id=&quot;q3-개발한-서비스-혹은-진행한-프로젝트-중-가장-기억에-남는-것과-그-이유는&quot;&gt;Q3. 개발한 서비스 혹은 진행한 프로젝트 중 가장 기억에 남는 것과 그 이유는?&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;행봇&lt;/strong&gt;이라는 서비스가 가장 기억에 남습니다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;행봇&lt;/strong&gt;의 뜻은 &lt;strong&gt;실행하는 봇&lt;/strong&gt;을 의미합니다.
CSR(Customer Specific Requirements)라고 하는 복잡한 요구사항을 받던 시스템을 간략하게 만든 서비스입니다.
내부적으로는 JIRA와 연계되어 업무 담당자들의 리소스 및 진행사항을 관리 하도록 지원합니다.
&lt;br /&gt;
행봇은 가장 활발하게 쓰이고 있으며, 요청자와 담당자에게 많은 도움이 되고 있습니다.
&lt;br /&gt;
특히 사용자 입장에서 기존 복잡한 요구사항을 제목과 내용으로 단순화 하였고, 
진행사항에 대하여 workpalce로 알림을 받을 수 있어서 만족도가 높은 서비스 입니다.&lt;/p&gt;

&lt;h2 id=&quot;q4-회사-기업문화와-업무할-때의-분위기는-어떤지&quot;&gt;Q4. 회사 기업문화와 업무할 때의 분위기는 어떤지?&lt;/h2&gt;

&lt;p&gt;팀별로 다르긴 하지만 전사 기준으로 직급은 &lt;strong&gt;매니저&lt;/strong&gt;로 통일 되어 있고, 
저희 파트의 경우 영어 이름을 사용하고 있어서 다른 동료분과 대화시 좀 더 편하게 자신의 생각을 이야기 할 수 있습니다.&lt;/p&gt;

&lt;p&gt;또한 회사내에 소소한 재미를 주는 이벤트가 자주 일어 납니다.
코로나로 인해서 예전보단 축소되었지만 매년 축제도 진행하고, 어린이 날, 어버이 날, 나무심기 등등의 이벤트도 진행하였습니다.&lt;/p&gt;

&lt;h2 id=&quot;q5-가장-만족하는-복지는&quot;&gt;Q5. 가장 만족하는 복지는?&lt;/h2&gt;

&lt;p&gt;가장 만족스러웠던 복지는 회사 축제 입니다.
아쉽게도 작년 올해는 코로나로 온라인으로 진행되었지만, 
전사 직원들과 만나서 소통하고 즐기는 말 그대로 축제의 시간이었습니다.&lt;/p&gt;

&lt;h2 id=&quot;q6-함께-일하고-싶은-동료는-어떤-사람인지&quot;&gt;Q6. 함께 일하고 싶은 동료는 어떤 사람인지?&lt;/h2&gt;

&lt;p&gt;개발을 좋아하는 사람이고, 꾸준한 자기개발을 하는 사람이면 좋겠습니다.
그리고 새로운 도전을 즐길 수 있는 사람이었으면 좋겠습니다.&lt;/p&gt;</content><category term="인터뷰" /><category term="aboutme" /><summary type="html">간단한 자기 소개</summary></entry></feed>

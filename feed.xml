<?xml version="1.0" encoding="utf-8"?><?xml-stylesheet type="text/xml" href="https://lahuman.github.io/feed.xslt.xml"?><feed xmlns="http://www.w3.org/2005/Atom"><generator uri="http://jekyllrb.com" version="3.8.4">Jekyll</generator><link href="https://lahuman.github.io/feed.xml" rel="self" type="application/atom+xml" /><link href="https://lahuman.github.io/" rel="alternate" type="text/html" /><updated>2021-06-16T21:03:59+09:00</updated><id>https://lahuman.github.io/</id><title type="html">lahuman</title><subtitle>열심히 사는 아저씨</subtitle><entry><title type="html">희망에 대한 짧은 단상</title><link href="https://lahuman.github.io/20210616/" rel="alternate" type="text/html" title="희망에 대한 짧은 단상" /><published>2021-06-16T00:00:00+09:00</published><updated>2021-06-16T00:00:00+09:00</updated><id>https://lahuman.github.io/20210616</id><content type="html" xml:base="https://lahuman.github.io/20210616/">&lt;h1 id=&quot;큰-희망의-잦은-실패는-실망과-절망으로-변한다-하지만-절망은-만사가-피곤해질-뿐이다&quot;&gt;큰 희망의 잦은 실패는 실망과 절망으로 변한다. 하지만 절망은 만사가 피곤해질 뿐이다.&lt;/h1&gt;

&lt;blockquote&gt;
  &lt;p&gt;“삶이 있는 한 희망은 있다.” - 키케로&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;“희망은 사람을 성공으로 이끄는 신앙이다. 희망이 없으면, 아무것도 성취할 수가 없으며 희망 없이는 인간생활이 영위될 수 없다.” - 헬렌 켈러&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;“희망은 잠자고 있지 않는 인간의 꿈이다. 인간의 꿈이 있는 한 이 세상은 도전해볼 만하다. 어떠한 일이 있더라도 꿈을 잃지 말자. 꿈을 꾸자. 꿈은 희망을 버리지 않는 사람에게 선물로 주어진다.” - 아리스토텔레스&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;“내 비장의 무기는 아직 손안에 있다. 그것은 희망이다.” - 나폴레옹 보나파르트&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;“희망은 어둠 속에서 시작된다. 일어나 옳은 일을 하려 할 때, 고집스런 희망이 시작된다. 새벽은 올 것이다. 기다리고 보고 일하라. 포기하지 말라.” - 앤 라모트&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;“큰 희망이 큰 사람을 만든다.” - 토마스 풀러&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;희망은 정말 필요하다고 생각한다. 다만, 이루어질 수 없는 희망을 품는 것은 절망만 반복하게 된다.&lt;/p&gt;

&lt;p&gt;작은 희망으로 가슴을 채우고 점점 희망을 키워나가면서 실현해가자!&lt;/p&gt;

&lt;h2 id=&quot;희망이-절망이-되지-않도록&quot;&gt;희망이 절망이 되지 않도록!&lt;/h2&gt;</content><category term="단상" /><summary type="html">희망이 절망으로 바뀌지 않도록 노력해야 한다.</summary></entry><entry><title type="html">nestjs 테스트 케이스 예제</title><link href="https://lahuman.github.io/nestjs_jest_testcase/" rel="alternate" type="text/html" title="nestjs 테스트 케이스 예제" /><published>2021-06-14T00:00:00+09:00</published><updated>2021-06-14T00:00:00+09:00</updated><id>https://lahuman.github.io/nestjs_jest_testcase</id><content type="html" xml:base="https://lahuman.github.io/nestjs_jest_testcase/">&lt;h1 id=&quot;nestjs에서는-기본적으로-jest-기반의-테스트-케이스를-제공합니다&quot;&gt;NestJS에서는 기본적으로 jest 기반의 테스트 케이스를 제공합니다.&lt;/h1&gt;

&lt;p&gt;오늘 설명은 Controller 기반의 테스트에서 다음 내용입니다.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Repository 객체를 Mock으로 주입&lt;/li&gt;
  &lt;li&gt;Connection 객체를 Mock으로 주입&lt;/li&gt;
  &lt;li&gt;mockAuthGuard 객체를 Mock으로 주입하여 로그인 처리&lt;/li&gt;
  &lt;li&gt;첨부파일 업로드&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;mock-객체-생성&quot;&gt;Mock 객체 생성&lt;/h2&gt;

&lt;p&gt;자동으로 만들어진 테스트 케이스는 아래와 같습니다&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;import { Test, TestingModule } from '@nestjs/testing';
import { Controller } from './my.controller';

describe('Controller', () =&amp;gt; {
  let controller: Controller;

  beforeEach(async () =&amp;gt; {
    const module: TestingModule = await Test.createTestingModule({
      controllers: [Controller],
    }).compile();

    controller = module.get&amp;lt;Controller&amp;gt;(Controller);
  });

  it('should be defined', () =&amp;gt; {
    expect(controller).toBeDefined();
  });
});
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Controller의 소스는 기본적으로 service를 호출하고, service에서는 Entity를 이용하여 Repository를 Inject 합니다.&lt;/p&gt;

&lt;p&gt;Inject에 필요한 Mock객체들을 생성을 합니다.
내부 구현이 필요 없을 경우 &lt;code class=&quot;highlighter-rouge&quot;&gt;jest.fn()&lt;/code&gt;를 활용하면 쉽게 처리 할 수 있습니다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;class MockRepository {

  async save(any) {
    return new OssAtachFileDEntity({
      &quot;refSeq&quot;: 1,
      &quot;refCd&quot;: &quot;RE&quot;,
      &quot;regrId&quot;: &quot;12345&quot;,
      &quot;modrId&quot;: &quot;12345&quot;,
      &quot;fileName&quot;: &quot;첨부파일 테스트.pdf&quot;,
      &quot;filePath&quot;: &quot;202106/e55daf47-af60-4e8d-9e54-67cbfc680556&quot;,
      &quot;size&quot;: 73666,
      &quot;fileExtension&quot;: &quot;pdf&quot;,
      &quot;seq&quot;: 2
    });
  }
  async find() {
    return [new OssAtachFileDEntity({
      &quot;refSeq&quot;: 1,
      &quot;refCd&quot;: &quot;RE&quot;,
      &quot;regrId&quot;: &quot;12345&quot;,
      &quot;modrId&quot;: &quot;12345&quot;,
      &quot;fileName&quot;: &quot;첨부파일 테스트.pdf&quot;,
      &quot;filePath&quot;: &quot;202106/e55daf47-af60-4e8d-9e54-67cbfc680556&quot;,
      &quot;size&quot;: 73666,
      &quot;fileExtension&quot;: &quot;pdf&quot;,
      &quot;seq&quot;: 2
    })];
  }
  async findOne(any) {
    return new OssAtachFileDEntity({
      &quot;refSeq&quot;: 1,
      &quot;refCd&quot;: &quot;RE&quot;,
      &quot;regrId&quot;: &quot;12345&quot;,
      &quot;modrId&quot;: &quot;12345&quot;,
      &quot;fileName&quot;: &quot;첨부파일 테스트.pdf&quot;,
      &quot;filePath&quot;: &quot;202106/e55daf47-af60-4e8d-9e54-67cbfc680556&quot;,
      &quot;size&quot;: 73666,
      &quot;fileExtension&quot;: &quot;pdf&quot;,
      &quot;seq&quot;: 2
    });
  }

  async remove() {

  }
}

const mockConnection = () =&amp;gt; ({
  transaction: jest.fn(),
  createQueryRunner: () =&amp;gt; ({
    connect: jest.fn(),
    startTransaction: jest.fn(),
    commitTransaction: jest.fn(),
    rollbackTransaction: jest.fn(),
    release: jest.fn(),
    manager: {
      save: (r =&amp;gt; r)
    }
  })
});

const mockAuthGuard: CanActivate = {
  canActivate: (context: ExecutionContext) =&amp;gt; {
    const request = context.switchToHttp().getRequest();
    request.user = {
      id: '12345',
      name: &quot;임광규&quot;,
      email: 'lahuman@daum.net'
    };
    return request.user;
  }
};
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;mock-객체-주입&quot;&gt;Mock 객체 주입&lt;/h2&gt;

&lt;p&gt;구현한 Mock 객체들을 module에 Inject 처리를 합니다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; let app: INestApplication;
  let httpService: HttpService;
  let controller: Controller;

  beforeEach(async () =&amp;gt; {

    const module: TestingModule = await Test.createTestingModule({
      imports: [HttpModule, ConfigModule.forRoot({ isGlobal: true })],
      controllers: [Controller],
      providers: [Service,
        {
          provide: getRepositoryToken(OssReqMEntity),
          useClass: MockRepository,
        },
        {
          provide: Connection,
          useFactory: mockConnection
        }
      ],
    })
      .overrideGuard(AuthenticatedGuard).useValue(mockAuthGuard)
      .compile();
    app = module.createNestApplication();
    httpService = module.get&amp;lt;HttpService&amp;gt;(HttpService);
    await app.init();

    controller = module.get&amp;lt;Controller&amp;gt;(Controller);
  });

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;첨부파일-테스트&quot;&gt;첨부파일 테스트&lt;/h2&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; it('첨부파일 추가', async () =&amp;gt; {
    const response = await request(app.getHttpServer())
      .post(&quot;/attach-file/upload&quot;)
      .attach('file', '/path/file-name')
      .expect(201);
    expect(JSON.parse(response.text).status).toEqual(true);
  });
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;로그인-처리-테스트&quot;&gt;로그인 처리 테스트&lt;/h2&gt;

&lt;p&gt;로그인의 경우 PASSPORT-SAML 방식을 이용하였으며 Request에 user라는 객체를 이용합니다.&lt;/p&gt;

&lt;p&gt;등록된 결과에 userId가 12345인지 확인하는 테스트를 진행합니다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; it('조회', async () =&amp;gt; {
    const response = await request(app.getHttpServer())
      .get('/1')
      .expect(200);
    expect(JSON.parse(response.text).regrId).toEqual(&quot;12345&quot;);
  });
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;이상으로 기본적인 Nestjs 테스트 케이스를 사용해보았습니다.&lt;/p&gt;

&lt;h2 id=&quot;은근-어려웠네요&quot;&gt;은근 어려웠네요.&lt;/h2&gt;</content><category term="jest" /><category term="supertest" /><category term="nestjs" /><summary type="html">mock 객제 주입위주로 샘플을 정리 하였습니다.</summary></entry><entry><title type="html">jest를 이용한 테스트 케이스를 작성해보고 있다.</title><link href="https://lahuman.github.io/20210613/" rel="alternate" type="text/html" title="jest를 이용한 테스트 케이스를 작성해보고 있다." /><published>2021-06-13T00:00:00+09:00</published><updated>2021-06-13T00:00:00+09:00</updated><id>https://lahuman.github.io/20210613</id><content type="html" xml:base="https://lahuman.github.io/20210613/">&lt;h1 id=&quot;백문이불여일타라는-개발자의-말이-있듯해보는-중이다&quot;&gt;백문이불여일타라는 개발자의 말이 있듯해보는 중이다.&lt;/h1&gt;

&lt;p&gt;일단 해보고 이상하다고 느껴지는 부분을 다시 고찰하여 보자!&lt;/p&gt;

&lt;p&gt;일단 고~&lt;/p&gt;

&lt;h2 id=&quot;못먹어도-고&quot;&gt;못먹어도 고!&lt;/h2&gt;</content><category term="단상" /><summary type="html">DB 연결을 직접 하지 않고, Mock 객체를 주입하여 테스트를 해보고 있다.</summary></entry><entry><title type="html">이해를 못하는건가? 이해가 안되는건가?</title><link href="https://lahuman.github.io/20210608/" rel="alternate" type="text/html" title="이해를 못하는건가? 이해가 안되는건가?" /><published>2021-06-08T00:00:00+09:00</published><updated>2021-06-08T00:00:00+09:00</updated><id>https://lahuman.github.io/20210608</id><content type="html" xml:base="https://lahuman.github.io/20210608/">&lt;h1 id=&quot;이해를-못하는건지-안-하는건지&quot;&gt;이해를 못하는건지, 안 하는건지…&lt;/h1&gt;

&lt;p&gt;어떤 문제에 대하여 이해를 못하는 건지, 안하는 건지…&lt;/p&gt;

&lt;p&gt;계속 같은 실수를 반복하는 건지?&lt;/p&gt;

&lt;p&gt;나는 여기서 무엇을 하고 있는건지?&lt;/p&gt;

&lt;p&gt;답답한 마음에 아무것도 하기 싫어진다.&lt;/p&gt;

&lt;h2 id=&quot;답답함아-물러가라&quot;&gt;답답함아 물러가라!&lt;/h2&gt;</content><category term="단상" /><summary type="html">답답한 마음에 일이 안된다.</summary></entry><entry><title type="html">쉬운데 어렵다.</title><link href="https://lahuman.github.io/20210606/" rel="alternate" type="text/html" title="쉬운데 어렵다." /><published>2021-06-06T00:00:00+09:00</published><updated>2021-06-06T00:00:00+09:00</updated><id>https://lahuman.github.io/20210606</id><content type="html" xml:base="https://lahuman.github.io/20210606/">&lt;h1 id=&quot;요즘-모든-일들이-쉬운데-어렵다&quot;&gt;요즘 모든 일들이 쉬운데 어렵다.&lt;/h1&gt;

&lt;p&gt;일 자체는 쉽지만, 욕심을 부리게 되어서 어려워 진다.&lt;/p&gt;

&lt;p&gt;쉽게 할 수 있는 일을 어렵게 하게 되는 욕심을 내려놓자.&lt;/p&gt;

&lt;h2 id=&quot;욕심아-사라져라&quot;&gt;욕심아 사라져라!&lt;/h2&gt;</content><category term="단상" /><summary type="html">요즘 일들이 쉬운데 어렵다.</summary></entry><entry><title type="html">관점을 변경하는 쉬운 방법은 실행 + 경험이다.</title><link href="https://lahuman.github.io/20210605/" rel="alternate" type="text/html" title="관점을 변경하는 쉬운 방법은 실행 + 경험이다." /><published>2021-06-05T00:00:00+09:00</published><updated>2021-06-05T00:00:00+09:00</updated><id>https://lahuman.github.io/20210605</id><content type="html" xml:base="https://lahuman.github.io/20210605/">&lt;h1 id=&quot;관점을-변경하는-쉬운-방법&quot;&gt;관점을 변경하는 쉬운 방법&lt;/h1&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;들은 것은 잊어버리고, 본 것은 기억하고, 직접 해본 것은 이해한다.
- 공자
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;관점을 변경하는 일은 쉽지 않다.&lt;/p&gt;

&lt;p&gt;새로운 관점을 받아 들이기 위해서는 경험해야 한다.&lt;/p&gt;

&lt;p&gt;들은 것은 잊기 쉽고, 본 것은 이해하지 못할 수 있다.
마지막으로 직접 해본 일 이어야만 이해할 수 있다.&lt;/p&gt;

&lt;p&gt;내 경우는 공자의 말씀처럼 해보지 못한 일은 쉽게 잊거나, 이해를 못하게 된다.&lt;/p&gt;

&lt;p&gt;실패를 두려워하지 않고 시도해보자! 그리고 즐기자!&lt;/p&gt;</content><category term="단상" /><category term="관점" /><summary type="html">책으로만 경험해본 관점은 죽은 지식과 같다.</summary></entry><entry><title type="html">육아가 힘들다.</title><link href="https://lahuman.github.io/20210528/" rel="alternate" type="text/html" title="육아가 힘들다." /><published>2021-05-28T00:00:00+09:00</published><updated>2021-05-28T00:00:00+09:00</updated><id>https://lahuman.github.io/20210528</id><content type="html" xml:base="https://lahuman.github.io/20210528/">&lt;h1 id=&quot;아이를-키우는-일이-쉽지-않다&quot;&gt;아이를 키우는 일이 쉽지 않다.&lt;/h1&gt;

&lt;p&gt;정말 어렵다. 어려워.&lt;/p&gt;

&lt;p&gt;이젠 2춘기부터 시작인지.. 벌써부터 피곤하게 만든다&lt;/p&gt;</content><category term="단상" /><category term="육아" /><summary type="html">이젠 2춘기부터 시작인가</summary></entry><entry><title type="html">nodejs에서 middleware 처리 방법</title><link href="https://lahuman.github.io/nodejs_middleware/" rel="alternate" type="text/html" title="nodejs에서 middleware 처리 방법" /><published>2021-05-25T00:00:00+09:00</published><updated>2021-05-25T00:00:00+09:00</updated><id>https://lahuman.github.io/nodejs_middleware</id><content type="html" xml:base="https://lahuman.github.io/nodejs_middleware/">&lt;h1 id=&quot;nodejs에서-middleware-처리-방법&quot;&gt;nodejs에서 middleware 처리 방법&lt;/h1&gt;

&lt;p&gt;기존 function에서 오류가 날 경우 봇으로 메시지 발송 기능을 구현 하려고 합니다.&lt;/p&gt;

&lt;p&gt;express에서는 middleware를 활용했었는데, 순수한 javascript에서는 어떻게 해야할지 검색을 해보니 &lt;a href=&quot;https://stackoverflow.com/questions/11742067/is-there-a-way-to-add-try-catch-to-every-function-in-javascript&quot;&gt;Is there a way to add try-catch to every function in Javascript?&lt;/a&gt; 를 확인 할 수 있었습니다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;var tcWrapper = function(f) {
    return function() {
        try {
            f.apply(this, arguments);
        } catch(e) {
            customErrorHandler(e)
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;위 예제의 문제는&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;결과 값 return 처리가 안되었다.&lt;/li&gt;
  &lt;li&gt;async (비동기) 처리에서 오류 발생시 catch가 안됩니다.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;이를 해결하기 위해서 다음과 같이 해결하였습니다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;// 예제 function
const example = function ({ data }) {
  return new Promise((res, rej) =&amp;gt; setTimeout(() =&amp;gt; { rej({ status: 100, id: data.id, name: &quot;임광규&quot; }) }, 1000));
}

// middleware 구현
const wrapper = function (f) {
  return async function () {
    try {
      return await f.apply(this, arguments);
    } catch (err) {
      try {
        const { statusCode: status } = JSON.parse(err);
        if (status &amp;gt; 400) {
          console.log(&quot;status is over the 400&quot;)
        }
      } catch (e) { console.log(e) };

      throw err;
    }
  }
};

// 사용 예제 
(async () =&amp;gt; {
  const fnc = wrapper(example);
  const result = await fnc({ data: { id: &quot;23201&quot; } });
  console.log(result)
})();
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ol&gt;
  &lt;li&gt;return 구문 추가로 최종 결과값 전달&lt;/li&gt;
  &lt;li&gt;async, await 키워드 추가로 비동기에 오류 누락 문제 해결&lt;/li&gt;
  &lt;li&gt;throw 구문으로 오류 전파&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;사용은 &lt;code class=&quot;highlighter-rouge&quot;&gt;module.export&lt;/code&gt; 시 &lt;code class=&quot;highlighter-rouge&quot;&gt;function을 감싸서 처리&lt;/code&gt; 합니다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;module.exports = {
  getUsers: wrapper(getUsers),
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;참고자료&quot;&gt;참고자료&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://stackoverflow.com/questions/11742067/is-there-a-way-to-add-try-catch-to-every-function-in-javascript&quot;&gt;Is there a way to add try-catch to every function in Javascript?&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="nodejs" /><category term="middleware" /><summary type="html">express 없이 순수 javascript 에서 처리 하는 방법</summary></entry><entry><title type="html">ReactJS composition(합성) 사용하기</title><link href="https://lahuman.github.io/react_composition/" rel="alternate" type="text/html" title="ReactJS composition(합성) 사용하기" /><published>2021-05-24T00:00:00+09:00</published><updated>2021-05-24T00:00:00+09:00</updated><id>https://lahuman.github.io/react_composition</id><content type="html" xml:base="https://lahuman.github.io/react_composition/">&lt;h1 id=&quot;reactjs-합성-사용하기&quot;&gt;reactjs 합성 사용하기&lt;/h1&gt;

&lt;p&gt;Reactjs에서는 상속보다 더 강력한 합성을 제공합니다.
상속 대신 합성을 사용하면 컴포넌트 간에 코드를 재활용하기 펼리합니다.&lt;/p&gt;

&lt;p&gt;합성의 사용 예제는 아래와 같습니다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;function SplitPane(props) {
  return (
    &amp;lt;div className=&quot;SplitPane&quot;&amp;gt;
      &amp;lt;div className=&quot;SplitPane-left&quot;&amp;gt;
        {props.left}
      &amp;lt;/div&amp;gt;
      &amp;lt;div className=&quot;SplitPane-right&quot;&amp;gt;
        {props.right}
      &amp;lt;/div&amp;gt;
    &amp;lt;/div&amp;gt;
  );
}

function App() {
  return (
    &amp;lt;SplitPane
      left={
        &amp;lt;Contacts /&amp;gt;
      }
      right={
        &amp;lt;Chat /&amp;gt;
      } /&amp;gt;
  );
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;Contacts /&gt;
&lt;p&gt;와 &lt;Chat&gt;&lt;/Chat&gt; 동일한 React 엘리먼트는 단지 객체이기 때문에 다른 데이터처럼 props로 전달할 수 있습니다.&lt;/p&gt;

&lt;h2 id=&quot;참고자료&quot;&gt;참고자료&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://ko.reactjs.org/docs/composition-vs-inheritance.html&quot;&gt;합성 (Composition) vs 상속 (Inheritance)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="reactjs" /><category term="composition" /><summary type="html">컴포넌트에서 상속보다 합성 사용하기</summary></entry><entry><title type="html">좋은 문화를 가진 팀의 문화를 다른 팀에 전파를 할 수 있을까?</title><link href="https://lahuman.github.io/20210522/" rel="alternate" type="text/html" title="좋은 문화를 가진 팀의 문화를 다른 팀에 전파를 할 수 있을까?" /><published>2021-05-22T00:00:00+09:00</published><updated>2021-05-22T00:00:00+09:00</updated><id>https://lahuman.github.io/20210522</id><content type="html" xml:base="https://lahuman.github.io/20210522/">&lt;h1 id=&quot;문화를-어떻게-전파-할-수-있을까&quot;&gt;문화를 어떻게 전파 할 수 있을까?&lt;/h1&gt;

&lt;p&gt;특정 팀의 문화를 다른 팀에 전파하려면 어떻게 해야 할까요?&lt;/p&gt;

&lt;p&gt;저희 팀의 문화가 좋다며, 다른 팀에 전파를 하라는 미션이 떨어졌습니다.&lt;/p&gt;

&lt;p&gt;개인적으로는 팀의 문화는 해당 팀의 상황과 환경 그리고 사람에 따라 달라진다고 생각됩니다.&lt;/p&gt;

&lt;p&gt;한명의 사람이 팀을 변화시키지 위해서는 많은 권한을 제공해야 합니다.&lt;/p&gt;

&lt;p&gt;하지만 이는 자발적인 변화가 아닌 강제적인 변화로 기존 팀원들에게 부담감과 변화에 대한 반발이 생기게 됩니다.&lt;/p&gt;

&lt;p&gt;이것들이 변화를 위한 과정일까요? 그리고 변화가 가능한 걸까요?&lt;/p&gt;

&lt;p&gt;마지막으로 특정 특출난 동료가 있다는 건 좋은 일일까요? 나쁜 일일까요?&lt;/p&gt;

&lt;h2 id=&quot;많은-생각이-드는-저녁&quot;&gt;많은 생각이 드는 저녁&lt;/h2&gt;</content><category term="단상" /><category term="문화" /><summary type="html">모종 처럼 좋은 문화를 가진 팀원을 다른 팀에 넣으면 변할까?</summary></entry></feed>

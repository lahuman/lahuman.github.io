<?xml version="1.0" encoding="utf-8"?><?xml-stylesheet type="text/xml" href="https://lahuman.github.io/feed.xslt.xml"?><feed xmlns="http://www.w3.org/2005/Atom"><generator uri="http://jekyllrb.com" version="3.8.4">Jekyll</generator><link href="https://lahuman.github.io/feed.xml" rel="self" type="application/atom+xml" /><link href="https://lahuman.github.io/" rel="alternate" type="text/html" /><updated>2020-06-28T22:47:37+09:00</updated><id>https://lahuman.github.io/</id><title type="html">lahuman</title><subtitle>열심히 사는 아저씨</subtitle><entry><title type="html">Node] Sequelize에서 MSSQL 연동시 RFC 6066  오류 해결 방법</title><link href="https://lahuman.github.io/node_mssql_sequelize/" rel="alternate" type="text/html" title="Node] Sequelize에서 MSSQL 연동시 RFC 6066  오류 해결 방법" /><published>2020-06-26T00:00:00+09:00</published><updated>2020-06-26T00:00:00+09:00</updated><id>https://lahuman.github.io/node_mssql_sequelize</id><content type="html" xml:base="https://lahuman.github.io/node_mssql_sequelize/">&lt;h1 id=&quot;node-sequelize에서-mssql-연동시-rfc-6066-오류-해결-방법&quot;&gt;Node] Sequelize에서 MSSQL 연동시 RFC 6066 오류 해결 방법&lt;/h1&gt;

&lt;p&gt;Sequlize 에서 MSSQL을 연동할때 드라이버로 &lt;strong&gt;tedious@^6.0.0&lt;/strong&gt; 이상을 사용하라고 가이드 합니다.&lt;/p&gt;

&lt;p&gt;설치해서 DBMS에 접근했을때, 다음과 같은 오류가 발생하면,&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;(node:95610) [DEP0123] DeprecationWarning: Setting the TLS ServerName to an IP address is not permitted by RFC 6066. This will be ignored in a future version.
(Use node --trace-deprecation ... to show where the warning was created)
(node:95610) UnhandledPromiseRejectionWarning: SequelizeConnectionError: Failed to connect to IPADDRESS:1433 - 4438633920:error:1425F102:SSL routines:ssl_choose_client_version:unsupported protocol:../deps/openssl/openssl/ssl/statem/statem_lib.c:1942:
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;db연결 옵션에 encrypt: false을 추가 하면 됩니다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&quot;use static&quot;;

const Sequelize = require(&quot;sequelize&quot;);

const mssqlDB = new Sequelize(
  process.env.HOMENET_MSSQL_DB,
  process.env.HOMENET_MSSQL_USER,
  process.env.HOMENET_MSSQL_PASS,
  {
    host: process.env.HOMENET_MSSQL_URL,
    port: process.env.HOMENET_MSSQL_PORT || &quot;1433&quot;,
    dialect: &quot;mssql&quot;,
    dialectOptions: {
      options: {
        useUTC: false,
        dateFirst: 1,
        encrypt: false, // 오류 발생시 추가 한 부분!
      },
    },
    pool: {
      max: 5,
      min: 0,
      acquire: 30000,
      idle: 10000,
    },
    define: {
      // The `timestamps` field specify whether or not the `createdAt` and `updatedAt` fields will be created.
      // This was true by default, but now is false by default
      timestamps: false,
      supportBigNumbers: true,
    },
  }
);

module.exports = {
    mssqlDB
};

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;이렇게 하면 문제없이 조회가 됩니다!!&lt;/p&gt;

&lt;h2 id=&quot;참고자료&quot;&gt;참고자료&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://sequelize.org/v5/manual/dialects.html&quot;&gt;Dialects&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/tediousjs/node-mssql/issues/884&quot;&gt;DeprecationWarning: Setting the TLS ServerName to an IP address is not permitted by RFC 6066. #884&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="express" /><category term="tedious" /><category term="sequelize" /><summary type="html">mssql 드라이버로 mssql이 아니라 tedious 라이브러리를 쓰라고 하네요!</summary></entry><entry><title type="html">MSA 관련 토론회를 했다.</title><link href="https://lahuman.github.io/20200624/" rel="alternate" type="text/html" title="MSA 관련 토론회를 했다." /><published>2020-06-24T00:00:00+09:00</published><updated>2020-06-24T00:00:00+09:00</updated><id>https://lahuman.github.io/20200624</id><content type="html" xml:base="https://lahuman.github.io/20200624/">&lt;h1 id=&quot;msa-토론회&quot;&gt;MSA 토론회&lt;/h1&gt;

&lt;p&gt;이번 토론회에서는 외부 초청으로 오신 분이 계셨습니다.&lt;/p&gt;

&lt;p&gt;나이가 지긋하신 분이 오셨는데, 개발이야기를 함께 하기에 연세도 상당히 많이 보이셨습니다.&lt;/p&gt;

&lt;p&gt;소개를 해주셨는데, NEXTREE 대표님이라고 해서 살짝 놀랐습니다.&lt;/p&gt;

&lt;p&gt;개발 이야기를 하는 회사의 대표님는 처음 뵈었습니다.&lt;/p&gt;

&lt;p&gt;우선 이야기 해주신 몇가지 이야기중 기억에 남는 것은 아래와 같습니다.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;이벤트 기반으로 개발 해야 한다.&lt;/li&gt;
  &lt;li&gt;데이터(값)가 아닌 도메인 기준으로 설계 해야 한다.&lt;/li&gt;
  &lt;li&gt;빅뱅 보단 점진적으로 MSA로 변환하는 것을 추천 한다.&lt;/li&gt;
  &lt;li&gt;단일 트랜젝션을 사용하지 않으면 성능이 개선된다.&lt;/li&gt;
  &lt;li&gt;MSA는 FRONTEND와 BACKEND가 쌍으로 구성된다.&lt;/li&gt;
  &lt;li&gt;동일한 레벨의 API 호출은 안된다.(FRONTEND를 통해서 호출 하거나, 아래 레벨의 API만 호출 할수 있다.)&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;그 외에도 많은 이야기를 해주셨는데, 유익한 시간이었습니다.&lt;/p&gt;

&lt;h2 id=&quot;즐거운-시간이었습니다&quot;&gt;즐거운 시간이었습니다.&lt;/h2&gt;</content><category term="단상" /><category term="MSA" /><summary type="html">NEXTREE 대표님이 오셔서 토론회를 함께 했습니다.</summary></entry><entry><title type="html">Node] epxress 서버에서 NODE_ENV를 production으로 설정시 앱 성능 3배 향상 됩니다.</title><link href="https://lahuman.github.io/node_env-production/" rel="alternate" type="text/html" title="Node] epxress 서버에서 NODE_ENV를 production으로 설정시 앱 성능 3배 향상 됩니다." /><published>2020-06-15T00:00:00+09:00</published><updated>2020-06-15T00:00:00+09:00</updated><id>https://lahuman.github.io/node_env-production</id><content type="html" xml:base="https://lahuman.github.io/node_env-production/">&lt;h1 id=&quot;node-epxress-서버에서-node_env를-production으로-설정시-앱-성능-3배-향상-됩니다&quot;&gt;Node] epxress 서버에서 NODE_ENV를 production으로 설정시 앱 성능 3배 향상 됩니다.&lt;/h1&gt;

&lt;p&gt;함께 있는 동료에서 &lt;strong&gt;NODE_ENV&lt;/strong&gt;를 &lt;strong&gt;production&lt;/strong&gt;으로만 변경해서 성능 향상이 된다는 이야기를 처음 들었을때는 약간의 의구심이 생겼었습니다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;LOG_LEVEL&lt;/strong&gt;도 아니고 NODE_ENV를 변경해서 어떻게 달라지는거지?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;그런데 &lt;strong&gt;Express 서버&lt;/strong&gt;의 경우에는 NODE_ENV가 production인 경우 다음과 같이 동작한다고 합니다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;보기 템플리트를 캐싱.&lt;/li&gt;
  &lt;li&gt;CSS 확장기능을 통해 생성된 CSS 파일을 캐싱.&lt;/li&gt;
  &lt;li&gt;더 간결한 오류 메시지를 생성.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;위의 내용은 &lt;a href=&quot;https://expressjs.com/ko/advanced/best-practice-performance.html#set-node_env-to-production&quot;&gt;NODE_ENV를 “production”으로 설정&lt;/a&gt;에서 한글로도 나와 있습니다.&lt;/p&gt;

&lt;p&gt;Express 서버를 사용할경우 꼭 NODE_ENV를 production으로 설정해야겠습니다!&lt;/p&gt;

&lt;h2 id=&quot;참고자료&quot;&gt;참고자료&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://expressjs.com/ko/advanced/best-practice-performance.html#set-node_env-to-production&quot;&gt;NODE_ENV를 “production”으로 설정&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.dynatrace.com/news/blog/the-drastic-effects-of-omitting-node-env-in-your-express-js-applications/&quot;&gt;The drastic effects of omitting NODE_ENV in your Express.js applications&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="express" /><category term="node" /><summary type="html">express 서버의 성능향상 설정</summary></entry><entry><title type="html">번아웃이 온거 같다…</title><link href="https://lahuman.github.io/20200609/" rel="alternate" type="text/html" title="번아웃이 온거 같다..." /><published>2020-06-08T00:00:00+09:00</published><updated>2020-06-08T00:00:00+09:00</updated><id>https://lahuman.github.io/20200609</id><content type="html" xml:base="https://lahuman.github.io/20200609/">&lt;h1 id=&quot;입사한지-1년동안-정말-열심히-개발해왔다&quot;&gt;입사한지 1년동안 정말 열심히 개발해왔다&lt;/h1&gt;

&lt;p&gt;1년간 많은 애자일 방식으로 많은 프로토타입을 만들었다.&lt;/p&gt;

&lt;p&gt;프로토타입은 실패한 것도 있고 성공한 것도 있다.&lt;/p&gt;

&lt;p&gt;10개의 프로젝트 중 3개만 남고 7개는 사용성이 떨어지거나, 필요성이 없어서 중지 되었다.&lt;/p&gt;

&lt;p&gt;이제 회사에서 다시 프로토타입성 프로젝트를 시작한다고 하는데…&lt;/p&gt;

&lt;p&gt;힘들다는 생각부터 든다.&lt;/p&gt;

&lt;p&gt;계속하는 것이 쉽지 않은 일이지만, 내적인 요소보다 외적인 요소로 지친다는 생각이 많이 든다.&lt;/p&gt;

&lt;h2 id=&quot;그래도-또-하겠지&quot;&gt;그래도 또 하겠지&lt;/h2&gt;</content><category term="단상" /><summary type="html">일을 하면서 가치가 있는 일을 하고 있는지 의구심이 생기고 있다</summary></entry><entry><title type="html">회사가 사원을 어떻게 대하느냐에 따라 능률이 달라집니다.</title><link href="https://lahuman.github.io/20200608/" rel="alternate" type="text/html" title="회사가 사원을 어떻게 대하느냐에 따라 능률이 달라집니다." /><published>2020-06-08T00:00:00+09:00</published><updated>2020-06-08T00:00:00+09:00</updated><id>https://lahuman.github.io/20200608</id><content type="html" xml:base="https://lahuman.github.io/20200608/">&lt;h1 id=&quot;요즘의-회사는-직원을-도구처럼-대하고-있다&quot;&gt;요즘의 회사는 직원을 도구처럼 대하고 있다.&lt;/h1&gt;

&lt;p&gt;입사 당시에는 이런 분위기까진 아니였는데… 요즘은 하루하루 실망하게 된다.&lt;/p&gt;

&lt;p&gt;당장 급한 프로젝트에 사람을 투입해서 책임지고 끝내라고 지시한다.&lt;/p&gt;

&lt;p&gt;정규직으로 일하는 사람들에게 계약직처럼 일하라고 종용한다. 
(웃긴건 계약직이 더 열심히 일할꺼라고 생각하는 근거는 뭘까?)&lt;/p&gt;

&lt;p&gt;근래에 퇴사한 사람만 4명이다. 계속 퇴사하는 사람들이 늘고 있다.&lt;/p&gt;

&lt;p&gt;또 이직을 꿈꾸는 사람들이 꽤 생겼다.&lt;/p&gt;

&lt;h2 id=&quot;아쉽지만-이-것-또한-지나가겠지&quot;&gt;아쉽지만 이 것 또한 지나가겠지…&lt;/h2&gt;</content><category term="단상" /><summary type="html">교체 가능한 도구로만 대하면 딱 그만큼만 일하고 싶어지네요.</summary></entry><entry><title type="html">Node] sequelize에서 mysql 8.0 로그인시 unknown plugin sha256_password 오류 발생</title><link href="https://lahuman.github.io/mysql_sha256_login_error/" rel="alternate" type="text/html" title="Node] sequelize에서 mysql 8.0 로그인시 unknown plugin sha256_password 오류 발생" /><published>2020-06-04T00:00:00+09:00</published><updated>2020-06-04T00:00:00+09:00</updated><id>https://lahuman.github.io/mysql_sha256_login_error</id><content type="html" xml:base="https://lahuman.github.io/mysql_sha256_login_error/">&lt;h1 id=&quot;node-sequelize에서-mysql-로그인시-unknown-plugin-sha256_password-오류-발생&quot;&gt;Node] sequelize에서 mysql 로그인시 unknown plugin sha256_password 오류 발생&lt;/h1&gt;

&lt;p&gt;개발서버를 구축하고 테스트를 진행중에 아래와 같은 오류가 발생하였습니다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;node:56906) [DEP0097] DeprecationWarning: Using a domain property in MakeCallback is deprecated. Use the async_context variant of MakeCallback or the AsyncResource class instead.
2020-06-04 03:30:55.384 KST [error]: main - Server requests authentication using unknown plugin sha256_password. See TODO: add plugins doco here on how to configure or author authentication plugins.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;sha256_password 플러그인 설치를 해야 하는건가? 아니면 설정을 추가해야 하는건가 많이 찾아봤는데요.&lt;/p&gt;

&lt;p&gt;결론은 Mysql 8.0 이상에서 계정을 생성할때 비밀번호 생성을 아래와 같이 해서 발생한 문제였습니다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;create user '사용자'@'%' identified by '비밀번호';
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;만약 계정을 생성했다면 다음 명령어로 비밀번호를 업데이트 하면 문제가 해결 됩니다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ALTER user '사용자'@'%' IDENTIFIED WITH mysql_native_password BY '비밀번호';
flush privileges;

// 또는

use mysql;
update user set authentication_string=password('비밀번호'), plugin='mysql_native_password' where user='사용자';
flush privileges;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;mysql_native_password 은 기존 인증방법으로 보안 수준을 낮추지만, 이전 드라이버와 호환이 가능한 비밀번호 암호화 방식입니다.&lt;/p&gt;

&lt;h3 id=&quot;오늘의-삽질-끝&quot;&gt;오늘의 삽질 끝!&lt;/h3&gt;

&lt;h2 id=&quot;참고자료&quot;&gt;참고자료&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://oasisbase.tistory.com/43&quot;&gt;Sequelize와 mysql 연결 에러&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://to-dy.tistory.com/58&quot;&gt;MySQL 8.0 비밀번호 변경하기! (MySQL 5.7버전 이상)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="sequelize" /><category term="node" /><category term="error" /><summary type="html">Server requests authentication using unknown plugin sha256_password.</summary></entry><entry><title type="html">Session 인증이 들어간 Axois 통신 사용하기</title><link href="https://lahuman.github.io/cors_axios_session/" rel="alternate" type="text/html" title="Session 인증이 들어간 Axois 통신 사용하기" /><published>2020-06-04T00:00:00+09:00</published><updated>2020-06-04T00:00:00+09:00</updated><id>https://lahuman.github.io/cors_axios_session</id><content type="html" xml:base="https://lahuman.github.io/cors_axios_session/">&lt;h1 id=&quot;session-인증이-들아간-axios-통신-시-유의-사항&quot;&gt;Session 인증이 들아간 Axios 통신 시 유의 사항&lt;/h1&gt;

&lt;p&gt;기본적으로 Axios를 이용한 통신시 인증 쿠키값을 전달하기 위해서는 아래 설정을 추가 해줘야 합니다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;const axios = require('axios');

// `withCredentials` indicates whether or not cross-site Access-Control requests
// should be made using credentials
// 기본 값은 false 입니다.
axios.defaults.withCredentials = true;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;그리고 API 서버와 통신을 하면, 다음과 같이 오류가 발생합니다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Access to XMLHttpRequest at 'http://lahuman.github.io' from origin 'http://localhost:8080' has been blocked by CORS policy: The value of the 'Access-Control-Allow-Origin' header in the response must not be the wildcard '*' when the request's credentials mode is 'include'. The credentials mode of requests initiated by the XMLHttpRequest is controlled by the withCredentials attribute.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;해당 오류의 원인은 &lt;a href=&quot;https://developer.mozilla.org/ko/docs/Web/HTTP/CORS/Errors/CORSNotSupportingCredentials&quot;&gt;Reason: Credential is not supported if the CORS header ‘Access-Control-Allow-Origin’ is ‘*’&lt;/a&gt; 과 같습니다.&lt;/p&gt;

&lt;p&gt;인증 정보를 포함한 통신시 &lt;strong&gt;Access-Control-Allow-Origin&lt;/strong&gt; 값이 ‘*’ 일 경우 지원을 하지 않습니다.&lt;/p&gt;

&lt;h5 id=&quot;access-control-allow-origin-값이--로-설정된-통신-예제&quot;&gt;Access-Control-Allow-Origin 값이 * 로 설정된 통신 예제&lt;/h5&gt;

&lt;p&gt;&lt;img src=&quot;assets/img/post_img/cors_start.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;결국 각 서버의 호스트 정보를 &lt;a href=&quot;https://www.npmjs.com/package/cors&quot;&gt;cors&lt;/a&gt; 설정에 추가 해야 합니다.&lt;/p&gt;

&lt;p&gt;아래는 인증 정보 샘플 입니다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;const express = require(&quot;express&quot;);
const app = express();
const cors = require(&quot;cors&quot;);
app.use(
  cors({
    origin: [
      &quot;http://target.service.com&quot;,
      &quot;https://lahuman.github.io&quot;,
      &quot;http://localhost:8080&quot;,
    ],
    methods: &quot;GET,HEAD,PUT,PATCH,POST,DELETE&quot;,
    preflightContinue: false,
    optionsSuccessStatus: 204,
    credentials: true,
  })
);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h5 id=&quot;access-control-allow-origin-값이-호스트에-알맞게-적용된-통신-예제&quot;&gt;Access-Control-Allow-Origin 값이 호스트에 알맞게 적용된 통신 예제&lt;/h5&gt;

&lt;p&gt;&lt;img src=&quot;assets/img/post_img/cors_localhost.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;원인을-알고-나면-문제의-해결이-쉬워집니다&quot;&gt;원인을 알고 나면 문제의 해결이 쉬워집니다.&lt;/h2&gt;

&lt;h2 id=&quot;참고자료&quot;&gt;참고자료&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://developer.mozilla.org/ko/docs/Web/HTTP/CORS/Errors/CORSNotSupportingCredentials&quot;&gt;Reason: Credential is not supported if the CORS header ‘Access-Control-Allow-Origin’ is ‘*’&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.npmjs.com/package/cors&quot;&gt;cors&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="axios" /><category term="session" /><category term="cors" /><summary type="html">그냥 사용하면 오류가 발생합니다.</summary></entry><entry><title type="html">Sequelize에서 날짜에 대한 타임존 처리 하기</title><link href="https://lahuman.github.io/sequelize_timezone/" rel="alternate" type="text/html" title="Sequelize에서 날짜에 대한 타임존 처리 하기" /><published>2020-06-01T00:00:00+09:00</published><updated>2020-06-01T00:00:00+09:00</updated><id>https://lahuman.github.io/sequelize_timezone</id><content type="html" xml:base="https://lahuman.github.io/sequelize_timezone/">&lt;h1 id=&quot;sequelize에서-날짜에-대한-타임존-처리-하기&quot;&gt;Sequelize에서 날짜에 대한 타임존 처리 하기&lt;/h1&gt;

&lt;p&gt;Sequelize에서 날짜형(date)을 저장시 -9:00 된 값으로 저장이 됩니다.&lt;/p&gt;

&lt;p&gt;EX) 6월 4일 00:00 =&amp;gt; 6월 3일 15:00&lt;/p&gt;

&lt;p&gt;서버의 타임존도 KST이고, DBMS의 타임존도 KST임에도 저장시 -9시간이 됩니다.&lt;/p&gt;

&lt;p&gt;이럴때는 connection에 timezone을 설정하면 처리가 됩니다.&lt;/p&gt;

&lt;p&gt;아래는 처리 하는 Sequelize Connection 예제입니다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;const Sequelize = require(&quot;sequelize&quot;);

// Option 1: Passing parameters separately
const sequelize = new Sequelize(
  process.env.MYSQL_DB,
  process.env.MYSQL_USER,
  process.env.MYSQL_PASS,
  {
    host: process.env.MYSQL_URL,
    dialect: &quot;mysql&quot;,
    dialectOptions: { charset: &quot;utf8mb4&quot;, dateStrings: true, typeCast: true }, // 날짜의 경우 문자열로 타입 변경 처리
    timezone: &quot;+09:00&quot;, // 타임존을 설정
    pool: {
      max: 5,
      min: 0,
      acquire: 30000,
      idle: 10000,
    },
    define: {
      // The `timestamps` field specify whether or not the `createdAt` and `updatedAt` fields will be created.
      // This was true by default, but now is false by default
      timestamps: false,
      supportBigNumbers: true,
    },
  }
);

module.exports = sequelize;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;주요 설정으로 &lt;strong&gt;타임존과 날짜를 외부에 보낼때 처리&lt;/strong&gt;만 추가 해주면 됩니다.&lt;/p&gt;

&lt;h2 id=&quot;참고자료&quot;&gt;참고자료&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://hakurei.tistory.com/214&quot;&gt;[SEQUELIZE] TIMEZONE 세팅&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="sequelize" /><category term="timezone" /><category term="mysql" /><summary type="html">Mysql에 날짜형을 저장시 타임존이 계속 UTC로 처리될때 해결 방법</summary></entry><entry><title type="html">nodejs에서 TYPESCRIPT 사용 tutorial</title><link href="https://lahuman.github.io/hello_typescript/" rel="alternate" type="text/html" title="nodejs에서 TYPESCRIPT 사용 tutorial" /><published>2020-05-29T00:00:00+09:00</published><updated>2020-05-29T00:00:00+09:00</updated><id>https://lahuman.github.io/hello_typescript</id><content type="html" xml:base="https://lahuman.github.io/hello_typescript/">&lt;h1 id=&quot;nodejs에서-typescript-사용해보기&quot;&gt;Nodejs에서 Typescript 사용해보기!&lt;/h1&gt;

&lt;p&gt;nodejs를 하면서 Typescript에 대하여 어려번 들었습니다.&lt;/p&gt;

&lt;p&gt;기본적으로 nosejs에 대한 개발을 REPL 기반으로 하고 있습니다.&lt;/p&gt;

&lt;p&gt;TDD를 하기 위해서는 타입에 대한 검증등 많은 것들을 처리 해야 하는데요. 이는 Typescript와 더 잘 맞습니다.&lt;/p&gt;

&lt;p&gt;한번 사용해보기 위해서 nodejs에서 Typescript를 사용하는 방법을 설명드리겠습니다.&lt;/p&gt;

&lt;h2 id=&quot;typescript-사용해-보기&quot;&gt;Typescript 사용해 보기&lt;/h2&gt;

&lt;p&gt;평소에는 &lt;a href=&quot;https://www.npmjs.com/&quot;&gt;npm&lt;/a&gt;을 사용하지만, 이번에는 &lt;a href=&quot;https://classic.yarnpkg.com/en/&quot;&gt;yarn&lt;/a&gt;을 사용해보려고 합니다.&lt;/p&gt;

&lt;h3 id=&quot;프로젝트-생성하기&quot;&gt;프로젝트 생성하기&lt;/h3&gt;

&lt;p&gt;먼저 프로젝트 디렉토리를 생성하고 yarn 명령어를 이용해서 초기화 합니다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ mkdir learn-typescript
$ cd learn-typescript
$ yarn init -y
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;typescript-사용을-위한-모듈-설치하기&quot;&gt;Typescript 사용을 위한 모듈 설치하기&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;typescript : Typescript 라이브러리&lt;/li&gt;
  &lt;li&gt;ts-node : node에서 Typescript를 사용하기 위한 라이브러리&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ yarn add typescript ts-node
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;typescript-설정-파일-생성하기&quot;&gt;Typescript 설정 파일 생성하기&lt;/h3&gt;

&lt;p&gt;타입스크립트에 대한 정보를 가지고 있는 설정파일을 생성합니다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ yarn run tsc --init
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;실행을 하면 디렉토리에 &lt;strong&gt;tsconfig.json&lt;/strong&gt; 파일이 생성됩니다.&lt;/p&gt;

&lt;p&gt;해당 파일의 내용은 아래와 같습니다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;{
  &quot;compilerOptions&quot;: {
    /* Visit https://aka.ms/tsconfig.json to read more about this file */

    /* Basic Options */
    // &quot;incremental&quot;: true,                   /* Enable incremental compilation */
    &quot;target&quot;: &quot;es2016&quot; /* Specify ECMAScript target version: 'ES3' (default), 'ES5', 'ES2015', 'ES2016', 'ES2017', 'ES2018', 'ES2019', 'ES2020', or 'ESNEXT'. */,
    &quot;module&quot;: &quot;commonjs&quot; /* Specify module code generation: 'none', 'commonjs', 'amd', 'system', 'umd', 'es2015', 'es2020', or 'ESNext'. */,
    // &quot;lib&quot;: [],                             /* Specify library files to be included in the compilation. */
    // &quot;allowJs&quot;: true,                       /* Allow javascript files to be compiled. */
    // &quot;checkJs&quot;: true,                       /* Report errors in .js files. */
    // &quot;jsx&quot;: &quot;preserve&quot;,                     /* Specify JSX code generation: 'preserve', 'react-native', or 'react'. */
    // &quot;declaration&quot;: true,                   /* Generates corresponding '.d.ts' file. */
    // &quot;declarationMap&quot;: true,                /* Generates a sourcemap for each corresponding '.d.ts' file. */
    // &quot;sourceMap&quot;: true,                     /* Generates corresponding '.map' file. */
    // &quot;outFile&quot;: &quot;./&quot;,                       /* Concatenate and emit output to single file. */
    &quot;outDir&quot;: &quot;./dist/&quot; /* Redirect output structure to the directory. */,
    // &quot;rootDir&quot;: &quot;./&quot;,                       /* Specify the root directory of input files. Use to control the output directory structure with --outDir. */
    // &quot;composite&quot;: true,                     /* Enable project compilation */
    // &quot;tsBuildInfoFile&quot;: &quot;./&quot;,               /* Specify file to store incremental compilation information */
    // &quot;removeComments&quot;: true,                /* Do not emit comments to output. */
    // &quot;noEmit&quot;: true,                        /* Do not emit outputs. */
    // &quot;importHelpers&quot;: true,                 /* Import emit helpers from 'tslib'. */
    // &quot;downlevelIteration&quot;: true,            /* Provide full support for iterables in 'for-of', spread, and destructuring when targeting 'ES5' or 'ES3'. */
    // &quot;isolatedModules&quot;: true,               /* Transpile each file as a separate module (similar to 'ts.transpileModule'). */

    /* Strict Type-Checking Options */
    &quot;strict&quot;: true /* Enable all strict type-checking options. */,
    // &quot;noImplicitAny&quot;: true,                 /* Raise error on expressions and declarations with an implied 'any' type. */
    // &quot;strictNullChecks&quot;: true,              /* Enable strict null checks. */
    // &quot;strictFunctionTypes&quot;: true,           /* Enable strict checking of function types. */
    // &quot;strictBindCallApply&quot;: true,           /* Enable strict 'bind', 'call', and 'apply' methods on functions. */
    // &quot;strictPropertyInitialization&quot;: true,  /* Enable strict checking of property initialization in classes. */
    // &quot;noImplicitThis&quot;: true,                /* Raise error on 'this' expressions with an implied 'any' type. */
    // &quot;alwaysStrict&quot;: true,                  /* Parse in strict mode and emit &quot;use strict&quot; for each source file. */

    /* Additional Checks */
    // &quot;noUnusedLocals&quot;: true,                /* Report errors on unused locals. */
    // &quot;noUnusedParameters&quot;: true,            /* Report errors on unused parameters. */
    // &quot;noImplicitReturns&quot;: true,             /* Report error when not all code paths in function return a value. */
    // &quot;noFallthroughCasesInSwitch&quot;: true,    /* Report errors for fallthrough cases in switch statement. */

    /* Module Resolution Options */
    // &quot;moduleResolution&quot;: &quot;node&quot;,            /* Specify module resolution strategy: 'node' (Node.js) or 'classic' (TypeScript pre-1.6). */
    // &quot;baseUrl&quot;: &quot;./&quot;,                       /* Base directory to resolve non-absolute module names. */
    // &quot;paths&quot;: {},                           /* A series of entries which re-map imports to lookup locations relative to the 'baseUrl'. */
    // &quot;rootDirs&quot;: [],                        /* List of root folders whose combined content represents the structure of the project at runtime. */
    // &quot;typeRoots&quot;: [],                       /* List of folders to include type definitions from. */
    // &quot;types&quot;: [],                           /* Type declaration files to be included in compilation. */
    // &quot;allowSyntheticDefaultImports&quot;: true,  /* Allow default imports from modules with no default export. This does not affect code emit, just typechecking. */
    &quot;esModuleInterop&quot;: true /* Enables emit interoperability between CommonJS and ES Modules via creation of namespace objects for all imports. Implies 'allowSyntheticDefaultImports'. */,
    // &quot;preserveSymlinks&quot;: true,              /* Do not resolve the real path of symlinks. */
    // &quot;allowUmdGlobalAccess&quot;: true,          /* Allow accessing UMD globals from modules. */

    /* Source Map Options */
    // &quot;sourceRoot&quot;: &quot;&quot;,                      /* Specify the location where debugger should locate TypeScript files instead of source locations. */
    // &quot;mapRoot&quot;: &quot;&quot;,                         /* Specify the location where debugger should locate map files instead of generated locations. */
    // &quot;inlineSourceMap&quot;: true,               /* Emit a single file with source maps instead of having a separate file. */
    // &quot;inlineSources&quot;: true,                 /* Emit the source alongside the sourcemaps within a single file; requires '--inlineSourceMap' or '--sourceMap' to be set. */

    /* Experimental Options */
    // &quot;experimentalDecorators&quot;: true,        /* Enables experimental support for ES7 decorators. */
    // &quot;emitDecoratorMetadata&quot;: true,         /* Enables experimental support for emitting type metadata for decorators. */

    /* Advanced Options */
    &quot;skipLibCheck&quot;: true /* Skip type checking of declaration files. */,
    &quot;forceConsistentCasingInFileNames&quot;: true /* Disallow inconsistently-cased references to the same file. */
  }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;물론 명령어 없이 추가해도 됩니다.&lt;/p&gt;

&lt;h3 id=&quot;typescript-컴파일&quot;&gt;Typescript 컴파일&lt;/h3&gt;

&lt;p&gt;다음 명령어로 &lt;strong&gt;.ts&lt;/strong&gt; 파일을 컴파일 하여 &lt;strong&gt;.js&lt;/strong&gt; 파일로 변환합니다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ yarn run tsc
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;컴파일 후 기본적으로 같은 디렉토리에 .js파일로 생성됩니다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;tsconfig.json&lt;/strong&gt; 파일의 &lt;strong&gt;outDir&lt;/strong&gt; 값을 이용해서 다른 디렉토리에 생성되도록 변경이 가능합니다.&lt;/p&gt;

&lt;h3 id=&quot;nodejs에서-typescript-실행하기&quot;&gt;nodejs에서 Typescript 실행하기&lt;/h3&gt;

&lt;p&gt;매번 컴파일을 하지 않고 ts-node 명령어를 이용해서 실행할 수 있습니다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# run ts file
$ yarn run ts-node ./src/index.ts
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;여기까지 기본적은 Typescript를 nodejs에서 사용하는 명령어를 확인하였습니다.&lt;/p&gt;

&lt;p&gt;Typescript에 대하여 자세히 알고 싶다면 &lt;a href=&quot;https://www.typescriptlang.org/docs/home.html&quot;&gt;TypeScript Documentation&lt;/a&gt; 문서를 확인하면 됩니다. :)&lt;/p&gt;

&lt;p&gt;마지막으로 마틴 아저씨가 &lt;a href=&quot;http://blog.cleancoder.com/uncle-bob/2020/05/27/ReplDrivenDesign.html&quot;&gt;REPL로 개발한 경험&lt;/a&gt;을 블로그에 올리셨습니다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;So I’ve learned my lesson. REPL driven development feels easier and faster than TDD; but it is not. Next time, it’s back to TDD for me.

내 맘대로 직역 :

내가 배운 교훈은 REPL개발은 TDD에 비해 쉽고 빠르게 보이지만, 실제로는 그렇지 않다. 여러 부분에서 더 많은 비용을 들이게 된다.
그래서 나는 TDD를 다시 사용한다.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;nodejs에서 명확히 구조화된 프로그램 작성을 위해서는 Typescript를 사용하는 것을 추천합니다. :)&lt;/p&gt;

&lt;h2 id=&quot;참고자료&quot;&gt;참고자료&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.typescriptlang.org/docs/home.html&quot;&gt;TypeScript Documentation&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://blog.cleancoder.com/uncle-bob/2020/05/27/ReplDrivenDesign.html&quot;&gt;REPL Driven Design&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="typescript" /><category term="node" /><summary type="html">Typescript를 사용하여 봅니다!</summary></entry><entry><title type="html">swagger-node에서 express-session 설정 &amp;amp; 사용하기</title><link href="https://lahuman.github.io/swagger-node_session/" rel="alternate" type="text/html" title="swagger-node에서 express-session 설정 &amp; 사용하기" /><published>2020-05-22T00:00:00+09:00</published><updated>2020-05-22T00:00:00+09:00</updated><id>https://lahuman.github.io/swagger-node_session</id><content type="html" xml:base="https://lahuman.github.io/swagger-node_session/">&lt;h1 id=&quot;swagger-node에서-express-session-설정--사용하기&quot;&gt;swagger-node에서 express-session 설정 &amp;amp; 사용하기&lt;/h1&gt;

&lt;p&gt;기본적으로 &lt;a href=&quot;https://github.com/swagger-api/swagger-node&quot;&gt;swagger-node&lt;/a&gt;는 &lt;a href=&quot;https://expressjs.com/ko/&quot;&gt;express&lt;/a&gt;를 기반으로 동작합니다.&lt;/p&gt;

&lt;p&gt;swagger-node는 API 용으로 이용하기 때문에 기본적으로 session을 발행하지 않습니다.&lt;/p&gt;

&lt;p&gt;다만 필요에 따라 로그인 프로세스 구현을 하게 될 경우 다음 라이브러리를 이용해야 합니다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.npmjs.com/package/express-session&quot;&gt;express-session&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.npmjs.com/package/body-parser&quot;&gt;body-parser&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;app.js 코드에 다음과 같이 설정을 하면 세션을 이용할수 있습니다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;express 4.X 부터는 body-parser를 사용하지 않고 express에서 제공되는 것을 이용합니다.
또한 &lt;strong&gt;app.use(express.urlencoded({ extended: true }));&lt;/strong&gt; 을 사용하면 fileupload 처리를 이전과 같이 사용할 수 없습니다. 아래 multer를 이용한 예제를 참고 하셔요.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;app.use(
  require(&quot;express-session&quot;)({
    secret: &quot;keyboard cat&quot;,
    cookie: {
      maxAge: 1000 * 60 * 60 , // 1 hour
    },
    resave: false,
    saveUninitialized: false,
  })
);
app.use(express.urlencoded({ extended: true }));
app.use(express.json());
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;추가로 session 관리를 &lt;a href=&quot;http://www.passportjs.org/&quot;&gt;passport&lt;/a&gt;를 이용해서 쉽게 관리 할수 있습니다.&lt;/p&gt;

&lt;p&gt;다음 예제는 SSO의 방식중 하나인 SAML으로 처리한 예제를 준비 하였습니다.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/lahuman/swagger-node_passport_saml&quot;&gt;예제 코드 바로 보기&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&quot;주요점은-passport는-express-session에서만-동작-하기-때문에-세션-설정을-잘해야-합니다&quot;&gt;주요점은 passport는 express-session에서만 동작 하기 때문에 세션 설정을 잘해야 합니다.&lt;/h4&gt;

&lt;h1 id=&quot;multer를-이용한-첨부-파일-uploade&quot;&gt;Multer를 이용한 첨부 파일 uploade&lt;/h1&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;app.use(express.urlencoded({ extended: true }));&lt;/strong&gt;를 설정하면, formData를 바로 접근하지 못하게 됩니다. 이때 다음 샘플을 기준으로 첨부파일을 처리 할 수 있습니다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;// multer 설정
const multer = require(&quot;multer&quot;);
const storage = multer.diskStorage({
  // upload path
  destination: function (req, file, cb) {
    cb(null, &quot;tempfiles&quot;);
  },
  // 업로드된 파일 이름
  filename: function (req, file, cb) {
    cb(null, `${moment().format(&quot;YYYYMMDDHHmmssSSS&quot;)}${file.originalname}`);
  },
});

const upload = multer({
  storage: storage,
  limits: { fileSize: 10 * 1024 * 1024 },
});

... 설정 처리

SwaggerExpress.create(config, function (err, swaggerExpress) {
  if (err) {
    throw err;
  }
  // swagger-node에서 미들웨어 처리 방법
  app.use(
      &quot;/jira/attachments/upload&quot;,
      upload.single(&quot;filepond&quot;),
      async (req, res, next) =&amp;gt; {
        try {
          const file = req.file;
          res.status(201).json({
            status: &quot;OK&quot;,
            file_nm: file.originalname.normalize(&quot;NFC&quot;),
            file_path: file.filename,
          });
        } catch (e) {
          logger.error(e);
          res.status(400).json({ status: &quot;ERROR&quot;, message: e });
        }
      }
    );
});
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;주요 코드만 표기 하였습니다.
&lt;a href=&quot;https://github.com/lahuman/swagger-node_passport_saml&quot;&gt;예제 코드 바로 보기&lt;/a&gt;의 &lt;strong&gt;app.js&lt;/strong&gt;를 참고 하면 전체 코드를 작성하실수 있습니다.&lt;/p&gt;

&lt;h2 id=&quot;참고-자료&quot;&gt;참고 자료&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/swagger-api/swagger-node&quot;&gt;swagger-node&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://expressjs.com/ko/&quot;&gt;express&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.passportjs.org/&quot;&gt;passport&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://stackoverflow.com/ques-tions/29111571/passports-req-isauthenticated-always-returning-false-even-when-i-hardcode-done&quot;&gt;passport’s req.isAuthenticated always returning false, even when I hardcode done(null, true)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="node" /><category term="swagger" /><category term="session" /><summary type="html">추가로 passport 라이브러리와 연동하여 봅시다.</summary></entry></feed>

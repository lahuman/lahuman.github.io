<?xml version="1.0" encoding="utf-8"?><?xml-stylesheet type="text/xml" href="https://lahuman.github.io/feed.xslt.xml"?><feed xmlns="http://www.w3.org/2005/Atom"><generator uri="http://jekyllrb.com" version="3.2.1">Jekyll</generator><link href="https://lahuman.github.io/feed.xml" rel="self" type="application/atom+xml" /><link href="https://lahuman.github.io/" rel="alternate" type="text/html" /><updated>2018-09-20T00:10:28+09:00</updated><id>https://lahuman.github.io/</id><title type="html">lahuman</title><subtitle>열심히 사는 아저씨</subtitle><entry><title type="html">추석 전까지 빡시게 일하자!!!</title><link href="https://lahuman.github.io/20180920-phase/" rel="alternate" type="text/html" title="추석 전까지 빡시게 일하자!!!" /><published>2018-09-14T00:00:00+09:00</published><updated>2018-09-14T00:00:00+09:00</updated><id>https://lahuman.github.io/20180920-phase</id><content type="html" xml:base="https://lahuman.github.io/20180920-phase/">&lt;h1 id=&quot;오늘까지-빡시게-하고-다음주는-천천히-하자&quot;&gt;오늘까지 빡시게 하고 다음주는 천천히 하자.&lt;/h1&gt;

&lt;p&gt;이번주는 내내 야근이다.&lt;/p&gt;

&lt;p&gt;차주도 야근을 많이 할 기세..&lt;/p&gt;

&lt;p&gt;이왕 하는거 즐겁게 일하자!!&lt;/p&gt;

&lt;p&gt;#빠샤&lt;/p&gt;</content><category term="단상" /><summary type="html">야근중</summary></entry><entry><title type="html">추석 전까지 빡시게 일하자!!!</title><link href="https://lahuman.github.io/20180914-phase/" rel="alternate" type="text/html" title="추석 전까지 빡시게 일하자!!!" /><published>2018-09-14T00:00:00+09:00</published><updated>2018-09-14T00:00:00+09:00</updated><id>https://lahuman.github.io/20180914-phase</id><content type="html" xml:base="https://lahuman.github.io/20180914-phase/">&lt;h1 id=&quot;오늘까지-빡시게-하고-다음주는-천천히-하자&quot;&gt;오늘까지 빡시게 하고 다음주는 천천히 하자.&lt;/h1&gt;

&lt;p&gt;이번주는 내내 야근이다.&lt;/p&gt;

&lt;p&gt;차주도 야근을 많이 할 기세..&lt;/p&gt;

&lt;p&gt;이왕 하는거 즐겁게 일하자!!&lt;/p&gt;

&lt;p&gt;#빠샤&lt;/p&gt;</content><category term="단상" /><summary type="html">야근중</summary></entry><entry><title type="html">함부로 남에게 제품을 추천 하지 말자</title><link href="https://lahuman.github.io/20180913-phase/" rel="alternate" type="text/html" title="함부로 남에게 제품을 추천 하지 말자" /><published>2018-09-13T00:00:00+09:00</published><updated>2018-09-13T00:00:00+09:00</updated><id>https://lahuman.github.io/20180913-phase</id><content type="html" xml:base="https://lahuman.github.io/20180913-phase/">&lt;h1 id=&quot;아는-지인에게-제품을-추천받아-공유했지만&quot;&gt;아는 지인에게 제품을 추천받아 공유했지만…&lt;/h1&gt;

&lt;p&gt;아는 지인에게 특가라는 제품을 소개받았다.&lt;/p&gt;

&lt;p&gt;검색해보니 평균 가격이 20만 원대라서 다른 분들에게 공유했는데..&lt;/p&gt;

&lt;p&gt;욕을 엄청 먹었다.&lt;/p&gt;

&lt;p&gt;사실 그 제품을 잘 모르고 공유한 건 실수한 거 같다.&lt;/p&gt;

&lt;p&gt;제품에 대하여 사용해본 것도 아니었고, 특가라고 하는 건강식품 특징상 온라인의 가격 뻥튀기는 있다는 것을 눈치채고 있어야 했다.&lt;/p&gt;

&lt;h2 id=&quot;조금-우울해짐&quot;&gt;조금 우울해짐&lt;/h2&gt;</content><category term="단상" /><summary type="html">정말 써보고 너무 좋아서 공유 하고 싶어도 참아라.</summary></entry><entry><title type="html">진상을 대하는 방법에 대하여</title><link href="https://lahuman.github.io/20180912-phase/" rel="alternate" type="text/html" title="진상을 대하는 방법에 대하여" /><published>2018-09-12T00:00:00+09:00</published><updated>2018-09-12T00:00:00+09:00</updated><id>https://lahuman.github.io/20180912-phase</id><content type="html" xml:base="https://lahuman.github.io/20180912-phase/">&lt;h1 id=&quot;개인적으로-사람이-가장-중요하다고-생각한다&quot;&gt;개인적으로 사람이 가장 중요하다고 생각한다.&lt;/h1&gt;

&lt;p&gt;계획을 짜고, 일을 하고, 결과를 공유하는 모든 일을 함께 해나가는 동료가 중요하다고 생각한다.&lt;/p&gt;

&lt;p&gt;얼마 전에 어느 분이 물었다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;진상인 사람을 만나면 어떻게 할 것이냐고?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;예전이라면 누가 이길지 싸워 보자고 덤빌 수도 있겠지만, 지금은 그냥 일로만 대한다.&lt;/p&gt;

&lt;p&gt;최대한 감정 없이 대하고 이야기하는 부분은 문서화해서 확인받고 처리한다.&lt;/p&gt;

&lt;h2 id=&quot;조금-피곤하지만-확실한-해결책이라-생각한다&quot;&gt;조금 피곤하지만 확실한 해결책이라 생각한다.&lt;/h2&gt;</content><category term="단상" /><summary type="html">얼마전에 받은 질문 중 하나</summary></entry><entry><title type="html">SpringBoot에서 websocket 사용하기</title><link href="https://lahuman.github.io/spring_websocket/" rel="alternate" type="text/html" title="SpringBoot에서 websocket 사용하기" /><published>2018-09-07T00:00:00+09:00</published><updated>2018-09-07T00:00:00+09:00</updated><id>https://lahuman.github.io/spring_websocket</id><content type="html" xml:base="https://lahuman.github.io/spring_websocket/">&lt;h1 id=&quot;springboot에서-websocket-사용하기&quot;&gt;SpringBoot에서 Websocket 사용하기&lt;/h1&gt;

&lt;h2 id=&quot;websocket-이란&quot;&gt;Websocket 이란?&lt;/h2&gt;
&lt;blockquote&gt;
  &lt;p&gt;서버와 클라이언트 사이에 양방향 통신 채널을 구축할 수 있는 통신 프로토콜이다.
동작 방식은 먼저 HTTP 통신을 연결하고 이후 Upgrade 헤더를 보내 양방향 연결로 업그레이드한다.
Websocket은 최신 브라우저에서는 대부분 지원한다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;전체 소스는 참고 내역에 있는 &lt;a href=&quot;https://github.com/callicoder/spring-boot-websocket-chat-demo&quot;&gt;소스&lt;/a&gt;를 확인하면 된다.&lt;/p&gt;

&lt;p&gt;주요 설정은 다음과 같다.&lt;/p&gt;

&lt;h2 id=&quot;1-websocket-configuration&quot;&gt;1. WebSocket Configuration&lt;/h2&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;package com.example.websocketdemo.config;

import org.springframework.context.annotation.Configuration;
import org.springframework.messaging.simp.config.MessageBrokerRegistry;
import org.springframework.web.socket.config.annotation.*;

@Configuration
@EnableWebSocketMessageBroker
public class WebSocketConfig implements WebSocketMessageBrokerConfigurer {

    @Override
    public void registerStompEndpoints(StompEndpointRegistry registry) {
        registry.addEndpoint(&quot;/ws&quot;).withSockJS();
    }

    @Override
    public void configureMessageBroker(MessageBrokerRegistry registry) {
        registry.setApplicationDestinationPrefixes(&quot;/app&quot;);
        registry.enableSimpleBroker(&quot;/topic&quot;);
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;kbd&gt;@EnableWebSocketMessageBroker&lt;/kbd&gt; 은 websocket 서버를 사용한다는 설정이다.
또한 &lt;kbd&gt;WebSocketMessageBrokerConfigure&lt;/kbd&gt;를 상속 받아 몇몇 메소드를 구현하여 websocket 연결 속성을 설정한다.
&lt;kbd&gt;registerStompEndpoints&lt;/kbd&gt;를 이용하여 클라이언트에서 websocket에 접속하는 endpoint를 등록한다.
&lt;kbd&gt;withSockJS()&lt;/kbd&gt;를 이용시에는 브라우져에서 websocket을 지원하지 않을 경우 fallback 옵션을 활성화 하는데 사용됩니다.&lt;/p&gt;

&lt;p&gt;메소드 이름에 STOMP(Simple Text Oriented Messaging Protocol)라는 단어가 있다. 이는 스프링프레임워크의 STOMP 구현체를 사용한다는 의미다.
STOMP가 필요 한 이유는 websocket은 통신 프로토콜이지 특정 주제에 가입한 사용자에게 메시지를 전송하는 기능을 제공하지 않는다.
이를 쉽게 사용하기 위해 STOMP를 사용한다.&lt;/p&gt;

&lt;p&gt;두변째 메소드&lt;kbd&gt;configureMessageBroker&lt;/kbd&gt;는 한 클라이언트에서 다른 클라이언트로 메시지를 라우팅 할 때 사용하는 브로커를 구성한다.
첫번째 라인에서 정의된 &lt;kbd&gt;/app&lt;/kbd&gt;로 시작하는 메시지만 메시지 헨들러로 라우팅한다고 정의한다.
두번째 라인에서 정의된 &lt;kbd&gt;/topic&lt;/kbd&gt;로 시작하는 주제를 가진 메시지를 핸들러로 라우팅하여 해당 주제에 가입한 모든 클라이언트에게 메시지를 방송한다.&lt;/p&gt;

&lt;h2 id=&quot;2-chatcontroller&quot;&gt;2. ChatController&lt;/h2&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;package com.example.websocketdemo.controller;

import com.example.websocketdemo.model.ChatMessage;
import org.springframework.messaging.handler.annotation.MessageMapping;
import org.springframework.messaging.handler.annotation.Payload;
import org.springframework.messaging.handler.annotation.SendTo;
import org.springframework.messaging.simp.SimpMessageHeaderAccessor;
import org.springframework.stereotype.Controller;

@Controller
public class ChatController {

    @MessageMapping(&quot;/chat.sendMessage&quot;)
    @SendTo(&quot;/topic/public&quot;)
    public ChatMessage sendMessage(@Payload ChatMessage chatMessage) {
        return chatMessage;
    }

    @MessageMapping(&quot;/chat.addUser&quot;)
    @SendTo(&quot;/topic/public&quot;)
    public ChatMessage addUser(@Payload ChatMessage chatMessage, 
                               SimpMessageHeaderAccessor headerAccessor) {
        // Add username in web socket session
        headerAccessor.getSessionAttributes().put(&quot;username&quot;, chatMessage.getSender());
        return chatMessage;
    }

}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;kbd&gt;@MessageMapping&lt;/kbd&gt;는 클라이언트에서 보내는 메시지를 매핑한다. 호출 되는 주소는 &lt;kbd&gt;/app/chart.addUer&lt;/kbd&gt;, &lt;kbd&gt;/app/chat.sendMessage&lt;/kbd&gt;가 된다.&lt;/p&gt;

&lt;h2 id=&quot;3-mainjs&quot;&gt;3. main.js&lt;/h2&gt;

&lt;p&gt;javascript 에서 실제 사용은 다음 같이 사용한다.&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;function connect(event) {
    username = document.querySelector('#name').value.trim();

    if(username) {
        usernamePage.classList.add('hidden');
        chatPage.classList.remove('hidden');

        var socket = new SockJS('/ws');
        stompClient = Stomp.over(socket);

        stompClient.connect({}, onConnected, onError);
    }
    event.preventDefault();
}


function onConnected() {
    // Subscribe to the Public Topic
    stompClient.subscribe('/topic/public', onMessageReceived);

    // Tell your username to the server
    stompClient.send(&quot;/app/chat.addUser&quot;,
        {},
        JSON.stringify({sender: username, type: 'JOIN'})
    )
    connectingElement.classList.add('hidden');
}

.... 중략
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;kbd&gt;connect&lt;/kbd&gt;를 통해 클라이언트는 websocket을 연결 합니다.
연결에 성공하면 &lt;kbd&gt;/topic/public&lt;/kbd&gt; 주제에 가입하여 메시지를 주고 받습니다.&lt;/p&gt;

&lt;h2 id=&quot;참고-내역&quot;&gt;참고 내역&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/callicoder/spring-boot-websocket-chat-demo&quot;&gt;callicoder/spring-boot-websocket-chat-demo&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.callicoder.com/spring-boot-websocket-chat-example/&quot;&gt;Building a chat application with Spring Boot and WebSocket&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://d2.naver.com/helloworld/1336&quot;&gt;WebSocket과 Socket.io&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="websocket" /><summary type="html">어떤 일로 websocket을 확인해야 하는데, 실제로 사용해보기는 처음이다.</summary></entry><entry><title type="html">이번주는 내내 바쁘다.</title><link href="https://lahuman.github.io/20180905-phase/" rel="alternate" type="text/html" title="이번주는 내내 바쁘다." /><published>2018-09-05T00:00:00+09:00</published><updated>2018-09-05T00:00:00+09:00</updated><id>https://lahuman.github.io/20180905-phase</id><content type="html" xml:base="https://lahuman.github.io/20180905-phase/">&lt;h1 id=&quot;하나의-인연을-끊고-다시-준비-중&quot;&gt;하나의 인연을 끊고 다시 준비 중…&lt;/h1&gt;

&lt;p&gt;사람도 만나고 이야기 되던 것도 정리하고, 많은 일들이 있었다.&lt;/p&gt;

&lt;p&gt;중요한 건 회사 일도 많이 있었다. MongoDB와 씨름 하느라 이번주 2일간 정신이 없었다.&lt;/p&gt;

&lt;p&gt;또 인연이 아닌 것을 흘려 보내기도 하였다.
사람의 욕심은 끊이 없기에, 또한 내 깜냥이 이 정도라는 것을 느끼는 일이었다.&lt;/p&gt;

&lt;p&gt;#그러하다&lt;/p&gt;</content><category term="단상" /><summary type="html">MongoDB와 씨름하느라 많이 바쁘다.</summary></entry><entry><title type="html">나를 잘 표현한 글이 없다.</title><link href="https://lahuman.github.io/20180828-phase/" rel="alternate" type="text/html" title="나를 잘 표현한 글이 없다." /><published>2018-08-28T00:00:00+09:00</published><updated>2018-08-28T00:00:00+09:00</updated><id>https://lahuman.github.io/20180828-phase</id><content type="html" xml:base="https://lahuman.github.io/20180828-phase/">&lt;h1 id=&quot;이직을-준비-하긴-하는데-나를-잘-표현한-글이-없다&quot;&gt;이직을 준비 하긴 하는데 나를 잘 표현한 글이 없다.&lt;/h1&gt;

&lt;p&gt;기존에 틀에 박힌 이력서를 읽으면서 내가 누구인지를 모를때가 많다.&lt;/p&gt;

&lt;p&gt;이력서만 보고 나를 판단 해야 하는데.. 뭐랄까?&lt;/p&gt;

&lt;p&gt;이력서의 나는 그냥 SI 프로젝트를 많이 뛴 경험 많은 개발자? 정도다.&lt;/p&gt;

&lt;p&gt;내가 하고 싶은것과 원하는 것이 없다.&lt;/p&gt;

&lt;p&gt;이력서를 하나 이쁘게 써볼까??&lt;/p&gt;

&lt;h2 id=&quot;이러고-안할지도&quot;&gt;이러고 안할지도..&lt;/h2&gt;</content><category term="단상" /><summary type="html">이력서를 하나 잘~ 써볼까?</summary></entry><entry><title type="html">Python] Postgresql결과를 CSV 파일로 저장 하기</title><link href="https://lahuman.github.io/python_postgresql_csv/" rel="alternate" type="text/html" title="Python] Postgresql결과를 CSV 파일로 저장 하기" /><published>2018-08-27T00:00:00+09:00</published><updated>2018-08-27T00:00:00+09:00</updated><id>https://lahuman.github.io/python_postgresql_csv</id><content type="html" xml:base="https://lahuman.github.io/python_postgresql_csv/">&lt;h1 id=&quot;python-postgresql결과를-csv-파일로-저장-하기&quot;&gt;Python] Postgresql결과를 CSV 파일로 저장 하기&lt;/h1&gt;

&lt;p&gt;SQL의 결과를 CSV 파일로 저장하는 간단한 프로그램이다.&lt;/p&gt;

&lt;p&gt;제약 조건은 다음과 같다.&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;1000만건 이상의 데이터가 있으므로 페이징 처리가 되어야 한다.&lt;/li&gt;
  &lt;li&gt;테이블명은 년_월_일_시간 형식이다.&lt;/li&gt;
  &lt;li&gt;시간은 2시간씩 텀을 가지고 있다.&lt;/li&gt;
  &lt;li&gt;결과 파일은 테이블 명과 동일 해야 한다.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;프로그램은 다음과 같다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# -*- coding: utf-8 -*
import psycopg2
import csv
import time

pagination_size = 100000
table_name = &quot;wk_log_2018_08_{}.tb_log_http_2018_08_{}_{} &quot;
sql = &quot;select host, uri, srvAdd, cliAdd, srvprt, rcvTime from &quot; + table_name
sql_cnt = &quot;select count(*) from &quot; + table_name
limit = &quot; offset {} limit &quot; + str(pagination_size)


def save_db_data(rows, save_file):
    with open(save_file + &quot;.log&quot;, 'wb') as csv_file:
        csv_w = csv.writer(csv_file, delimiter=&quot;|&quot;)
        for row in rows:
            row_list = list(row)
            csv_w.writerow(row_list)


def use_pagination():
    try:
        with psycopg2.connect(&quot;dbname='admin' user='admin' host='localhost' password='admin'&quot;) as conn:
            with conn.cursor() as cur:
                for day in xrange(1, 19):
                    for hour in xrange(0, 24, 2):
                        cur.execute(sql_cnt.format(&quot;{0:02d}&quot;.format(day), &quot;{0:02d}&quot;.format(day),
                                                   &quot;{0:02d}&quot;.format(hour)))
                        time.sleep(1)
                        for x in xrange(0, cur.fetchone()[0], pagination_size):
                            cur.execute(sql.format(&quot;{0:02d}&quot;.format(day), &quot;{0:02d}&quot;.format(day),
                                                   &quot;{0:02d}&quot;.format(hour)) + limit.format(x))
                            rows = cur.fetchall()
                            if len(rows) &amp;gt; 0:
                                save_db_data(rows, table_name.format(&quot;{0:02d}&quot;.format(day), &quot;{0:02d}&quot;.format(day),
                                                                     &quot;{0:02d}&quot;.format(hour)) + &quot;_&quot; + str(x))
                            else:
                                break;
    except Exception as e:
        print(&quot;I am unable to connect to the database: &quot; + str(e))


if __name__ == &quot;__main__&quot;:
    use_pagination()

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;파이썬을 이용하면 참 쉽줘~&lt;/p&gt;</content><category term="postgresql" /><category term="python" /><category term="csv" /><summary type="html">페이징 처리까지 포함 하여</summary></entry><entry><title type="html">Postgresql] INT4 convert IP 처리</title><link href="https://lahuman.github.io/postgresql_int_to_ip/" rel="alternate" type="text/html" title="Postgresql] INT4 convert IP 처리" /><published>2018-08-23T00:00:00+09:00</published><updated>2018-08-23T00:00:00+09:00</updated><id>https://lahuman.github.io/postgresql_int_to_ip</id><content type="html" xml:base="https://lahuman.github.io/postgresql_int_to_ip/">&lt;h1 id=&quot;int4-형식으로-저장된-ip-값을-function을-이용하여-처리-하기&quot;&gt;INT4 형식으로 저장된 IP 값을 Function을 이용하여 처리 하기&lt;/h1&gt;

&lt;p&gt;IP를 postgresql에 저장을 할때 문자열로 저장을 하기도 하지만, &lt;a href=&quot;https://www.postgresql.org/docs/9.1/static/datatype-net-types.html&quot;&gt;Network Address Types&lt;/a&gt;으로 제공도 된다.&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Name&lt;/th&gt;
      &lt;th&gt;Storage Size&lt;/th&gt;
      &lt;th&gt;Description&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;cidr&lt;/td&gt;
      &lt;td&gt;7 or 19 bytes&lt;/td&gt;
      &lt;td&gt;IPv4 and IPv6 networks&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;inet&lt;/td&gt;
      &lt;td&gt;7 or 19 bytes&lt;/td&gt;
      &lt;td&gt;IPv4 and IPv6 hosts and networks&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;macaddr&lt;/td&gt;
      &lt;td&gt;6 bytes&lt;/td&gt;
      &lt;td&gt;MAC addresses&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;또한 다른 방식으로는 int8로 저장이 되기도 한다.&lt;/p&gt;

&lt;p&gt;문제는 int4 형식으로 저장되었을 경우이다.&lt;/p&gt;

&lt;p&gt;이 경우에는 음수값에 대하여 IP 형식으로 표출하기 위해서는 int4보다 큰 양수 형식으로 변환하여 표시 해야 한다.&lt;/p&gt;

&lt;p&gt;간단하게 function을 이용하여 만들어 보았다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;create or replace function int2ip(intVal integer)
returns TABLE(
    ipVal text
)
as $$
begin
    if intVal &amp;lt; 0 then
      return QUERY SELECT ('0.0.0.0'::inet + ((2147483649+intVal)::bigint+2147483647::bigint))::text;
      -- return QUERY SELECT '0.0.0.0'::inet + ( 'x' || to_hex(intVal))::bit(32)::bigint
    else
      return QUERY SELECT ('0.0.0.0'::inet + intVal)::text;
    end if;
    
end; $$
language 'plpgsql';


-- 211.115.106.210
select int2ip(-747410734);
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;결과&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;int2ip&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;211.115.106.210/32&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;http://rextester.com/l/postgresql_online_compiler&quot;&gt;postgresql을 설치 하지 않고도 온라인에서 간단하게 테스트 하는 사이트&lt;/a&gt;&lt;/strong&gt;를 이용하였다..&lt;/p&gt;

&lt;h2 id=&quot;참고-사이트&quot;&gt;참고 사이트&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://rextester.com/l/postgresql_online_compiler&quot;&gt;compile postgresql online&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.postgresql.org/docs/9.1/static/datatype-net-types.html&quot;&gt;Network Address Types&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="postgresql" /><category term="ip" /><summary type="html">INT4 형식으로 저장된 IP 값을 Function을 이용하여 처리 하기</summary></entry><entry><title type="html">업무 진행 프로세스 정리</title><link href="https://lahuman.github.io/workflow/" rel="alternate" type="text/html" title="업무 진행 프로세스 정리" /><published>2018-08-21T00:00:00+09:00</published><updated>2018-08-21T00:00:00+09:00</updated><id>https://lahuman.github.io/workflow</id><content type="html" xml:base="https://lahuman.github.io/workflow/">&lt;h1 id=&quot;업무-프로세스-정리&quot;&gt;업무 프로세스 정리&lt;/h1&gt;

&lt;figure&gt;
    
    &lt;a href=&quot;https://lahuman.github.io/assets/img/phase/workflow.png&quot;&gt;&lt;img src=&quot;https://lahuman.github.io/assets/img/phase/workflow.png&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;
    
    &lt;figcaption&gt;Workflow&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;ol&gt;
  &lt;li&gt;처리 업무가 발생시 요구사항을 정리 합니다.&lt;/li&gt;
  &lt;li&gt;정리된 요구 사항을 기반으로 업무 담당자를 지정 합니다.&lt;/li&gt;
  &lt;li&gt;업무 담당자는 업무 파악 후 일정을 공유 합니다.
    &lt;ul&gt;
      &lt;li&gt;일정은 2주 이상 소요될 경우 WBS 형식의 일정 계획을 수립 공유&lt;/li&gt;
      &lt;li&gt;1주 이내 처리 예정의 경우 완료 시점만 표기&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;처리 완료시 검수 요청합니다.
    &lt;ul&gt;
      &lt;li&gt;검수 요청은 팀장 또는 요구사항 작성자&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;검수시 재처리가 필요 할 경우 &lt;strong&gt;3&lt;/strong&gt;으로 이동 합니다.&lt;/li&gt;
  &lt;li&gt;검수 완료시 해당 업무에 대한 종료 처리 합니다.
    &lt;ul&gt;
      &lt;li&gt;종료 처리는 검수자가 결정&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;</content><category term="단상" /><summary type="html">상세하면 더 상세하겠지만 대충 이정도 아닐까??</summary></entry></feed>
